!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["react-track"]=t():e["react-track"]=t()}(this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=18)}([function(e,t,n){"use strict";e.exports=n(6)},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";function r(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var o=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=r(e),s=1;s<arguments.length;s++){n=Object(arguments[s]);for(var c in n)i.call(n,c)&&(u[c]=n[c]);if(o){l=o(n);for(var f=0;f<l.length;f++)a.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t,n){"use strict";var r={};e.exports=r},function(e,t,n){"use strict";function r(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(r)}catch(e){console.error(e)}}r(),e.exports=n(7)},function(e,t,n){"use strict";function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}Object.defineProperty(t,"__esModule",{value:!0});var o=(t.includes=function(e,t){return t.includes?t.includes(e):!!t.filter(function(t){return t===e}).length},function(e,t){return(e%t+t)%t}),i=function(e,t){return Math.max(0,Math.min(t,e))},a=(t.normalizeIndex=function(e,t){return arguments.length>2&&void 0!==arguments[2]&&arguments[2]?o(e,t):i(e,t-1)},t.values=Object.values||function(e){return Object.keys(e).map(function(t){return e[t]})},t.minMap=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return Math.min.apply(Math,r(t).concat([e]))}},t.maxMap=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return Math.max.apply(Math,r(t).concat([e]))}},t.noop=function(){},t.easeOutQuint=function(e){return 1+--e*Math.pow(e,4)}),l=t.on=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return function(n){return function(r){if(r&&"function"==typeof r.addEventListener)return r.addEventListener(e,n,t),function(){return r.removeEventListener(e,n)}}}},u=t.onWindowScroll=function(e){return l("scroll",!0)(e)(window)},s=t.onScroll=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.target,r=void 0===n?window:n;return u(function(t){return(r===window||r===t.target)&&e(t)})},c=t.onScrollEnd=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.wait,r=void 0===n?100:n,o=t.target,i=void 0===o?window:o;return function(t){return s(function(n){clearTimeout(t),t=setTimeout(function(){return n.target===i?e():void 0},r)})}(0)},f=(t.onScrollStart=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.target,r=void 0===n?window:n,o=!1,i=c(function(){o=!1},{target:r}),a=s(function(t){o||(o=!0,e(t))},{target:r});return function(){"function"==typeof a&&a(),"function"==typeof i&&i()}},t.onSwipe=function(e){return function(t){return l("touchstart")(function(n){var r=n.targetTouches,o=r[0],i=o.pageX,a=o.pageY,u=l("touchend")(function(t){var n=t.changedTouches,r=n[0],o=r.pageX,l=r.pageY,s=o-i,c=Math.abs(s),f=l-a,p=Math.abs(f);if(Math.max(c,p)>20){e(c>p?s<0?"right":"left":f<0?"down":"up")}"function"==typeof u&&u()})(t)})(t)}},t.trackTouchesForElement=function(e){var t=[];return l("touchend")(function(e){var n=e.targetTouches;t=n})(e),function(){return t.length}}),p=t.trackOngoingMouseInteraction=function(e){var t=!1;return l("mousedown")(function(){t=!0})(e),l("mouseup")(function(){t=!1})(document.body),function(){return t}},d=(t.hasOngoingInteraction=function(e){var t=f(e),n=p(e);return function(){return!!t()||n()}},{getBoundingClientRect:function(){return{}}});t.isWhollyInView=function(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:d,n=t.getBoundingClientRect(),r=n.left,o=n.right,i=e.getBoundingClientRect(),a=i.left,l=i.right;return r>=a&&o<=l}},t.animate=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.delta,r=void 0===n?0:n,o=t.immediate,i=void 0!==o&&o,l=t.duration,u=void 0===l?500:l,s=t.easing,c=void 0===s?a:s,f=t.prop,p=void 0===f?"scrollTop":f;return new Promise(function(t,n){if(!r)return t();var o=e[p];if(i)return e[p]=o+r,t();var a=!1,l=function t(){a=!0;var r=e[p];return e.removeEventListener("touchstart",t),e[p]=r,n("Animation interrupted by interaction")};e.addEventListener("touchstart",l);var s=null,f=function n(i){if(!a){s||(s=i);var l=i-s,f=c(l/u);e[p]=o+r*f,l<u?window.requestAnimationFrame(n):(e[p]=o+r,t())}};window.requestAnimationFrame(f)})}},function(e,t,n){"use strict";function r(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."),t.name="Invariant Violation",t.framesToPop=1,t}function o(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||x}function i(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||x}function a(){}function l(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||x}function u(e,t,n){var r,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,r)&&!_.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var u=Array(l),s=0;s<l;s++)u[s]=arguments[s+2];o.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:T,type:e,key:i,ref:a,props:o,_owner:S.current}}function s(e){return"object"==typeof e&&null!==e&&e.$$typeof===T}function c(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}function f(e,t,n,r){if(A.length){var o=A.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function p(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function d(e,t,n,o){var i=typeof e;if("undefined"!==i&&"boolean"!==i||(e=null),null===e||"string"===i||"number"===i||"object"===i&&e.$$typeof===P||"object"===i&&e.$$typeof===N)return n(o,e,""===t?"."+h(e,0):t),1;var a=0;if(t=""===t?".":t+":",Array.isArray(e))for(var l=0;l<e.length;l++){i=e[l];var u=t+h(i,l);a+=d(i,u,n,o)}else if("function"==typeof(u=O&&e[O]||e["@@iterator"]))for(e=u.call(e),l=0;!(i=e.next()).done;)i=i.value,u=t+h(i,l++),a+=d(i,u,n,o);else"object"===i&&(n=""+e,r("31","[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n,""));return a}function h(e,t){return"object"==typeof e&&null!==e&&null!=e.key?c(e.key):t.toString(36)}function g(e,t){e.func.call(e.context,t,e.count++)}function m(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?y(e,r,n,k.thatReturnsArgument):null!=e&&(s(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(I,"$&/")+"/")+n,e={$$typeof:T,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function y(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(I,"$&/")+"/"),t=f(t,i,r,o),null==e||d(e,"",m,t),p(t)}/** @license React v16.1.1
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var v=n(2),b=n(3),k=n(1),x={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};o.prototype.isReactComponent={},o.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&r("85"),this.updater.enqueueSetState(this,e,t,"setState")},o.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},a.prototype=o.prototype;var C=i.prototype=new a;C.constructor=i,v(C,o.prototype),C.isPureReactComponent=!0;var w=l.prototype=new a;w.constructor=l,v(w,o.prototype),w.unstable_isAsyncReactComponent=!0,w.render=function(){return this.props.children};var S={current:null},E=Object.prototype.hasOwnProperty,T="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,_={key:!0,ref:!0,__self:!0,__source:!0},O="function"==typeof Symbol&&Symbol.iterator,P="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,N="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.portal")||60106,I=/\/+/g,A=[];"function"==typeof Symbol&&Symbol.for&&Symbol.for("react.fragment");var M={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return y(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=f(null,null,t,n),null==e||d(e,"",g,t),p(t)},count:function(e){return null==e?0:d(e,"",k.thatReturnsNull,null)},toArray:function(e){var t=[];return y(e,t,null,k.thatReturnsArgument),t},only:function(e){return s(e)||r("143"),e}},Component:o,PureComponent:i,unstable_AsyncComponent:l,createElement:u,cloneElement:function(e,t,n){var r=v({},e.props),o=e.key,i=e.ref,a=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,a=S.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)E.call(t,u)&&!_.hasOwnProperty(u)&&(r[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)r.children=n;else if(1<u){l=Array(u);for(var s=0;s<u;s++)l[s]=arguments[s+2];r.children=l}return{$$typeof:T,type:e.type,key:o,ref:i,props:r,_owner:a}},createFactory:function(e){var t=u.bind(null,e);return t.type=e,t},isValidElement:s,version:"16.1.1",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:S,assign:v}},R=Object.freeze({default:M}),D=R&&M||R;e.exports=D.default?D.default:D},function(e,t,n){"use strict";function r(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."),t.name="Invariant Violation",t.framesToPop=1,t}function o(e,t){return(e&t)===t}function i(e,t){if(On.hasOwnProperty(e)||2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))return!1;if(null===t)return!0;switch(typeof t){case"boolean":return On.hasOwnProperty(e)?e=!0:(t=a(e))?e=t.hasBooleanValue||t.hasStringBooleanValue||t.hasOverloadedBooleanValue:(e=e.toLowerCase().slice(0,5),e="data-"===e||"aria-"===e),e;case"undefined":case"number":case"string":case"object":return!0;default:return!1}}function a(e){return Nn.hasOwnProperty(e)?Nn[e]:null}function l(e){return e[1].toUpperCase()}function u(e,t,n,r,o,i,a,l,u){Vn._hasCaughtError=!1,Vn._caughtError=null;var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){Vn._caughtError=e,Vn._hasCaughtError=!0}}function s(){if(Vn._hasRethrowError){var e=Vn._rethrowError;throw Vn._rethrowError=null,Vn._hasRethrowError=!1,e}}function c(){if(Wn)for(var e in Kn){var t=Kn[e],n=Wn.indexOf(e);if(-1<n||r("96",e),!$n[n]){t.extractEvents||r("97",e),$n[n]=t,n=t.eventTypes;for(var o in n){var i=void 0,a=n[o],l=t,u=o;qn.hasOwnProperty(u)&&r("99",u),qn[u]=a;var s=a.phasedRegistrationNames;if(s){for(i in s)s.hasOwnProperty(i)&&f(s[i],l,u);i=!0}else a.registrationName?(f(a.registrationName,l,u),i=!0):i=!1;i||r("98",o,e)}}}}function f(e,t,n){Qn[e]&&r("100",e),Qn[e]=t,Gn[e]=t.eventTypes[n].dependencies}function p(e){Wn&&r("101"),Wn=Array.prototype.slice.call(e),c()}function d(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var o=e[t];Kn.hasOwnProperty(t)&&Kn[t]===o||(Kn[t]&&r("102",t),Kn[t]=o,n=!0)}n&&c()}function h(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=Jn(r),Vn.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function g(e,t){return null==t&&r("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function m(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}function y(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)h(e,t,n[o],r[o]);else n&&h(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function v(e){return y(e,!0)}function b(e){return y(e,!1)}function k(e,t){var n=e.stateNode;if(!n)return null;var o=Xn(n);if(!o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(o=!o.disabled)||(e=e.type,o=!("button"===e||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&r("231",t,typeof n),n)}function x(e,t,n,r){for(var o,i=0;i<$n.length;i++){var a=$n[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=g(o,a))}return o}function C(e){e&&(er=g(er,e))}function w(e){var t=er;er=null,e?m(t,v):m(t,b),er&&r("95"),Vn.rethrowCaughtError()}function S(e){if(e[or])return e[or];for(var t=[];!e[or];){if(t.push(e),!e.parentNode)return null;e=e.parentNode}var n=void 0,r=e[or];if(5===r.tag||6===r.tag)return r;for(;e&&(r=e[or]);e=t.pop())n=r;return n}function E(e){if(5===e.tag||6===e.tag)return e.stateNode;r("33")}function T(e){return e[ir]||null}function _(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function O(e,t,n){for(var r=[];e;)r.push(e),e=_(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function P(e,t,n){(t=k(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=g(n._dispatchListeners,t),n._dispatchInstances=g(n._dispatchInstances,e))}function N(e){e&&e.dispatchConfig.phasedRegistrationNames&&O(e._targetInst,P,e)}function I(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;t=t?_(t):null,O(t,P,e)}}function A(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=k(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=g(n._dispatchListeners,t),n._dispatchInstances=g(n._dispatchInstances,e))}function M(e){e&&e.dispatchConfig.registrationName&&A(e._targetInst,null,e)}function R(e){m(e,N)}function D(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,l=o;l;l=_(l))a++;l=0;for(var u=i;u;u=_(u))l++;for(;0<a-l;)o=_(o),a--;for(;0<l-a;)i=_(i),l--;for(;a--;){if(o===i||o===i.alternate)break e;o=_(o),i=_(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=_(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=_(r);for(r=0;r<o.length;r++)A(o[r],"bubbled",e);for(e=n.length;0<e--;)A(n[e],"captured",t)}function L(){return!ur&&bn.canUseDOM&&(ur="textContent"in document.documentElement?"textContent":"innerText"),ur}function F(){if(sr._fallbackText)return sr._fallbackText;var e,t,n=sr._startText,r=n.length,o=U(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return sr._fallbackText=o.slice(e,1<t?1-t:void 0),sr._fallbackText}function U(){return"value"in sr._root?sr._root.value:sr._root[L()]}function j(e,t,n,r){this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface;for(var o in e)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?xn.thatReturnsTrue:xn.thatReturnsFalse,this.isPropagationStopped=xn.thatReturnsFalse,this}function H(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function z(e){e instanceof this||r("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function B(e){e.eventPool=[],e.getPooled=H,e.release=z}function V(e,t,n,r){return j.call(this,e,t,n,r)}function W(e,t,n,r){return j.call(this,e,t,n,r)}function K(e,t){switch(e){case"topKeyUp":return-1!==pr.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function $(e){return e=e.detail,"object"==typeof e&&"data"in e?e.data:null}function q(e,t){switch(e){case"topCompositionEnd":return $(t);case"topKeyPress":return 32!==t.which?null:(Cr=!0,kr);case"topTextInput":return e=t.data,e===kr&&Cr?null:e;default:return null}}function Q(e,t){if(wr)return"topCompositionEnd"===e||!dr&&K(e,t)?(e=F(),sr._root=null,sr._startText=null,sr._fallbackText=null,wr=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return br?null:t.data;default:return null}}function G(e){if(e=Zn(e)){Er&&"function"==typeof Er.restoreControlledState||r("194");var t=Xn(e.stateNode);Er.restoreControlledState(e.stateNode,e.type,t)}}function Y(e){Tr?_r?_r.push(e):_r=[e]:Tr=e}function X(){if(Tr){var e=Tr,t=_r;if(_r=Tr=null,G(e),t)for(e=0;e<t.length;e++)G(t[e])}}function Z(e,t){return e(t)}function J(e,t){if(Nr)return Z(e,t);Nr=!0;try{return Z(e,t)}finally{Nr=!1,X()}}function ee(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ir[e.type]:"textarea"===t}function te(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ne(e,t){if(!bn.canUseDOM||t&&!("addEventListener"in document))return!1;t="on"+e;var n=t in document;return n||(n=document.createElement("div"),n.setAttribute(t,"return;"),n="function"==typeof n[t]),!n&&yr&&"wheel"===e&&(n=document.implementation.hasFeature("Events.wheel","3.0")),n}function re(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function oe(e){var t=re(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}function ie(e){e._valueTracker||(e._valueTracker=oe(e))}function ae(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=re(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function le(e,t,n){return e=j.getPooled(Ar.change,e,t,n),e.type="change",Y(n),R(e),e}function ue(e){C(e),w(!1)}function se(e){if(ae(E(e)))return e}function ce(e,t){if("topChange"===e)return t}function fe(){Mr&&(Mr.detachEvent("onpropertychange",pe),Rr=Mr=null)}function pe(e){"value"===e.propertyName&&se(Rr)&&(e=le(Rr,e,te(e)),J(ue,e))}function de(e,t,n){"topFocus"===e?(fe(),Mr=t,Rr=n,Mr.attachEvent("onpropertychange",pe)):"topBlur"===e&&fe()}function he(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return se(Rr)}function ge(e,t){if("topClick"===e)return se(t)}function me(e,t){if("topInput"===e||"topChange"===e)return se(t)}function ye(e,t,n,r){return j.call(this,e,t,n,r)}function ve(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Fr[e])&&!!t[e]}function be(){return ve}function ke(e,t,n,r){return j.call(this,e,t,n,r)}function xe(e){return e=e.type,"string"==typeof e?e:"function"==typeof e?e.displayName||e.name:null}function Ce(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(t=t.return,0!=(2&t.effectTag))return 1}return 3===t.tag?2:3}function we(e){return!!(e=e._reactInternalFiber)&&2===Ce(e)}function Se(e){2!==Ce(e)&&r("188")}function Ee(e){var t=e.alternate;if(!t)return t=Ce(e),3===t&&r("188"),1===t?null:e;for(var n=e,o=t;;){var i=n.return,a=i?i.alternate:null;if(!i||!a)break;if(i.child===a.child){for(var l=i.child;l;){if(l===n)return Se(i),e;if(l===o)return Se(i),t;l=l.sibling}r("188")}if(n.return!==o.return)n=i,o=a;else{l=!1;for(var u=i.child;u;){if(u===n){l=!0,n=i,o=a;break}if(u===o){l=!0,o=i,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,o=i;break}if(u===o){l=!0,o=a,n=i;break}u=u.sibling}l||r("189")}}n.alternate!==o&&r("190")}return 3!==n.tag&&r("188"),n.stateNode.current===n?e:t}function Te(e){if(!(e=Ee(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function _e(e){if(!(e=Ee(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Oe(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=S(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],Vr(e.topLevelType,t,e.nativeEvent,te(e.nativeEvent))}function Pe(e){Br=!!e}function Ne(e,t,n){return n?Cn.listen(n,t,Ae.bind(null,e)):null}function Ie(e,t,n){return n?Cn.capture(n,t,Ae.bind(null,e)):null}function Ae(e,t){if(Br){var n=te(t);if(n=S(n),null===n||"number"!=typeof n.tag||2===Ce(n)||(n=null),zr.length){var r=zr.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{J(Oe,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>zr.length&&zr.push(e)}}}function Me(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}function Re(e){if($r[e])return $r[e];if(!Kr[e])return e;var t,n=Kr[e];for(t in n)if(n.hasOwnProperty(t)&&t in qr)return $r[e]=n[t];return""}function De(e){return Object.prototype.hasOwnProperty.call(e,Xr)||(e[Xr]=Yr++,Gr[e[Xr]]={}),Gr[e[Xr]]}function Le(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Fe(e,t){var n=Le(e);e=0;for(var r;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=Le(n)}}function Ue(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}function je(e,t){if(ro||null==eo||eo!==wn())return null;var n=eo;return"selectionStart"in n&&Ue(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?(n=window.getSelection(),n={anchorNode:n.anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}):n=void 0,no&&Sn(no,n)?null:(no=n,e=j.getPooled(Jr.select,to,e,t),e.type="select",e.target=eo,R(e),e)}function He(e,t,n,r){return j.call(this,e,t,n,r)}function ze(e,t,n,r){return j.call(this,e,t,n,r)}function Be(e,t,n,r){return j.call(this,e,t,n,r)}function Ve(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,32<=e||13===e?e:0}function We(e,t,n,r){return j.call(this,e,t,n,r)}function Ke(e,t,n,r){return j.call(this,e,t,n,r)}function $e(e,t,n,r){return j.call(this,e,t,n,r)}function qe(e,t,n,r){return j.call(this,e,t,n,r)}function Qe(e,t,n,r){return j.call(this,e,t,n,r)}function Ge(e){0>fo||(e.current=co[fo],co[fo]=null,fo--)}function Ye(e,t){fo++,co[fo]=e.current,e.current=t}function Xe(e){return Je(e)?bo:yo.current}function Ze(e,t){var n=e.type.contextTypes;if(!n)return _n;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Je(e){return 2===e.tag&&null!=e.type.childContextTypes}function et(e){Je(e)&&(Ge(vo,e),Ge(yo,e))}function tt(e,t,n){null!=yo.cursor&&r("168"),Ye(yo,t,e),Ye(vo,n,e)}function nt(e,t){var n=e.stateNode,o=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;n=n.getChildContext();for(var i in n)i in o||r("108",xe(e)||"Unknown",i);return kn({},t,n)}function rt(e){if(!Je(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||_n,bo=yo.current,Ye(yo,t,e),Ye(vo,vo.current,e),!0}function ot(e,t){var n=e.stateNode;if(n||r("169"),t){var o=nt(e,bo);n.__reactInternalMemoizedMergedChildContext=o,Ge(vo,e),Ge(yo,e),Ye(yo,o,e)}else Ge(vo,e);Ye(vo,t,e)}function it(e,t,n){this.tag=e,this.key=t,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.memoizedState=this.updateQueue=this.memoizedProps=this.pendingProps=this.ref=null,this.internalContextTag=n,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function at(e,t,n){var r=e.alternate;return null===r?(r=new it(e.tag,e.key,e.internalContextTag),r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.pendingProps=t,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function lt(e,t,n){var o=void 0,i=e.type,a=e.key;return"function"==typeof i?(o=i.prototype&&i.prototype.isReactComponent?new it(2,a,t):new it(0,a,t),o.type=i,o.pendingProps=e.props):"string"==typeof i?(o=new it(5,a,t),o.type=i,o.pendingProps=e.props):"object"==typeof i&&null!==i&&"number"==typeof i.tag?(o=i,o.pendingProps=e.props):r("130",null==i?i:typeof i,""),o.expirationTime=n,o}function ut(e,t,n,r){return t=new it(10,r,t),t.pendingProps=e,t.expirationTime=n,t}function st(e,t,n){return t=new it(6,null,t),t.pendingProps=e,t.expirationTime=n,t}function ct(e,t,n){return t=new it(7,e.key,t),t.type=e.handler,t.pendingProps=e,t.expirationTime=n,t}function ft(e,t,n){return e=new it(9,null,t),e.expirationTime=n,e}function pt(e,t,n){return t=new it(4,e.key,t),t.pendingProps=e.children||[],t.expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function dt(e){return function(t){try{return e(t)}catch(e){}}}function ht(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);ko=dt(function(e){return t.onCommitFiberRoot(n,e)}),xo=dt(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}function gt(e){"function"==typeof ko&&ko(e)}function mt(e){"function"==typeof xo&&xo(e)}function yt(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1}}function vt(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}function bt(e,t){var n=e.alternate,r=e.updateQueue;null===r&&(r=e.updateQueue=yt(null)),null!==n?null===(e=n.updateQueue)&&(e=n.updateQueue=yt(null)):e=null,e=e!==r?e:null,null===e?vt(r,t):null===r.last||null===e.last?(vt(r,t),vt(e,t)):(vt(r,t),e.last=t)}function kt(e,t,n,r){return e=e.partialState,"function"==typeof e?e.call(t,n,r):e}function xt(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var a=!0,l=n.first,u=!1;null!==l;){var s=l.expirationTime;if(s>i){var c=n.expirationTime;(0===c||c>s)&&(n.expirationTime=s),u||(u=!0,n.baseState=e)}else u||(n.first=l.next,null===n.first&&(n.last=null)),l.isReplace?(e=kt(l,r,e,o),a=!0):(s=kt(l,r,e,o))&&(e=a?kn({},e,s):kn(e,s),a=!1),l.isForced&&(n.hasForceUpdate=!0),null!==l.callback&&(s=n.callbackList,null===s&&(s=n.callbackList=[]),s.push(l));l=l.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||(t.updateQueue=null),u||(n.baseState=e),e}function Ct(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var o=n[e],i=o.callback;o.callback=null,"function"!=typeof i&&r("191",i),i.call(t)}}function wt(e,t,n,o){function i(e,t){t.updater=a,e.stateNode=t,t._reactInternalFiber=e}var a={isMounted:we,enqueueSetState:function(n,r,o){n=n._reactInternalFiber,o=void 0===o?null:o;var i=t(n);bt(n,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,nextCallback:null,next:null}),e(n,i)},enqueueReplaceState:function(n,r,o){n=n._reactInternalFiber,o=void 0===o?null:o;var i=t(n);bt(n,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,nextCallback:null,next:null}),e(n,i)},enqueueForceUpdate:function(n,r){n=n._reactInternalFiber,r=void 0===r?null:r;var o=t(n);bt(n,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,nextCallback:null,next:null}),e(n,o)}};return{adoptClassInstance:i,constructClassInstance:function(e,t){var n=e.type,r=Xe(e),o=2===e.tag&&null!=e.type.contextTypes,a=o?Ze(e,r):_n;return t=new n(t,a),i(e,t),o&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=a),t},mountClassInstance:function(e,t){var n=e.alternate,o=e.stateNode,i=o.state||null,l=e.pendingProps;l||r("158");var u=Xe(e);o.props=l,o.state=e.memoizedState=i,o.refs=_n,o.context=Ze(e,u),null!=e.type&&null!=e.type.prototype&&!0===e.type.prototype.unstable_isAsyncReactComponent&&(e.internalContextTag|=1),"function"==typeof o.componentWillMount&&(i=o.state,o.componentWillMount(),i!==o.state&&a.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(o.state=xt(n,e,i,o,l,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},updateClassInstance:function(e,t,i){var l=t.stateNode;l.props=t.memoizedProps,l.state=t.memoizedState;var u=t.memoizedProps,s=t.pendingProps;s||null==(s=u)&&r("159");var c=l.context,f=Xe(t);if(f=Ze(t,f),"function"!=typeof l.componentWillReceiveProps||u===s&&c===f||(c=l.state,l.componentWillReceiveProps(s,f),l.state!==c&&a.enqueueReplaceState(l,l.state,null)),c=t.memoizedState,i=null!==t.updateQueue?xt(e,t,t.updateQueue,l,s,i):c,!(u!==s||c!==i||vo.current||null!==t.updateQueue&&t.updateQueue.hasForceUpdate))return"function"!=typeof l.componentDidUpdate||u===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),!1;var p=s;if(null===u||null!==t.updateQueue&&t.updateQueue.hasForceUpdate)p=!0;else{var d=t.stateNode,h=t.type;p="function"==typeof d.shouldComponentUpdate?d.shouldComponentUpdate(p,i,f):!h.prototype||!h.prototype.isPureReactComponent||(!Sn(u,p)||!Sn(c,i))}return p?("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(s,i,f),"function"==typeof l.componentDidUpdate&&(t.effectTag|=4)):("function"!=typeof l.componentDidUpdate||u===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),n(t,s),o(t,i)),l.props=s,l.state=i,l.context=f,p}}}function St(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Co,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Et(e){return null===e||void 0===e?null:(e=So&&e[So]||e["@@iterator"],"function"==typeof e?e:null)}function Tt(e,t){var n=t.ref;if(null!==n&&"function"!=typeof n){if(t._owner){t=t._owner;var o=void 0;t&&(2!==t.tag&&r("110"),o=t.stateNode),o||r("147",n);var i=""+n;return null!==e&&null!==e.ref&&e.ref._stringRef===i?e.ref:(e=function(e){var t=o.refs===_n?o.refs={}:o.refs;null===e?delete t[i]:t[i]=e},e._stringRef=i,e)}"string"!=typeof n&&r("148"),t._owner||r("149",n)}return n}function _t(e,t){"textarea"!==e.type&&r("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Ot(e,t){function n(n,r){if(t){if(!e){if(null===r.alternate)return;r=r.alternate}var o=n.lastEffect;null!==o?(o.nextEffect=r,n.lastEffect=r):n.firstEffect=n.lastEffect=r,r.nextEffect=null,r.effectTag=8}}function o(e,r){if(!t)return null;for(;null!==r;)n(e,r),r=r.sibling;return null}function i(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(t,n,r){return e?(t=at(t,n,r),t.index=0,t.sibling=null,t):(t.expirationTime=r,t.effectTag=0,t.index=0,t.sibling=null,t.pendingProps=n,t)}function l(e,n,r){return e.index=r,t?null!==(r=e.alternate)?(r=r.index,r<n?(e.effectTag=2,n):r):(e.effectTag=2,n):n}function u(e){return t&&null===e.alternate&&(e.effectTag=2),e}function s(e,t,n,r){return null===t||6!==t.tag?(t=st(n,e.internalContextTag,r),t.return=e,t):(t=a(t,n,r),t.return=e,t)}function c(e,t,n,r){return null!==t&&t.type===n.type?(r=a(t,n.props,r),r.ref=Tt(t,n),r.return=e,r):(r=lt(n,e.internalContextTag,r),r.ref=Tt(t,n),r.return=e,r)}function f(e,t,n,r){return null===t||7!==t.tag?(t=ct(n,e.internalContextTag,r),t.return=e,t):(t=a(t,n,r),t.return=e,t)}function p(e,t,n,r){return null===t||9!==t.tag?(t=ft(n,e.internalContextTag,r),t.type=n.value,t.return=e,t):(t=a(t,null,r),t.type=n.value,t.return=e,t)}function d(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?(t=pt(n,e.internalContextTag,r),t.return=e,t):(t=a(t,n.children||[],r),t.return=e,t)}function h(e,t,n,r,o){return null===t||10!==t.tag?(t=ut(n,e.internalContextTag,r,o),t.return=e,t):(t=a(t,n,r),t.return=e,t)}function g(e,t,n){if("string"==typeof t||"number"==typeof t)return t=st(""+t,e.internalContextTag,n),t.return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case po:return t.type===mo?(t=ut(t.props.children,e.internalContextTag,n,t.key),t.return=e,t):(n=lt(t,e.internalContextTag,n),n.ref=Tt(null,t),n.return=e,n);case ho:return t=ct(t,e.internalContextTag,n),t.return=e,t;case go:return n=ft(t,e.internalContextTag,n),n.type=t.value,n.return=e,n;case Co:return t=pt(t,e.internalContextTag,n),t.return=e,t}if(wo(t)||Et(t))return t=ut(t,e.internalContextTag,n,null),t.return=e,t;_t(e,t)}return null}function m(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case po:return n.key===o?n.type===mo?h(e,t,n.props.children,r,o):c(e,t,n,r):null;case ho:return n.key===o?f(e,t,n,r):null;case go:return null===o?p(e,t,n,r):null;case Co:return n.key===o?d(e,t,n,r):null}if(wo(n)||Et(n))return null!==o?null:h(e,t,n,r,null);_t(e,n)}return null}function y(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return e=e.get(n)||null,s(t,e,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case po:return e=e.get(null===r.key?n:r.key)||null,r.type===mo?h(t,e,r.props.children,o,r.key):c(t,e,r,o);case ho:return e=e.get(null===r.key?n:r.key)||null,f(t,e,r,o);case go:return e=e.get(n)||null,p(t,e,r,o);case Co:return e=e.get(null===r.key?n:r.key)||null,d(t,e,r,o)}if(wo(r)||Et(r))return e=e.get(n)||null,h(t,e,r,o,null);_t(t,r)}return null}function v(e,r,a,u){for(var s=null,c=null,f=r,p=r=0,d=null;null!==f&&p<a.length;p++){f.index>p?(d=f,f=null):d=f.sibling;var h=m(e,f,a[p],u);if(null===h){null===f&&(f=d);break}t&&f&&null===h.alternate&&n(e,f),r=l(h,r,p),null===c?s=h:c.sibling=h,c=h,f=d}if(p===a.length)return o(e,f),s;if(null===f){for(;p<a.length;p++)(f=g(e,a[p],u))&&(r=l(f,r,p),null===c?s=f:c.sibling=f,c=f);return s}for(f=i(e,f);p<a.length;p++)(d=y(f,e,p,a[p],u))&&(t&&null!==d.alternate&&f.delete(null===d.key?p:d.key),r=l(d,r,p),null===c?s=d:c.sibling=d,c=d);return t&&f.forEach(function(t){return n(e,t)}),s}function b(e,a,u,s){var c=Et(u);"function"!=typeof c&&r("150"),null==(u=c.call(u))&&r("151");for(var f=c=null,p=a,d=a=0,h=null,v=u.next();null!==p&&!v.done;d++,v=u.next()){p.index>d?(h=p,p=null):h=p.sibling;var b=m(e,p,v.value,s);if(null===b){p||(p=h);break}t&&p&&null===b.alternate&&n(e,p),a=l(b,a,d),null===f?c=b:f.sibling=b,f=b,p=h}if(v.done)return o(e,p),c;if(null===p){for(;!v.done;d++,v=u.next())null!==(v=g(e,v.value,s))&&(a=l(v,a,d),null===f?c=v:f.sibling=v,f=v);return c}for(p=i(e,p);!v.done;d++,v=u.next())null!==(v=y(p,e,d,v.value,s))&&(t&&null!==v.alternate&&p.delete(null===v.key?d:v.key),a=l(v,a,d),null===f?c=v:f.sibling=v,f=v);return t&&p.forEach(function(t){return n(e,t)}),c}return function(e,t,i,l){var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case po:e:{var c=i.key;for(s=t;null!==s;){if(s.key===c){if(10===s.tag?i.type===mo:s.type===i.type){o(e,s.sibling),t=a(s,i.type===mo?i.props.children:i.props,l),t.ref=Tt(s,i),t.return=e,e=t;break e}o(e,s);break}n(e,s),s=s.sibling}i.type===mo?(i=ut(i.props.children,e.internalContextTag,l,i.key),i.return=e,e=i):(l=lt(i,e.internalContextTag,l),l.ref=Tt(t,i),l.return=e,e=l)}return u(e);case ho:e:{for(s=i.key;null!==t;){if(t.key===s){if(7===t.tag){o(e,t.sibling),i=a(t,i,l),i.return=e,e=i;break e}o(e,t);break}n(e,t),t=t.sibling}i=ct(i,e.internalContextTag,l),i.return=e,e=i}return u(e);case go:e:{if(null!==t){if(9===t.tag){o(e,t.sibling),t=a(t,null,l),t.type=i.value,t.return=e,e=t;break e}o(e,t)}t=ft(i,e.internalContextTag,l),t.type=i.value,t.return=e,e=t}return u(e);case Co:e:{for(s=i.key;null!==t;){if(t.key===s){if(4===t.tag&&t.stateNode.containerInfo===i.containerInfo&&t.stateNode.implementation===i.implementation){o(e,t.sibling),i=a(t,i.children||[],l),i.return=e,e=i;break e}o(e,t);break}n(e,t),t=t.sibling}i=pt(i,e.internalContextTag,l),i.return=e,e=i}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==t&&6===t.tag?(o(e,t.sibling),i=a(t,i,l)):(o(e,t),i=st(i,e.internalContextTag,l)),i.return=e,e=i,u(e);if(wo(i))return v(e,t,i,l);if(Et(i))return b(e,t,i,l);if(s&&_t(e,i),void 0===i)switch(e.tag){case 2:case 1:i=e.type,r("152",i.displayName||i.name||"Component")}return o(e,t)}}function Pt(e,t,n,o,i){function a(e,t,n){l(e,t,n,t.expirationTime)}function l(e,t,n,r){t.child=null===e?_o(t,t.child,n,r):e.child===t.child?Eo(t,t.child,n,r):To(t,t.child,n,r)}function u(e,t){var n=t.ref;null===n||e&&e.ref===n||(t.effectTag|=128)}function s(e,t,n,r){if(u(e,t),!n)return r&&ot(t,!1),f(e,t);n=t.stateNode,Hr.current=t;var o=n.render();return t.effectTag|=1,a(e,t,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&ot(t,!0),t.child}function c(e){var t=e.stateNode;t.pendingContext?tt(e,t.pendingContext,t.pendingContext!==t.context):t.context&&tt(e,t.context,!1),y(e,t.containerInfo)}function f(e,t){if(null!==e&&t.child!==e.child&&r("153"),null!==t.child){e=t.child;var n=at(e,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,n=n.sibling=at(e,e.pendingProps,e.expirationTime),n.return=t;n.sibling=null}return t.child}function p(e,t){switch(t.tag){case 3:c(t);break;case 2:rt(t);break;case 4:y(t,t.stateNode.containerInfo)}return null}var d=e.shouldSetTextContent,h=e.useSyncScheduling,g=e.shouldDeprioritizeSubtree,m=t.pushHostContext,y=t.pushHostContainer,v=n.enterHydrationState,b=n.resetHydrationState,k=n.tryToClaimNextHydratableInstance;e=wt(o,i,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t});var x=e.adoptClassInstance,C=e.constructClassInstance,w=e.mountClassInstance,S=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n)return p(e,t);switch(t.tag){case 0:null!==e&&r("155");var o=t.type,i=t.pendingProps,l=Xe(t);return l=Ze(t,l),o=o(i,l),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render?(t.tag=2,i=rt(t),x(t,o),w(t,n),t=s(e,t,!0,i)):(t.tag=1,a(e,t,o),t.memoizedProps=i,t=t.child),t;case 1:e:{if(i=t.type,n=t.pendingProps,o=t.memoizedProps,vo.current)null===n&&(n=o);else if(null===n||o===n){t=f(e,t);break e}o=Xe(t),o=Ze(t,o),i=i(n,o),t.effectTag|=1,a(e,t,i),t.memoizedProps=n,t=t.child}return t;case 2:return i=rt(t),o=void 0,null===e?t.stateNode?r("153"):(C(t,t.pendingProps),w(t,n),o=!0):o=S(e,t,n),s(e,t,o,i);case 3:return c(t),i=t.updateQueue,null!==i?(o=t.memoizedState,i=xt(e,t,i,null,null,n),o===i?(b(),t=f(e,t)):(o=i.element,l=t.stateNode,(null===e||null===e.child)&&l.hydrate&&v(t)?(t.effectTag|=2,t.child=_o(t,t.child,o,n)):(b(),a(e,t,o)),t.memoizedState=i,t=t.child)):(b(),t=f(e,t)),t;case 5:m(t),null===e&&k(t),i=t.type;var E=t.memoizedProps;return o=t.pendingProps,null===o&&null===(o=E)&&r("154"),l=null!==e?e.memoizedProps:null,vo.current||null!==o&&E!==o?(E=o.children,d(i,o)?E=null:l&&d(i,l)&&(t.effectTag|=16),u(e,t),2147483647!==n&&!h&&g(i,o)?(t.expirationTime=2147483647,t=null):(a(e,t,E),t.memoizedProps=o,t=t.child)):t=f(e,t),t;case 6:return null===e&&k(t),e=t.pendingProps,null===e&&(e=t.memoizedProps),t.memoizedProps=e,null;case 8:t.tag=7;case 7:return i=t.pendingProps,vo.current?null===i&&null===(i=e&&e.memoizedProps)&&r("154"):null!==i&&t.memoizedProps!==i||(i=t.memoizedProps),o=i.children,t.stateNode=null===e?_o(t,t.stateNode,o,n):e.child===t.child?Eo(t,t.stateNode,o,n):To(t,t.stateNode,o,n),t.memoizedProps=i,t.stateNode;case 9:return null;case 4:e:{if(y(t,t.stateNode.containerInfo),i=t.pendingProps,vo.current)null===i&&null==(i=e&&e.memoizedProps)&&r("154");else if(null===i||t.memoizedProps===i){t=f(e,t);break e}null===e?t.child=To(t,t.child,i,n):a(e,t,i),t.memoizedProps=i,t=t.child}return t;case 10:e:{if(n=t.pendingProps,vo.current)null===n&&(n=t.memoizedProps);else if(null===n||t.memoizedProps===n){t=f(e,t);break e}a(e,t,n),t.memoizedProps=n,t=t.child}return t;default:r("156")}},beginFailedWork:function(e,t,n){switch(t.tag){case 2:rt(t);break;case 3:c(t);break;default:r("157")}return t.effectTag|=64,null===e?t.child=null:t.child!==e.child&&(t.child=e.child),0===t.expirationTime||t.expirationTime>n?p(e,t):(t.firstEffect=null,t.lastEffect=null,l(e,t,null,n),2===t.tag&&(e=t.stateNode,t.memoizedProps=e.props,t.memoizedState=e.state),t.child)}}}function Nt(e,t,n){function o(e){e.effectTag|=4}var i=e.createInstance,a=e.createTextInstance,l=e.appendInitialChild,u=e.finalizeInitialChildren,s=e.prepareUpdate,c=e.persistence,f=t.getRootHostContainer,p=t.popHostContext,d=t.getHostContext,h=t.popHostContainer,g=n.prepareToHydrateHostInstance,m=n.prepareToHydrateHostTextInstance,y=n.popHydrationState,v=void 0,b=void 0,k=void 0;return e.mutation?(v=function(){},b=function(e,t,n){(t.updateQueue=n)&&o(t)},k=function(e,t,n,r){n!==r&&o(t)}):r(c?"235":"236"),{completeWork:function(e,t,n){var c=t.pendingProps;switch(null===c?c=t.memoizedProps:2147483647===t.expirationTime&&2147483647!==n||(t.pendingProps=null),t.tag){case 1:return null;case 2:return et(t),null;case 3:return h(t),Ge(vo,t),Ge(yo,t),c=t.stateNode,c.pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==e&&null!==e.child||(y(t),t.effectTag&=-3),v(t),null;case 5:p(t),n=f();var x=t.type;if(null!==e&&null!=t.stateNode){var C=e.memoizedProps,w=t.stateNode,S=d();w=s(w,x,C,c,n,S),b(e,t,w,x,C,c,n),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!c)return null===t.stateNode&&r("166"),null;if(e=d(),y(t))g(t,n,e)&&o(t);else{e=i(x,c,n,e,t);e:for(C=t.child;null!==C;){if(5===C.tag||6===C.tag)l(e,C.stateNode);else if(4!==C.tag&&null!==C.child){C.child.return=C,C=C.child;continue}if(C===t)break;for(;null===C.sibling;){if(null===C.return||C.return===t)break e;C=C.return}C.sibling.return=C.return,C=C.sibling}u(e,x,c,n)&&o(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)k(e,t,e.memoizedProps,c);else{if("string"!=typeof c)return null===t.stateNode&&r("166"),null;e=f(),n=d(),y(t)?m(t)&&o(t):t.stateNode=a(c,e,n,t)}return null;case 7:(c=t.memoizedProps)||r("165"),t.tag=8,x=[];e:for((C=t.stateNode)&&(C.return=t);null!==C;){if(5===C.tag||6===C.tag||4===C.tag)r("247");else if(9===C.tag)x.push(C.type);else if(null!==C.child){C.child.return=C,C=C.child;continue}for(;null===C.sibling;){if(null===C.return||C.return===t)break e;C=C.return}C.sibling.return=C.return,C=C.sibling}return C=c.handler,c=C(c.props,x),t.child=Eo(t,null!==e?e.child:null,c,n),t.child;case 8:return t.tag=7,null;case 9:case 10:return null;case 4:return h(t),v(t),null;case 0:r("167");default:r("156")}}}}function It(e,t){function n(e){var n=e.ref;if(null!==n)try{n(null)}catch(n){t(e,n)}}function o(e){switch("function"==typeof mt&&mt(e),e.tag){case 2:n(e);var r=e.stateNode;if("function"==typeof r.componentWillUnmount)try{r.props=e.memoizedProps,r.state=e.memoizedState,r.componentWillUnmount()}catch(n){t(e,n)}break;case 5:n(e);break;case 7:i(e.stateNode);break;case 4:s&&l(e)}}function i(e){for(var t=e;;)if(o(t),null===t.child||s&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function a(e){return 5===e.tag||3===e.tag||4===e.tag}function l(e){for(var t=e,n=!1,a=void 0,l=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&r("160"),n.tag){case 5:a=n.stateNode,l=!1;break e;case 3:case 4:a=n.stateNode.containerInfo,l=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)i(t),l?b(a,t.stateNode):v(a,t.stateNode);else if(4===t.tag?a=t.stateNode.containerInfo:o(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return,4===t.tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var u=e.getPublicInstance,s=e.mutation;e=e.persistence,s||r(e?"235":"236");var c=s.commitMount,f=s.commitUpdate,p=s.resetTextContent,d=s.commitTextUpdate,h=s.appendChild,g=s.appendChildToContainer,m=s.insertBefore,y=s.insertInContainerBefore,v=s.removeChild,b=s.removeChildFromContainer;return{commitResetTextContent:function(e){p(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(a(t)){var n=t;break e}t=t.return}r("160"),n=void 0}var o=t=void 0;switch(n.tag){case 5:t=n.stateNode,o=!1;break;case 3:case 4:t=n.stateNode.containerInfo,o=!0;break;default:r("161")}16&n.effectTag&&(p(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||a(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var i=e;;){if(5===i.tag||6===i.tag)n?o?y(t,i.stateNode,n):m(t,i.stateNode,n):o?g(t,i.stateNode):h(t,i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}},commitDeletion:function(e){l(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var o=t.memoizedProps;e=null!==e?e.memoizedProps:o;var i=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&f(n,a,i,e,o,t)}break;case 6:null===t.stateNode&&r("162"),n=t.memoizedProps,d(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:r("163")}},commitLifeCycles:function(e,t){switch(t.tag){case 2:var n=t.stateNode;if(4&t.effectTag)if(null===e)n.props=t.memoizedProps,n.state=t.memoizedState,n.componentDidMount();else{var o=e.memoizedProps;e=e.memoizedState,n.props=t.memoizedProps,n.state=t.memoizedState,n.componentDidUpdate(o,e)}t=t.updateQueue,null!==t&&Ct(t,n);break;case 3:n=t.updateQueue,null!==n&&Ct(n,null!==t.child?t.child.stateNode:null);break;case 5:n=t.stateNode,null===e&&4&t.effectTag&&c(n,t.type,t.memoizedProps,t);break;case 6:case 4:break;default:r("163")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:t(u(n));break;default:t(n)}}},commitDetachRef:function(e){null!==(e=e.ref)&&e(null)}}}function At(e){function t(e){return e===Oo&&r("174"),e}var n=e.getChildHostContext,o=e.getRootHostContext,i={current:Oo},a={current:Oo},l={current:Oo};return{getHostContext:function(){return t(i.current)},getRootHostContainer:function(){return t(l.current)},popHostContainer:function(e){Ge(i,e),Ge(a,e),Ge(l,e)},popHostContext:function(e){a.current===e&&(Ge(i,e),Ge(a,e))},pushHostContainer:function(e,t){Ye(l,t,e),t=o(t),Ye(a,e,e),Ye(i,t,e)},pushHostContext:function(e){var r=t(l.current),o=t(i.current);r=n(o,e.type,r),o!==r&&(Ye(a,e,e),Ye(i,r,e))},resetHostContainer:function(){i.current=Oo,l.current=Oo}}}function Mt(e){function t(e,t){var n=new it(5,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=a(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=l(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function o(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;p=e}var i=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){r("175")},prepareToHydrateHostTextInstance:function(){r("176")},popHydrationState:function(){return!1}};var a=e.canHydrateInstance,l=e.canHydrateTextInstance,u=e.getNextHydratableSibling,s=e.getFirstHydratableChild,c=e.hydrateInstance,f=e.hydrateTextInstance,p=null,d=null,h=!1;return{enterHydrationState:function(e){return d=s(e.stateNode.containerInfo),p=e,h=!0},resetHydrationState:function(){d=p=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=d;if(r){if(!n(e,r)){if(!(r=u(r))||!n(e,r))return e.effectTag|=2,h=!1,void(p=e);t(p,d)}p=e,d=s(r)}else e.effectTag|=2,h=!1,p=e}},prepareToHydrateHostInstance:function(e,t,n){return t=c(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return f(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==p)return!1;if(!h)return o(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!i(n,e.memoizedProps))for(n=d;n;)t(e,n),n=u(n);return o(e),d=p?u(e.stateNode):null,!0}}}function Rt(e){function t(e){re=q=!0;var t=e.stateNode;if(t.current===e&&r("177"),t.isReadyForCommit=!1,Hr.current=null,1<e.effectTag)if(null!==e.lastEffect){e.lastEffect.nextEffect=e;var n=e.firstEffect}else n=e;else n=e.firstEffect;for(B(),X=n;null!==X;){var o=!1,i=void 0;try{for(;null!==X;){var a=X.effectTag;if(16&a&&A(X),128&a){var l=X.alternate;null!==l&&U(l)}switch(-242&a){case 2:M(X),X.effectTag&=-3;break;case 6:M(X),X.effectTag&=-3,D(X.alternate,X);break;case 4:D(X.alternate,X);break;case 8:oe=!0,R(X),oe=!1}X=X.nextEffect}}catch(e){o=!0,i=e}o&&(null===X&&r("178"),u(X,i),null!==X&&(X=X.nextEffect))}for(V(),t.current=e,X=n;null!==X;){n=!1,o=void 0;try{for(;null!==X;){var s=X.effectTag;if(36&s&&L(X.alternate,X),128&s&&F(X),64&s)switch(i=X,a=void 0,null!==Z&&(a=Z.get(i),Z.delete(i),null==a&&null!==i.alternate&&(i=i.alternate,a=Z.get(i),Z.delete(i))),null==a&&r("184"),i.tag){case 2:i.stateNode.componentDidCatch(a.error,{componentStack:a.componentStack});break;case 3:null===te&&(te=a.error);break;default:r("157")}var c=X.nextEffect;X.nextEffect=null,X=c}}catch(e){n=!0,o=e}n&&(null===X&&r("178"),u(X,o),null!==X&&(X=X.nextEffect))}return q=re=!1,"function"==typeof gt&&gt(e.stateNode),ee&&(ee.forEach(g),ee=null),null!==te&&(e=te,te=null,C(e)),t=t.current.expirationTime,0===t&&(J=Z=null),t}function n(e){for(;;){var t=I(e.alternate,e,Y),n=e.return,r=e.sibling,o=e;if(2147483647===Y||2147483647!==o.expirationTime){if(2!==o.tag&&3!==o.tag)var i=0;else i=o.updateQueue,i=null===i?0:i.expirationTime;for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){e.stateNode.isReadyForCommit=!0;break}e=n}return null}function o(e){var t=P(e.alternate,e,Y);return null===t&&(t=n(e)),Hr.current=null,t}function i(e){var t=N(e.alternate,e,Y);return null===t&&(t=n(e)),Hr.current=null,t}function a(e){if(null!==Z){if(!(0===Y||Y>e))if(Y<=K)for(;null!==Q;)Q=s(Q)?i(Q):o(Q);else for(;null!==Q&&!x();)Q=s(Q)?i(Q):o(Q)}else if(!(0===Y||Y>e))if(Y<=K)for(;null!==Q;)Q=o(Q);else for(;null!==Q&&!x();)Q=o(Q)}function l(e,t){if(q&&r("243"),q=!0,e.isReadyForCommit=!1,e!==G||t!==Y||null===Q){for(;-1<fo;)co[fo]=null,fo--;bo=_n,yo.current=_n,vo.current=!1,_(),G=e,Y=t,Q=at(G.current,null,t)}var n=!1,o=null;try{a(t)}catch(e){n=!0,o=e}for(;n;){if(ne){te=o;break}var l=Q;if(null===l)ne=!0;else{var s=u(l,o);if(null===s&&r("183"),!ne){try{for(n=s,o=t,s=n;null!==l;){switch(l.tag){case 2:et(l);break;case 5:T(l);break;case 3:E(l);break;case 4:E(l)}if(l===s||l.alternate===s)break;l=l.return}Q=i(n),a(o)}catch(e){n=!0,o=e;continue}break}}}return t=te,ne=q=!1,te=null,null!==t&&C(t),e.isReadyForCommit?e.current.alternate:null}function u(e,t){var n=Hr.current=null,r=!1,o=!1,i=null;if(3===e.tag)n=e,c(e)&&(ne=!0);else for(var a=e.return;null!==a&&null===n;){if(2===a.tag?"function"==typeof a.stateNode.componentDidCatch&&(r=!0,i=xe(a),n=a,o=!0):3===a.tag&&(n=a),c(a)){if(oe||null!==ee&&(ee.has(a)||null!==a.alternate&&ee.has(a.alternate)))return null;n=null,o=!1}a=a.return}if(null!==n){null===J&&(J=new Set),J.add(n);var l="";a=e;do{e:switch(a.tag){case 0:case 1:case 2:case 5:var u=a._debugOwner,s=a._debugSource,f=xe(a),p=null;u&&(p=xe(u)),u=s,f="\n    in "+(f||"Unknown")+(u?" (at "+u.fileName.replace(/^.*[\\\/]/,"")+":"+u.lineNumber+")":p?" (created by "+p+")":"");break e;default:f=""}l+=f,a=a.return}while(a);a=l,e=xe(e),null===Z&&(Z=new Map),t={componentName:e,componentStack:a,error:t,errorBoundary:r?n.stateNode:null,errorBoundaryFound:r,errorBoundaryName:i,willRetry:o},Z.set(n,t);try{console.error(t.error)}catch(e){console.error(e)}return re?(null===ee&&(ee=new Set),ee.add(n)):g(n),n}return null===te&&(te=t),null}function s(e){return null!==Z&&(Z.has(e)||null!==e.alternate&&Z.has(e.alternate))}function c(e){return null!==J&&(J.has(e)||null!==e.alternate&&J.has(e.alternate))}function f(){return 20*(1+((m()+100)/20|0))}function p(e){return 0!==$?$:q?re?1:Y:!z||1&e.internalContextTag?f():1}function d(e,t){return h(e,t,!1)}function h(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!q&&n===G&&t<=Y&&(Q=G=null,Y=0);var o=t;if(ve>ye&&r("185"),null===n.nextScheduledRoot)n.remainingExpirationTime=o,null===ae?(ie=ae=n,n.nextScheduledRoot=n):(ae=ae.nextScheduledRoot=n,ae.nextScheduledRoot=ie);else{var i=n.remainingExpirationTime;(0===i||o<i)&&(n.remainingExpirationTime=o)}ue||(ge?me&&k(n,1):1===o?b(1,null):le||(le=!0,H(v)))}e=e.return}}function g(e){h(e,1,!0)}function m(){return K=2+((j()-W)/10|0)}function y(){var e=0,t=null;if(null!==ae)for(var n=ae,o=ie;null!==o;){var i=o.remainingExpirationTime;if(0===i){if((null===n||null===ae)&&r("244"),o===o.nextScheduledRoot){ie=ae=o.nextScheduledRoot=null;break}if(o===ie)ie=i=o.nextScheduledRoot,ae.nextScheduledRoot=i,o.nextScheduledRoot=null;else{if(o===ae){ae=n,ae.nextScheduledRoot=ie,o.nextScheduledRoot=null;break}n.nextScheduledRoot=o.nextScheduledRoot,o.nextScheduledRoot=null}o=n.nextScheduledRoot}else{if((0===e||i<e)&&(e=i,t=o),o===ae)break;n=o,o=o.nextScheduledRoot}}n=se,null!==n&&n===t?ve++:ve=0,se=t,ce=e}function v(e){b(0,e)}function b(e,t){for(he=t,y();null!==se&&0!==ce&&(0===e||ce<=e)&&!fe;)k(se,ce),y();if(null!==he&&(le=!1),null===se||le||(le=!0,H(v)),he=null,fe=!1,ve=0,pe)throw e=de,de=null,pe=!1,e}function k(e,n){if(ue&&r("245"),ue=!0,n<=m()){var o=e.finishedWork;null!==o?(e.finishedWork=null,e.remainingExpirationTime=t(o)):(e.finishedWork=null,null!==(o=l(e,n))&&(e.remainingExpirationTime=t(o)))}else o=e.finishedWork,null!==o?(e.finishedWork=null,e.remainingExpirationTime=t(o)):(e.finishedWork=null,null!==(o=l(e,n))&&(x()?e.finishedWork=o:e.remainingExpirationTime=t(o)));ue=!1}function x(){return!(null===he||he.timeRemaining()>be)&&(fe=!0)}function C(e){null===se&&r("246"),se.remainingExpirationTime=0,pe||(pe=!0,de=e)}var w=At(e),S=Mt(e),E=w.popHostContainer,T=w.popHostContext,_=w.resetHostContainer,O=Pt(e,w,S,d,p),P=O.beginWork,N=O.beginFailedWork,I=Nt(e,w,S).completeWork;w=It(e,u);var A=w.commitResetTextContent,M=w.commitPlacement,R=w.commitDeletion,D=w.commitWork,L=w.commitLifeCycles,F=w.commitAttachRef,U=w.commitDetachRef,j=e.now,H=e.scheduleDeferredCallback,z=e.useSyncScheduling,B=e.prepareForCommit,V=e.resetAfterCommit,W=j(),K=2,$=0,q=!1,Q=null,G=null,Y=0,X=null,Z=null,J=null,ee=null,te=null,ne=!1,re=!1,oe=!1,ie=null,ae=null,le=!1,ue=!1,se=null,ce=0,fe=!1,pe=!1,de=null,he=null,ge=!1,me=!1,ye=1e3,ve=0,be=1;return{computeAsyncExpiration:f,computeExpirationForFiber:p,scheduleWork:d,batchedUpdates:function(e,t){var n=ge;ge=!0;try{return e(t)}finally{(ge=n)||ue||b(1,null)}},unbatchedUpdates:function(e){if(ge&&!me){me=!0;try{return e()}finally{me=!1}}return e()},flushSync:function(e){var t=ge;ge=!0;try{e:{var n=$;$=1;try{var o=e();break e}finally{$=n}o=void 0}return o}finally{ge=t,ue&&r("187"),b(1,null)}},deferredUpdates:function(e){var t=$;$=f();try{return e()}finally{$=t}}}}function Dt(e){function t(e){return e=Te(e),null===e?null:e.stateNode}var n=e.getPublicInstance;e=Rt(e);var o=e.computeAsyncExpiration,i=e.computeExpirationForFiber,a=e.scheduleWork;return{createContainer:function(e,t){var n=new it(3,null,0);return e={current:n,containerInfo:e,pendingChildren:null,remainingExpirationTime:0,isReadyForCommit:!1,finishedWork:null,context:null,pendingContext:null,hydrate:t,nextScheduledRoot:null},n.stateNode=e},updateContainer:function(e,t,n,l){var u=t.current;if(n){n=n._reactInternalFiber;var s;e:{for(2===Ce(n)&&2===n.tag||r("170"),s=n;3!==s.tag;){if(Je(s)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break e}(s=s.return)||r("171")}s=s.stateNode.context}n=Je(n)?nt(n,s):s}else n=_n;null===t.context?t.context=n:t.pendingContext=n,t=l,t=void 0===t?null:t,l=null!=e&&null!=e.type&&null!=e.type.prototype&&!0===e.type.prototype.unstable_isAsyncReactComponent?o():i(u),bt(u,{expirationTime:l,partialState:{element:e},callback:t,isReplace:!1,isForced:!1,nextCallback:null,next:null}),a(u,l)},batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,flushSync:e.flushSync,getPublicRootInstance:function(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:t,findHostInstanceWithNoPortals:function(e){return e=_e(e),null===e?null:e.stateNode},injectIntoDevTools:function(e){var n=e.findFiberByHostInstance;return ht(kn({},e,{findHostInstanceByFiber:function(e){return t(e)},findFiberByHostInstance:function(e){return n?n(e):null}}))}}}function Lt(e){return!!$o.hasOwnProperty(e)||!Ko.hasOwnProperty(e)&&(Wo.test(e)?$o[e]=!0:(Ko[e]=!0,!1))}function Ft(e,t,n){var r=a(t);if(r&&i(t,n)){var o=r.mutationMethod;o?o(e,n):null==n||r.hasBooleanValue&&!n||r.hasNumericValue&&isNaN(n)||r.hasPositiveNumericValue&&1>n||r.hasOverloadedBooleanValue&&!1===n?jt(e,t):r.mustUseProperty?e[r.propertyName]=n:(t=r.attributeName,(o=r.attributeNamespace)?e.setAttributeNS(o,t,""+n):r.hasBooleanValue||r.hasOverloadedBooleanValue&&!0===n?e.setAttribute(t,""):e.setAttribute(t,""+n))}else Ut(e,t,i(t,n)?n:null)}function Ut(e,t,n){Lt(t)&&(null==n?e.removeAttribute(t):e.setAttribute(t,""+n))}function jt(e,t){var n=a(t);n?(t=n.mutationMethod)?t(e,void 0):n.mustUseProperty?e[n.propertyName]=!n.hasBooleanValue&&"":e.removeAttribute(n.attributeName):e.removeAttribute(t)}function Ht(e,t){var n=t.value,r=t.checked;return kn({type:void 0,step:void 0,min:void 0,max:void 0},t,{defaultChecked:void 0,defaultValue:void 0,value:null!=n?n:e._wrapperState.initialValue,checked:null!=r?r:e._wrapperState.initialChecked})}function zt(e,t){var n=t.defaultValue;e._wrapperState={initialChecked:null!=t.checked?t.checked:t.defaultChecked,initialValue:null!=t.value?t.value:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Bt(e,t){var n=t.checked;null!=n&&Ft(e,"checked",n||!1),n=t.value,null!=n?0===n&&""===e.value?e.value="0":"number"===t.type?(t=parseFloat(e.value)||0,(n!=t||n==t&&e.value!=n)&&(e.value=""+n)):e.value!==""+n&&(e.value=""+n):(null==t.value&&null!=t.defaultValue&&e.defaultValue!==""+t.defaultValue&&(e.defaultValue=""+t.defaultValue),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked))}function Vt(e,t){switch(t.type){case"submit":case"reset":break;case"color":case"date":case"datetime":case"datetime-local":case"month":case"time":case"week":e.value="",e.value=e.defaultValue;break;default:e.value=e.value}t=e.name,""!==t&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function Wt(e){var t="";return vn.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}function Kt(e,t){return e=kn({children:void 0},t),(t=Wt(t.children))&&(e.children=t),e}function $t(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function qt(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Qt(e,t){return null!=t.dangerouslySetInnerHTML&&r("91"),kn({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Gt(e,t){var n=t.value,o=n;null==n&&(n=t.defaultValue,t=t.children,null!=t&&(null!=n&&r("92"),Array.isArray(t)&&(1>=t.length||r("93"),t=t[0]),n=""+t),null==n&&(n=""),o=n),e._wrapperState={initialValue:""+o}}function Yt(e,t){var n=t.value;null!=n&&(n=""+n,n!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Xt(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}function Zt(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Jt(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Zt(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}function en(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function tn(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||Zo.hasOwnProperty(o)&&Zo[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}function nn(e,t,n){t&&(ei[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&r("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&r("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||r("61")),null!=t.style&&"object"!=typeof t.style&&r("62",n()))}function rn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function on(e,t){e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument;var n=De(e);t=Gn[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topWheel"===o?ne("wheel")?Ne("topWheel","wheel",e):ne("mousewheel")?Ne("topWheel","mousewheel",e):Ne("topWheel","DOMMouseScroll",e):"topScroll"===o?Ie("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(Ie("topFocus","focus",e),Ie("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(ne("cancel",!0)&&Ie("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(ne("close",!0)&&Ie("topClose","close",e),n.topClose=!0):Qr.hasOwnProperty(o)&&Ne(o,Qr[o],e),n[o]=!0)}}function an(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===ti&&(r=Zt(e)),r===ti?"script"===e?(e=n.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function ln(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function un(e,t,n,r){var o=rn(t,n);switch(t){case"iframe":case"object":Ne("topLoad","load",e);var i=n;break;case"video":case"audio":for(i in ri)ri.hasOwnProperty(i)&&Ne(i,ri[i],e);i=n;break;case"source":Ne("topError","error",e),i=n;break;case"img":case"image":Ne("topError","error",e),Ne("topLoad","load",e),i=n;break;case"form":Ne("topReset","reset",e),Ne("topSubmit","submit",e),i=n;break;case"details":Ne("topToggle","toggle",e),i=n;break;case"input":zt(e,n),i=Ht(e,n),Ne("topInvalid","invalid",e),on(r,"onChange");break;case"option":i=Kt(e,n);break;case"select":qt(e,n),i=kn({},n,{value:void 0}),Ne("topInvalid","invalid",e),on(r,"onChange");break;case"textarea":Gt(e,n),i=Qt(e,n),Ne("topInvalid","invalid",e),on(r,"onChange");break;default:i=n}nn(t,i,ni);var a,l=i;for(a in l)if(l.hasOwnProperty(a)){var u=l[a];"style"===a?tn(e,u,ni):"dangerouslySetInnerHTML"===a?null!=(u=u?u.__html:void 0)&&Go(e,u):"children"===a?"string"==typeof u?("textarea"!==t||""!==u)&&Xo(e,u):"number"==typeof u&&Xo(e,""+u):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(Qn.hasOwnProperty(a)?null!=u&&on(r,a):o?Ut(e,a,u):null!=u&&Ft(e,a,u))}switch(t){case"input":ie(e),Vt(e,n);break;case"textarea":ie(e),Xt(e,n);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,t=n.value,null!=t?$t(e,!!n.multiple,t,!1):null!=n.defaultValue&&$t(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=xn)}}function sn(e,t,n,r,o){var i=null;switch(t){case"input":n=Ht(e,n),r=Ht(e,r),i=[];break;case"option":n=Kt(e,n),r=Kt(e,r),i=[];break;case"select":n=kn({},n,{value:void 0}),r=kn({},r,{value:void 0}),i=[];break;case"textarea":n=Qt(e,n),r=Qt(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=xn)}nn(t,r,ni);var a,l;e=null;for(a in n)if(!r.hasOwnProperty(a)&&n.hasOwnProperty(a)&&null!=n[a])if("style"===a)for(l in t=n[a])t.hasOwnProperty(l)&&(e||(e={}),e[l]="");else"dangerouslySetInnerHTML"!==a&&"children"!==a&&"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(Qn.hasOwnProperty(a)?i||(i=[]):(i=i||[]).push(a,null));for(a in r){var u=r[a];if(t=null!=n?n[a]:void 0,r.hasOwnProperty(a)&&u!==t&&(null!=u||null!=t))if("style"===a)if(t){for(l in t)!t.hasOwnProperty(l)||u&&u.hasOwnProperty(l)||(e||(e={}),e[l]="");for(l in u)u.hasOwnProperty(l)&&t[l]!==u[l]&&(e||(e={}),e[l]=u[l])}else e||(i||(i=[]),i.push(a,e)),e=u;else"dangerouslySetInnerHTML"===a?(u=u?u.__html:void 0,t=t?t.__html:void 0,null!=u&&t!==u&&(i=i||[]).push(a,""+u)):"children"===a?t===u||"string"!=typeof u&&"number"!=typeof u||(i=i||[]).push(a,""+u):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&(Qn.hasOwnProperty(a)?(null!=u&&on(o,a),i||t===u||(i=[])):(i=i||[]).push(a,u))}return e&&(i=i||[]).push("style",e),i}function cn(e,t,n,r,o){rn(n,r),r=rn(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],l=t[i+1];"style"===a?tn(e,l,ni):"dangerouslySetInnerHTML"===a?Go(e,l):"children"===a?Xo(e,l):r?null!=l?Ut(e,a,l):e.removeAttribute(a):null!=l?Ft(e,a,l):jt(e,a)}switch(n){case"input":Bt(e,o),ae(e);break;case"textarea":Yt(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,n=o.value,null!=n?$t(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?$t(e,!!o.multiple,o.defaultValue,!0):$t(e,!!o.multiple,o.multiple?[]:"",!1))}}function fn(e,t,n,r,o){switch(t){case"iframe":case"object":Ne("topLoad","load",e);break;case"video":case"audio":for(var i in ri)ri.hasOwnProperty(i)&&Ne(i,ri[i],e);break;case"source":Ne("topError","error",e);break;case"img":case"image":Ne("topError","error",e),Ne("topLoad","load",e);break;case"form":Ne("topReset","reset",e),Ne("topSubmit","submit",e);break;case"details":Ne("topToggle","toggle",e);break;case"input":zt(e,n),Ne("topInvalid","invalid",e),on(o,"onChange");break;case"select":qt(e,n),Ne("topInvalid","invalid",e),on(o,"onChange");break;case"textarea":Gt(e,n),Ne("topInvalid","invalid",e),on(o,"onChange")}nn(t,n,ni),r=null;for(var a in n)n.hasOwnProperty(a)&&(i=n[a],"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):Qn.hasOwnProperty(a)&&null!=i&&on(o,a));switch(t){case"input":ie(e),Vt(e,n);break;case"textarea":ie(e),Xt(e,n);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=xn)}return r}function pn(e,t){return e.nodeValue!==t}function dn(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function hn(e){return!(!(e=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))}function gn(e,t,n,o,i){dn(n)||r("200");var a=n._reactRootContainer;if(a)li.updateContainer(t,a,e,i);else{if(!(o=o||hn(n)))for(a=void 0;a=n.lastChild;)n.removeChild(a);var l=li.createContainer(n,o);a=n._reactRootContainer=l,li.unbatchedUpdates(function(){li.updateContainer(t,l,e,i)})}return li.getPublicRootInstance(a)}function mn(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return dn(t)||r("200"),St(e,t,null,n)}function yn(e,t){this._reactRootContainer=li.createContainer(e,t)}/** @license React v16.1.1
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var vn=n(0),bn=n(8),kn=n(2),xn=n(1),Cn=n(9),wn=n(10),Sn=n(11),En=n(12),Tn=n(15),_n=n(3);vn||r("227");var On={children:!0,dangerouslySetInnerHTML:!0,defaultValue:!0,defaultChecked:!0,innerHTML:!0,suppressContentEditableWarning:!0,suppressHydrationWarning:!0,style:!0},Pn={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,HAS_STRING_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(e){var t=Pn,n=e.Properties||{},i=e.DOMAttributeNamespaces||{},a=e.DOMAttributeNames||{};e=e.DOMMutationMethods||{};for(var l in n){Nn.hasOwnProperty(l)&&r("48",l);var u=l.toLowerCase(),s=n[l];u={attributeName:u,attributeNamespace:null,propertyName:l,mutationMethod:null,mustUseProperty:o(s,t.MUST_USE_PROPERTY),hasBooleanValue:o(s,t.HAS_BOOLEAN_VALUE),hasNumericValue:o(s,t.HAS_NUMERIC_VALUE),hasPositiveNumericValue:o(s,t.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:o(s,t.HAS_OVERLOADED_BOOLEAN_VALUE),hasStringBooleanValue:o(s,t.HAS_STRING_BOOLEAN_VALUE)},1>=u.hasBooleanValue+u.hasNumericValue+u.hasOverloadedBooleanValue||r("50",l),a.hasOwnProperty(l)&&(u.attributeName=a[l]),i.hasOwnProperty(l)&&(u.attributeNamespace=i[l]),e.hasOwnProperty(l)&&(u.mutationMethod=e[l]),Nn[l]=u}}},Nn={},In=Pn,An=In.MUST_USE_PROPERTY,Mn=In.HAS_BOOLEAN_VALUE,Rn=In.HAS_NUMERIC_VALUE,Dn=In.HAS_POSITIVE_NUMERIC_VALUE,Ln=In.HAS_OVERLOADED_BOOLEAN_VALUE,Fn=In.HAS_STRING_BOOLEAN_VALUE,Un={Properties:{allowFullScreen:Mn,async:Mn,autoFocus:Mn,autoPlay:Mn,capture:Ln,checked:An|Mn,cols:Dn,contentEditable:Fn,controls:Mn,default:Mn,defer:Mn,disabled:Mn,download:Ln,draggable:Fn,formNoValidate:Mn,hidden:Mn,loop:Mn,multiple:An|Mn,muted:An|Mn,noValidate:Mn,open:Mn,playsInline:Mn,readOnly:Mn,required:Mn,reversed:Mn,rows:Dn,rowSpan:Rn,scoped:Mn,seamless:Mn,selected:An|Mn,size:Dn,start:Rn,span:Dn,spellCheck:Fn,style:0,tabIndex:0,itemScope:Mn,acceptCharset:0,className:0,htmlFor:0,httpEquiv:0,value:Fn},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMMutationMethods:{value:function(e,t){if(null==t)return e.removeAttribute("value");"number"!==e.type||!1===e.hasAttribute("value")?e.setAttribute("value",""+t):e.validity&&!e.validity.badInput&&e.ownerDocument.activeElement!==e&&e.setAttribute("value",""+t)}}},jn=In.HAS_STRING_BOOLEAN_VALUE,Hn={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"},zn={Properties:{autoReverse:jn,externalResourcesRequired:jn,preserveAlpha:jn},DOMAttributeNames:{autoReverse:"autoReverse",externalResourcesRequired:"externalResourcesRequired",preserveAlpha:"preserveAlpha"},DOMAttributeNamespaces:{xlinkActuate:Hn.xlink,xlinkArcrole:Hn.xlink,xlinkHref:Hn.xlink,xlinkRole:Hn.xlink,xlinkShow:Hn.xlink,xlinkTitle:Hn.xlink,xlinkType:Hn.xlink,xmlBase:Hn.xml,xmlLang:Hn.xml,xmlSpace:Hn.xml}},Bn=/[\-\:]([a-z])/g;"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space".split(" ").forEach(function(e){var t=e.replace(Bn,l);zn.Properties[t]=0,zn.DOMAttributeNames[t]=e}),In.injectDOMPropertyConfig(Un),In.injectDOMPropertyConfig(zn);var Vn={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,injection:{injectErrorUtils:function(e){"function"!=typeof e.invokeGuardedCallback&&r("197"),u=e.invokeGuardedCallback}},invokeGuardedCallback:function(e,t,n,r,o,i,a,l,s){u.apply(Vn,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,l,u){if(Vn.invokeGuardedCallback.apply(this,arguments),Vn.hasCaughtError()){var s=Vn.clearCaughtError();Vn._hasRethrowError||(Vn._hasRethrowError=!0,Vn._rethrowError=s)}},rethrowCaughtError:function(){return s.apply(Vn,arguments)},hasCaughtError:function(){return Vn._hasCaughtError},clearCaughtError:function(){if(Vn._hasCaughtError){var e=Vn._caughtError;return Vn._caughtError=null,Vn._hasCaughtError=!1,e}r("198")}},Wn=null,Kn={},$n=[],qn={},Qn={},Gn={},Yn=Object.freeze({plugins:$n,eventNameDispatchConfigs:qn,registrationNameModules:Qn,registrationNameDependencies:Gn,possibleRegistrationNames:null,injectEventPluginOrder:p,injectEventPluginsByName:d}),Xn=null,Zn=null,Jn=null,er=null,tr={injectEventPluginOrder:p,injectEventPluginsByName:d},nr=Object.freeze({injection:tr,getListener:k,extractEvents:x,enqueueEvents:C,processEventQueue:w}),rr=Math.random().toString(36).slice(2),or="__reactInternalInstance$"+rr,ir="__reactEventHandlers$"+rr,ar=Object.freeze({precacheFiberNode:function(e,t){t[or]=e},getClosestInstanceFromNode:S,getInstanceFromNode:function(e){return e=e[or],!e||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:E,getFiberCurrentPropsFromNode:T,updateFiberProps:function(e,t){e[ir]=t}}),lr=Object.freeze({accumulateTwoPhaseDispatches:R,accumulateTwoPhaseDispatchesSkipTarget:function(e){m(e,I)},accumulateEnterLeaveDispatches:D,accumulateDirectDispatches:function(e){m(e,M)}}),ur=null,sr={_root:null,_startText:null,_fallbackText:null},cr="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),fr={type:null,target:null,currentTarget:xn.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};kn(j.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=xn.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=xn.thatReturnsTrue)},persist:function(){this.isPersistent=xn.thatReturnsTrue},isPersistent:xn.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<cr.length;t++)this[cr[t]]=null}}),j.Interface=fr,j.augmentClass=function(e,t){function n(){}n.prototype=this.prototype;var r=new n;kn(r,e.prototype),e.prototype=r,e.prototype.constructor=e,e.Interface=kn({},this.Interface,t),e.augmentClass=this.augmentClass,B(e)},B(j),j.augmentClass(V,{data:null}),j.augmentClass(W,{data:null});var pr=[9,13,27,32],dr=bn.canUseDOM&&"CompositionEvent"in window,hr=null;bn.canUseDOM&&"documentMode"in document&&(hr=document.documentMode);var gr;if(gr=bn.canUseDOM&&"TextEvent"in window&&!hr){var mr=window.opera;gr=!("object"==typeof mr&&"function"==typeof mr.version&&12>=parseInt(mr.version(),10))}var yr,vr=gr,br=bn.canUseDOM&&(!dr||hr&&8<hr&&11>=hr),kr=String.fromCharCode(32),xr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},Cr=!1,wr=!1,Sr={eventTypes:xr,extractEvents:function(e,t,n,r){var o;if(dr)e:{switch(e){case"topCompositionStart":var i=xr.compositionStart;break e;case"topCompositionEnd":i=xr.compositionEnd;break e;case"topCompositionUpdate":i=xr.compositionUpdate;break e}i=void 0}else wr?K(e,n)&&(i=xr.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(i=xr.compositionStart);return i?(br&&(wr||i!==xr.compositionStart?i===xr.compositionEnd&&wr&&(o=F()):(sr._root=r,sr._startText=U(),wr=!0)),i=V.getPooled(i,t,n,r),o?i.data=o:null!==(o=$(n))&&(i.data=o),R(i),o=i):o=null,(e=vr?q(e,n):Q(e,n))?(t=W.getPooled(xr.beforeInput,t,n,r),t.data=e,R(t)):t=null,[o,t]}},Er=null,Tr=null,_r=null,Or={injectFiberControlledHostComponent:function(e){Er=e}},Pr=Object.freeze({injection:Or,enqueueStateRestore:Y,restoreStateIfNeeded:X}),Nr=!1,Ir={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};bn.canUseDOM&&(yr=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("",""));var Ar={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}},Mr=null,Rr=null,Dr=!1;bn.canUseDOM&&(Dr=ne("input")&&(!document.documentMode||9<document.documentMode));var Lr={eventTypes:Ar,_isInputEventSupported:Dr,extractEvents:function(e,t,n,r){var o=t?E(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=ce;else if(ee(o))if(Dr)a=me;else{a=he;var l=de}else!(i=o.nodeName)||"input"!==i.toLowerCase()||"checkbox"!==o.type&&"radio"!==o.type||(a=ge);if(a&&(a=a(e,t)))return le(a,n,r);l&&l(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&(e=""+o.value,o.getAttribute("value")!==e&&o.setAttribute("value",e))}};j.augmentClass(ye,{view:null,detail:null});var Fr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};ye.augmentClass(ke,{screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:be,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}});var Ur={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},jr={eventTypes:Ur,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?S(t):null):e=null,e===t)return null;var i=null==e?o:E(e);o=null==t?o:E(t);var a=ke.getPooled(Ur.mouseLeave,e,n,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,n=ke.getPooled(Ur.mouseEnter,t,n,r),n.type="mouseenter",n.target=o,n.relatedTarget=i,D(a,n,e,t),[a,n]}},Hr=vn.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,zr=[],Br=!0,Vr=void 0,Wr=Object.freeze({get _enabled(){return Br},get _handleTopLevel(){return Vr},setHandleTopLevel:function(e){Vr=e},setEnabled:Pe,isEnabled:function(){return Br},trapBubbledEvent:Ne,trapCapturedEvent:Ie,dispatchEvent:Ae}),Kr={animationend:Me("Animation","AnimationEnd"),animationiteration:Me("Animation","AnimationIteration"),animationstart:Me("Animation","AnimationStart"),transitionend:Me("Transition","TransitionEnd")},$r={},qr={};bn.canUseDOM&&(qr=document.createElement("div").style,"AnimationEvent"in window||(delete Kr.animationend.animation,delete Kr.animationiteration.animation,delete Kr.animationstart.animation),"TransitionEvent"in window||delete Kr.transitionend.transition);var Qr={topAbort:"abort",topAnimationEnd:Re("animationend")||"animationend",topAnimationIteration:Re("animationiteration")||"animationiteration",topAnimationStart:Re("animationstart")||"animationstart",topBlur:"blur",topCancel:"cancel",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoad:"load",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:Re("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},Gr={},Yr=0,Xr="_reactListenersID"+(""+Math.random()).slice(2),Zr=bn.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Jr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},eo=null,to=null,no=null,ro=!1,oo={eventTypes:Jr,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=De(i),o=Gn.onSelect;for(var a=0;a<o.length;a++){var l=o[a];if(!i.hasOwnProperty(l)||!i[l]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?E(t):window,e){case"topFocus":(ee(i)||"true"===i.contentEditable)&&(eo=i,to=t,no=null);break;case"topBlur":no=to=eo=null;break;case"topMouseDown":ro=!0;break;case"topContextMenu":case"topMouseUp":return ro=!1,je(n,r);case"topSelectionChange":if(Zr)break;case"topKeyDown":case"topKeyUp":return je(n,r)}return null}};j.augmentClass(He,{animationName:null,elapsedTime:null,pseudoElement:null}),j.augmentClass(ze,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ye.augmentClass(Be,{relatedTarget:null});var io={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},ao={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};ye.augmentClass(We,{key:function(e){if(e.key){var t=io[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?(e=Ve(e),13===e?"Enter":String.fromCharCode(e)):"keydown"===e.type||"keyup"===e.type?ao[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:be,charCode:function(e){return"keypress"===e.type?Ve(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ve(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ke.augmentClass(Ke,{dataTransfer:null}),ye.augmentClass($e,{touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:be}),j.augmentClass(qe,{propertyName:null,elapsedTime:null,pseudoElement:null}),ke.augmentClass(Qe,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null});var lo={},uo={};"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel".split(" ").forEach(function(e){var t=e[0].toUpperCase()+e.slice(1),n="on"+t;t="top"+t,n={phasedRegistrationNames:{bubbled:n,captured:n+"Capture"},dependencies:[t]},lo[e]=n,uo[t]=n});var so={eventTypes:lo,extractEvents:function(e,t,n,r){var o=uo[e];if(!o)return null;switch(e){case"topKeyPress":if(0===Ve(n))return null;case"topKeyDown":case"topKeyUp":e=We;break;case"topBlur":case"topFocus":e=Be;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=ke;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=Ke;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=$e;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=He;break;case"topTransitionEnd":e=qe;break;case"topScroll":e=ye;break;case"topWheel":e=Qe;break;case"topCopy":case"topCut":case"topPaste":e=ze;break;default:e=j}return t=e.getPooled(o,t,n,r),R(t),t}};Vr=function(e,t,n,r){e=x(e,t,n,r),C(e),w(!1)},tr.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),Xn=ar.getFiberCurrentPropsFromNode,Zn=ar.getInstanceFromNode,Jn=ar.getNodeFromInstance,tr.injectEventPluginsByName({SimpleEventPlugin:so,EnterLeaveEventPlugin:jr,ChangeEventPlugin:Lr,SelectEventPlugin:oo,BeforeInputEventPlugin:Sr});var co=[],fo=-1;new Set;var po,ho,go,mo,yo={current:_n},vo={current:!1},bo=_n,ko=null,xo=null,Co="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.portal")||60106,wo=Array.isArray,So="function"==typeof Symbol&&Symbol.iterator;"function"==typeof Symbol&&Symbol.for?(po=Symbol.for("react.element"),ho=Symbol.for("react.call"),go=Symbol.for("react.return"),mo=Symbol.for("react.fragment")):(po=60103,ho=60104,go=60105,mo=60107);var Eo=Ot(!0,!0),To=Ot(!1,!0),_o=Ot(!1,!1),Oo={},Po=Object.freeze({default:Dt}),No=Po&&Dt||Po,Io=No.default?No.default:No,Ao="object"==typeof performance&&"function"==typeof performance.now,Mo=void 0;Mo=Ao?function(){return performance.now()}:function(){return Date.now()};var Ro=void 0;if(bn.canUseDOM)if("function"!=typeof requestIdleCallback){var Do,Lo=null,Fo=!1,Uo=!1,jo=0,Ho=33,zo=33;Do=Ao?{timeRemaining:function(){return jo-performance.now()}}:{timeRemaining:function(){return jo-Date.now()}};var Bo="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){e.source===window&&e.data===Bo&&(Fo=!1,e=Lo,Lo=null,null!==e&&e(Do))},!1);var Vo=function(e){Uo=!1;var t=e-jo+zo;t<zo&&Ho<zo?(8>t&&(t=8),zo=t<Ho?Ho:t):Ho=t,jo=e+zo,Fo||(Fo=!0,window.postMessage(Bo,"*"))};Ro=function(e){return Lo=e,Uo||(Uo=!0,requestAnimationFrame(Vo)),0}}else Ro=requestIdleCallback;else Ro=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0}})}),0};var Wo=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Ko={},$o={},qo={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"},Qo=void 0,Go=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==qo.svg||"innerHTML"in e)e.innerHTML=t;else{for(Qo=Qo||document.createElement("div"),Qo.innerHTML="<svg>"+t+"</svg>",t=Qo.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}),Yo=/["'&<>]/;bn.canUseDOM&&("textContent"in document.documentElement||(en=function(e,t){if(3===e.nodeType)e.nodeValue=t;else{if("boolean"==typeof t||"number"==typeof t)t=""+t;else{t=""+t;var n=Yo.exec(t);if(n){var r,o="",i=0;for(r=n.index;r<t.length;r++){switch(t.charCodeAt(r)){case 34:n="&quot;";break;case 38:n="&amp;";break;case 39:n="&#x27;";break;case 60:n="&lt;";break;case 62:n="&gt;";break;default:continue}i!==r&&(o+=t.substring(i,r)),i=r+1,o+=n}t=i!==r?o+t.substring(i,r):o}}Go(e,t)}}));var Xo=en,Zo={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Jo=["Webkit","ms","Moz","O"];Object.keys(Zo).forEach(function(e){Jo.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zo[t]=Zo[e]})});var ei=kn({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0}),ti=qo.html,ni=xn.thatReturns(""),ri={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},oi=Object.freeze({createElement:an,createTextNode:ln,setInitialProperties:un,diffProperties:sn,updateProperties:cn,diffHydratedProperties:fn,diffHydratedText:pn,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Bt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var o=n[t];if(o!==e&&o.form===e.form){var i=T(o);i||r("90"),Bt(o,i)}}}break;case"textarea":Yt(e,n);break;case"select":null!=(t=n.value)&&$t(e,!!n.multiple,t,!1)}}});Or.injectFiberControlledHostComponent(oi);var ii=null,ai=null,li=Io({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Jt(null,"");break;default:t=8===t?e.parentNode:e,e=t.namespaceURI||null,t=t.tagName,e=Jt(e,t)}return e},getChildHostContext:function(e,t){return Jt(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){ii=Br;var e=wn();if(Ue(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,l=-1,u=0,s=0,c=e,f=null;t:for(;;){for(var p;c!==t||0!==r&&3!==c.nodeType||(a=i+r),c!==o||0!==n&&3!==c.nodeType||(l=i+n),3===c.nodeType&&(i+=c.nodeValue.length),null!==(p=c.firstChild);)f=c,c=p;for(;;){if(c===e)break t;if(f===t&&++u===r&&(a=i),f===o&&++s===n&&(l=i),null!==(p=c.nextSibling))break;c=f,f=c.parentNode}c=p}t=-1===a||-1===l?null:{start:a,end:l}}else t=null}t=t||{start:0,end:0}}else t=null;ai={focusedElem:e,selectionRange:t},Pe(!1)},resetAfterCommit:function(){var e=ai,t=wn(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&En(document.documentElement,n)){if(Ue(n))if(t=r.start,e=r.end,void 0===e&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[L()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=Fe(n,e);var i=Fe(n,r);if(o&&i&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(Tn(n),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}ai=null,Pe(ii),ii=null},createInstance:function(e,t,n,r,o){return e=an(e,t,n,r),e[or]=o,e[ir]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){un(e,t,n,r);e:{switch(t){case"button":case"input":case"select":case"textarea":e=!!n.autoFocus;break e}e=!1}return e},prepareUpdate:function(e,t,n,r,o){return sn(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return e=ln(e,t),e[or]=r,e},now:Mo,mutation:{commitMount:function(e){e.focus()},commitUpdate:function(e,t,n,r,o){e[ir]=o,cn(e,t,n,r,o)},resetTextContent:function(e){e.textContent=""},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,i){return e[or]=i,e[ir]=n,fn(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[or]=n,pn(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Ro,useSyncScheduling:!0});Z=li.batchedUpdates,yn.prototype.render=function(e,t){li.updateContainer(e,this._reactRootContainer,null,t)},yn.prototype.unmount=function(e){li.updateContainer(null,this._reactRootContainer,null,e)};var ui={createPortal:mn,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(t)return li.findHostInstance(t);"function"==typeof e.render?r("188"):r("213",Object.keys(e))},hydrate:function(e,t,n){return gn(null,e,t,!0,n)},render:function(e,t,n){return gn(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,o){return(null==e||void 0===e._reactInternalFiber)&&r("38"),gn(e,t,n,!1,o)},unmountComponentAtNode:function(e){return dn(e)||r("40"),!!e._reactRootContainer&&(li.unbatchedUpdates(function(){gn(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:mn,unstable_batchedUpdates:J,unstable_deferredUpdates:li.deferredUpdates,flushSync:li.flushSync,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:nr,EventPluginRegistry:Yn,EventPropagators:lr,ReactControlledComponent:Pr,ReactDOMComponentTree:ar,ReactDOMEventListener:Wr}};li.injectIntoDevTools({findFiberByHostInstance:S,bundleType:0,version:"16.1.1",rendererPackageName:"react-dom"});var si=Object.freeze({default:ui}),ci=si&&ui||si;e.exports=ci.default?ci.default:ci},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";var r=n(1),o={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!0),{remove:function(){e.removeEventListener(t,n,!0)}}):{remove:r}},registerDefault:function(){}};e.exports=o},function(e,t,n){"use strict";function r(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}e.exports=r},function(e,t,n){"use strict";function r(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!==e&&t!==t}function o(e,t){if(r(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(var a=0;a<n.length;a++)if(!i.call(t,n[a])||!r(e[n[a]],t[n[a]]))return!1;return!0}var i=Object.prototype.hasOwnProperty;e.exports=o},function(e,t,n){"use strict";function r(e,t){return!(!e||!t)&&(e===t||!o(e)&&(o(t)?r(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}var o=n(13);e.exports=r},function(e,t,n){"use strict";function r(e){return o(e)&&3==e.nodeType}var o=n(14);e.exports=r},function(e,t,n){"use strict";function r(e){var t=e?e.ownerDocument||e:document,n=t.defaultView||window;return!(!e||!("function"==typeof n.Node?e instanceof n.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}e.exports=r},function(e,t,n){"use strict";function r(e){try{e.focus()}catch(e){}}e.exports=r},function(e,t,n){"use strict";function r(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function o(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(){function e(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(0),p=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(f),d=n(4),h=n(17),g=function(e){return e&&e.__esModule?e:{default:e}}(h),m=n(5),y=function(e){function t(e){i(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.eventListeners=[],n.isScrolling=!1,n.canSelfCorrect=function(){return!(n.props.preventAutoCorrect||n.state.isAnimating||n.isScrolling||n.isInteracting())},n.shouldSelfCorrect=function(){return n.props.snapToSlide&&n.canSelfCorrect()},n.handleKeyUp=function(e,t){return function(r){var o=r.key,i=(0,m.includes)(o,e),a=(0,m.includes)(o,t);return n.setState({isAnimating:!0}),i&&n.next().catch(m.noop),a&&n.prev().catch(m.noop),!1}}(n.props.nextKeys,n.props.prevKeys),n.getPartiallyObscuredSlides=function(){var e=n.whirligig,t=[].concat(o(e.children)).findIndex(function(t,n,r){return!(0,m.isWhollyInView)(e)(t)&&(0,m.isWhollyInView)(e)(r[n+1])}),r=Math.max(t,0),i=[].concat(o(e.children)).findIndex(function(t,n,r){return!(0,m.isWhollyInView)(e)(t)&&(0,m.isWhollyInView)(e)(r[n-1])});return[r,Math.max(i,0)||e.children.length-1]},n.getNearestSlideIndex=function(){var e=n.whirligig,t=e.children,r=e.scrollLeft,i=[].slice.call(t).map(function(e){var t=e.offsetLeft;return Math.abs(t-r)});return i.indexOf(Math.min.apply(Math,o(i)))},n.setWhirligigRef=function(e){n.whirligig=e},n.state={activeIndex:e.startAt,isAnimating:!1,visibleSlides:n.props.visibleSlides||0,slideBy:n.props.slideBy||n.props.visibleSlides||0},n.next=n.next.bind(n),n.prev=n.prev.bind(n),n.slideTo=n.slideTo.bind(n),n}return l(t,e),c(t,[{key:"componentDidMount",value:function(){var e=this;this.DOMNode=(0,d.findDOMNode)(this.whirligig),this.isInteracting=(0,m.hasOngoingInteraction)(this.DOMNode),this.childCount=this.whirligig&&this.whirligig.children?this.whirligig.children.length:0;var t={left:function(){return-e.state.slideBy},right:function(){return e.state.slideBy},up:function(){return 0},down:function(){return 0}};this.eventListeners=[].concat(o(this.eventListeners),[(0,m.onScrollStart)(function(){e.isScrolling=!0}),(0,m.on)("touchstart")(function(){e.isScrolling=!0})(this.whirligig),(0,m.onScrollEnd)(function(){e.isScrolling=!1,e.canSelfCorrect()&&(e.props.snapToSlide?e.slideTo(e.getNearestSlideIndex()).catch(m.noop):e.props.afterSlide(e.getNearestSlideIndex()))},{target:this.DOMNode}),(0,m.on)("touchend")(function(){e.canSelfCorrect()&&(e.props.snapToSlide?e.slideTo(e.getNearestSlideIndex()).catch(m.noop):e.props.afterSlide(e.getNearestSlideIndex()))})(this.whirligig),(0,m.onSwipe)(function(n){!e.props.preventSwipe&&e.props.snapToSlide&&e.slideTo(e.state.activeIndex+t[n]()).catch(m.noop)})(this.whirligig)]),this.slideTo(this.props.startAt,{immediate:!0}).catch(m.noop)}},{key:"componentWillUnmount",value:function(){this.eventListeners.forEach(function(e){return"function"==typeof e&&e()})}},{key:"componentWillReceiveProps",value:function(e){var t=e.slideBy,n=e.visibleSlides;t===this.props.slideBy&&n===this.props.visibleSlides||this.setState({slideBy:t||n||1})}},{key:"componentDidUpdate",value:function(e){if(this.childCount=this.whirligig&&this.whirligig.children?this.whirligig.children.length:0,this.shouldSelfCorrect()){this.getNearestSlideIndex()!==this.state.activeIndex&&this.slideTo(this.getNearestSlideIndex()).catch(m.noop)}e.slideTo!==this.props.slideTo&&this.slideTo(this.props.slideTo).catch(m.noop)}},{key:"shouldComponentUpdate",value:function(e,t){var n=t.isAnimating,r=[].concat(o((0,m.values)(this.props)),[this.state.isAnimating]);return![].concat(o((0,m.values)(e)),[n]).every(function(e,t){return e===r[t]})}},{key:"next",value:function(){var e=this.childCount,t=this.props,n=this.state,r=n.activeIndex,o=n.slideBy,i=t.infinite,a=e-o;if(!o){var l=this.getPartiallyObscuredSlides(),u=s(l,2),c=(u[0],u[1]),f=c===e-1?0:c;return this.slideTo(i?f:c)}var p=r+o,d=Math.min(p,a),h=r===a?0:d;return this.slideTo(i?h:d)}},{key:"prev",value:function(){var e=this.childCount,t=this.state,n=this.props,r=t.activeIndex,o=t.slideBy,i=n.infinite,a=e-o;if(!o){var l=Math.max(r-1,0),u=l===r?e-1:l;return this.slideTo(i?u:l)}var s=Math.max(r-o,0),c=0===r?a:s;return this.slideTo(i?c:s)}},{key:"slideTo",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.immediate,o=void 0!==r&&r;if(0===this.childCount)return Promise.reject("No children to slide to");if(!this.whirligig)return Promise.reject("The Whirligig is not mounted");var i=this.props,a=i.afterSlide,l=i.beforeSlide,u=i.easing,s=i.animationDuration,c=i.infinite,f=i.preventScroll,p=this.whirligig,d=p.children,h=p.scrollLeft,g=(0,m.normalizeIndex)(e,this.childCount,c),y=this.state.activeIndex,v=d[g].offsetLeft-h;return y!==g&&l(e),this.setState({isAnimating:!0,activeIndex:g}),new Promise(function(e,n){if(o)return t.whirligig.scrollLeft=d[g].offsetLeft,e();var r=f?"hidden":"auto";return e((0,m.animate)(t.whirligig,{prop:"scrollLeft",delta:v,easing:u,duration:s,originalOverflowX:r}))}).then(function(){if(t.setState({isAnimating:!1}),y!==g)return a(g)}).catch(function(e){t.setState({isAnimating:!1})})}},{key:"render",value:function(){var e=this.props,t=(e.afterSlide,e.animationDuration,e.beforeSlide,e.children),n=e.className,o=(e.easing,e.infinite,e.gutter),i=(e.nextKeys,e.prevKeys,e.preventScroll),a=(e.preventAutoCorrect,e.preventSwipe,e.snapToSlide,e.onSlideClick),l=e.slideClass,s=(e.slideTo,e.slideBy,e.startAt,e.style),c=e.visibleSlides,f=r(e,["afterSlide","animationDuration","beforeSlide","children","className","easing","infinite","gutter","nextKeys","prevKeys","preventScroll","preventAutoCorrect","preventSwipe","snapToSlide","onSlideClick","slideClass","slideTo","slideBy","startAt","style","visibleSlides"]),d=i?"hidden":"auto",h={display:"flex",flexFlow:"row nowrap",justifyContent:"space-between",overflowX:d,msOverflowStyle:"-ms-autohiding-scrollbar",position:"relative",transition:"all .25s ease-in-quint",outline:"none",WebkitOverflowScrolling:"touch"};return p.createElement("div",u({className:n,style:u({},s,h),ref:this.setWhirligigRef,tabIndex:"0",onKeyUp:this.handleKeyUp},f),p.Children.map("function"==typeof t?t(this.next,this.prev):t,function(e,t){return p.createElement(g.default,{className:l,key:"slide-"+t,basis:c?"calc((100% - ("+o+" * "+(c-1)+")) / "+c+")":"auto",gutter:t>0?o:"",onClick:a},e)}))}}]),t}(p.Component);y.defaultProps={afterSlide:m.noop,animationDuration:500,beforeSlide:m.noop,gutter:"1em",nextKeys:["ArrowRight"],onSlideClick:m.noop,prevKeys:["ArrowLeft"],preventAutoCorrect:!1,preventScroll:!1,preventSwipe:!1,snapToSlide:!1,startAt:0,style:{}},t.default=y},function(e,t,n){"use strict";function r(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(0),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(i),l=function(e){var t=e.basis,n=void 0===t?"100%":t,i=e.gutter,l=void 0===i?"1em":i,u=e.className,s=void 0===u?"":u,c=e.children,f=r(e,["basis","gutter","className","children"]);return a.createElement("div",o({className:s,style:{flex:"0 0 auto",width:n,marginLeft:l}},f),c)};t.default=l},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(0),c=r(s),f=n(4),p=n(5),d=n(16),h=r(d),g=n(19),m=n(24),y=r(m),v=function(e){return(0,p.includes)(e,["checkbox","radio"])},b={number:Number,func:function(e){return Function(e)()},checkbox:Boolean,radio:Boolean},k=function(e){var t=e.type,n=e.value;return(t in b?b[t]:function(e){return e})(n)},x=function(e){function t(){var e,n,r,l;i(this,t);for(var u=arguments.length,s=Array(u),f=0;f<u;f++)s[f]=arguments[f];return n=r=a(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),r.state={afterSlide:r.props.afterSlide,animationDuration:r.props.animationDuration,beforeSlide:r.props.beforeSlide,className:r.props.className,easing:r.props.easing,infinite:r.props.infinite,gutter:r.props.gutter,onSlideClick:r.props.onSlideClick,preventScroll:r.props.preventScroll,snapToSlide:r.props.snapToSlide,slideBy:r.props.slideBy,slideClass:r.props.slideClass,slideTo:r.props.slideTo,startAt:r.props.startAt,visibleSlides:r.props.visibleSlides},r.handleAfterSlide=function(e){r.setState({currentSlide:e})},r.setRef=function(e){return function(t){r[e]=t}},r.setStateFromInput=function(e){return function(t){var n=t.target,i=n.checked,a=n.type;r.setState(o({},e,v(a)?i:k(n)))}},r.Control=function(e){var t=e.label,n=e.type,o=e.name;return c.default.createElement("label",{htmlFor:o,className:"option"},c.default.createElement("span",{className:"label"},t),c.default.createElement("input",{type:n,name:o,id:o,checked:v(n)&&r.state[o],value:v(n)?o:r.state[o],onChange:r.setStateFromInput(o)}))},l=n,a(r,l)}return l(t,e),u(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({afterSlide:e.afterSlide,animationDuration:e.animationDuration,beforeSlide:e.beforeSlide,className:e.className,easing:e.easing,infinite:e.infinite,gutter:e.gutter,onSlideClick:e.onSlideClick,preventScroll:e.preventScroll,snapToSlide:e.snapToSlide,slideBy:e.slideBy,slideClass:e.slideClass,slideTo:e.slideTo,startAt:e.startAt,visibleSlides:e.visibleSlides})}},{key:"componentDidMount",value:function(){try{var e=window.localStorage.getItem("react-whirligig");if(e){var t=JSON.parse(e);this.setState(t)}}catch(e){}}},{key:"componentDidUpdate",value:function(){window.localStorage.setItem("react-whirligig",JSON.stringify(this.state))}},{key:"render",value:function(){var e=this,t=this.props.children,n=this.state,r=n.animationDuration,o=n.beforeSlide,i=n.className,a=n.easing,l=n.infinite,u=n.gutter,s=n.onSlideClick,f=n.preventScroll,d=n.snapToSlide,g=n.slideBy,m=n.slideClass,y=n.slideTo,v=n.startAt,b=n.visibleSlides,k=function(){return e.whirligig.next().catch(p.noop)},x=function(){return e.whirligig.prev().catch(p.noop)},C=function(t){return e.handleAfterSlide(t)};return c.default.createElement("div",null,c.default.createElement("div",{className:"slider"},c.default.createElement(h.default,{afterSlide:C,animationDuration:r,beforeSlide:o,className:i,easing:a,infinite:l,gutter:u,onSlideClick:s,preventScroll:f,snapToSlide:d,ref:this.setRef("whirligig"),slideBy:g,slideClass:m,slideTo:y,startAt:v,visibleSlides:b},t),c.default.createElement("div",{className:"controls"},c.default.createElement("button",{className:"prevButton",onClick:x}),c.default.createElement("button",{className:"nextButton",onClick:k}))),c.default.createElement("div",{className:"options"},c.default.createElement("span",{className:"option currentSlide"},"Current slide is ",this.state.currentSlide),c.default.createElement(this.Control,{label:"afterSlide",type:"func",name:"afterSlide"}),c.default.createElement(this.Control,{label:"animationDuration",type:"number",name:"animationDuration"}),c.default.createElement(this.Control,{label:"beforeSlide",type:"func",name:"beforeSlide"}),c.default.createElement(this.Control,{label:"className",type:"text",name:"className"}),c.default.createElement(this.Control,{label:"easing",type:"func",name:"easing"}),c.default.createElement(this.Control,{label:"infinite",type:"checkbox",name:"infinite"}),c.default.createElement(this.Control,{label:"gutter",type:"text",name:"gutter"}),c.default.createElement(this.Control,{label:"onSlideClick",type:"func",name:"onSlideClick"}),c.default.createElement(this.Control,{label:"preventScroll",type:"checkbox",name:"preventScroll"}),c.default.createElement(this.Control,{label:"snapToSlide",type:"checkbox",name:"snapToSlide"}),c.default.createElement(this.Control,{label:"slideBy",type:"number",name:"slideBy"}),c.default.createElement(this.Control,{label:"slideClass",type:"text",name:"slideClass"}),c.default.createElement(this.Control,{label:"slideTo",type:"number",name:"slideTo"}),c.default.createElement(this.Control,{label:"startAt",type:"number",name:"startAt"}),c.default.createElement(this.Control,{label:"visibleSlides",type:"number",name:"visibleSlides"})))}}]),t}(s.Component);x.propTypes={afterSlide:g.func,animationDuration:g.number,beforeSlide:g.func,children:g.array,className:g.string,easing:g.func,gutter:g.string,infinite:g.bool,onSlideClick:g.func,preventScroll:g.bool,slideBy:g.number,slideClass:g.string,slideTo:g.number,snapToSlide:g.bool,startAt:g.number,visibleSlides:g.number},x.defaultProps={afterSlide:function(e){return console.log("slid to index "+e)},animationDuration:300,beforeSlide:function(e){return console.log("about to slide to index "+e)},className:"whirligig",gutter:"1em",onSlideClick:function(){console.log("You clicked on a slide!")},easing:function(e){return e},infinite:!1,preventScroll:!1,slideClass:"slideClassName",slideBy:0,slideTo:0,snapToSlide:!1,startAt:0,visibleSlides:0};var C=[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(Array(7).fill().map(function(){return{src:"https://placebeard.it",height:300,width:300,joiner:"x"}})),[{text:c.default.createElement("h3",null,["it","need","not","only","be","beards!"].map(function(e){return c.default.createElement("span",{key:e,className:"line align-right"},e)}))},{src:"https://fillmurray.com",height:300,width:300,joiner:"/"},{text:c.default.createElement("h3",null,["it","can","be","anything","you","want!"].map(function(e){return c.default.createElement("span",{key:e,className:"line align-left"},e)}))},{text:c.default.createElement("h3",null,"Featuring:")},{text:c.default.createElement("p",null,'A native scrolling "whirligig"')},{text:c.default.createElement("p",null,"snap-to-slide option")},{text:c.default.createElement("p",null,"set the number of slide visible at a time")},{text:c.default.createElement("p",null,"start at any slide you want")},{text:c.default.createElement("p",null,"slide indecies are normalized to stay within the slide count range")}]),w=function(e){function t(){var e,n,r,o;i(this,t);for(var l=arguments.length,u=Array(l),s=0;s<l;s++)u[s]=arguments[s];return n=r=a(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),r.state={docs:""},o=n,a(r,o)}return l(t,e),u(t,[{key:"componentWillMount",value:function(){var e=this;window.fetch("https://raw.githubusercontent.com/jane/react-whirligig/master/README.md").then(function(e){return e.text()}).then(function(t){e.setState({docs:(0,y.default)(t)})}).catch(console.error)}},{key:"render",value:function(){return c.default.createElement("div",{className:"wrapper"},c.default.createElement("div",{dangerouslySetInnerHTML:{__html:this.state.docs},className:"md"}),c.default.createElement(x,null,C.map(function(e,t){var n=e.src,r=e.height,o=e.width,i=e.joiner,a=e.text;return c.default.createElement("figure",{className:"mySlide",key:n+"-"+t},c.default.createElement("figcaption",{className:"caption"},"Slide index ",t),n&&c.default.createElement("img",{alt:"Place Zombie",src:n+"/"+o+i+r+"?"+t}),a&&c.default.createElement("div",{className:"text"},a))})))}}]),t}(s.Component);(0,f.render)(c.default.createElement(w,null),document.getElementById("root"))},function(e,t,n){e.exports=n(20)()},function(e,t,n){"use strict";var r=n(21),o=n(22),i=n(23);e.exports=function(){function e(e,t,n,r,a,l){l!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";function r(e,t,n,r,i,a,l,u){if(o(t),!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,i,a,l,u],f=0;s=new Error(t.replace(/%s/g,function(){return c[f++]})),s.name="Invariant Violation"}throw s.framesToPop=1,s}}var o=function(e){};e.exports=r},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){(function(t){(function(){function t(e){this.tokens=[],this.tokens.links={},this.options=e||c.defaults,this.rules=f.normal,this.options.gfm&&(this.options.tables?this.rules=f.tables:this.rules=f.gfm)}function n(e,t){if(this.options=t||c.defaults,this.links=e,this.rules=p.normal,this.renderer=this.options.renderer||new r,this.renderer.options=this.options,!this.links)throw new Error("Tokens array requires a `links` property.");this.options.gfm?this.options.breaks?this.rules=p.breaks:this.rules=p.gfm:this.options.pedantic&&(this.rules=p.pedantic)}function r(e){this.options=e||{}}function o(e){this.tokens=[],this.token=null,this.options=e||c.defaults,this.options.renderer=this.options.renderer||new r,this.renderer=this.options.renderer,this.renderer.options=this.options}function i(e,t){return e.replace(t?/&/g:/&(?!#?\w+;)/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function a(e){return e.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/g,function(e,t){return t=t.toLowerCase(),"colon"===t?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):""})}function l(e,t){return e=e.source,t=t||"",function n(r,o){return r?(o=o.source||o,o=o.replace(/(^|[^\[])\^/g,"$1"),e=e.replace(r,o),n):new RegExp(e,t)}}function u(){}function s(e){for(var t,n,r=1;r<arguments.length;r++){t=arguments[r];for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}function c(e,n,r){if(r||"function"==typeof n){r||(r=n,n=null),n=s({},c.defaults,n||{});var a,l,u=n.highlight,f=0;try{a=t.lex(e,n)}catch(e){return r(e)}l=a.length;var p=function(e){if(e)return n.highlight=u,r(e);var t;try{t=o.parse(a,n)}catch(t){e=t}return n.highlight=u,e?r(e):r(null,t)};if(!u||u.length<3)return p();if(delete n.highlight,!l)return p();for(;f<a.length;f++)!function(e){"code"!==e.type?--l||p():u(e.text,e.lang,function(t,n){return t?p(t):null==n||n===e.text?--l||p():(e.text=n,e.escaped=!0,void(--l||p()))})}(a[f])}else try{return n&&(n=s({},c.defaults,n)),o.parse(t.lex(e,n),n)}catch(e){if(e.message+="\nPlease report this to https://github.com/chjj/marked.",(n||c.defaults).silent)return"<p>An error occured:</p><pre>"+i(e.message+"",!0)+"</pre>";throw e}}var f={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:u,hr:/^( *[-*_]){3,} *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,nptable:u,lheading:/^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,blockquote:/^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,list:/^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:/^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,table:u,paragraph:/^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,text:/^[^\n]+/};f.bullet=/(?:[*+-]|\d+\.)/,f.item=/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/,f.item=l(f.item,"gm")(/bull/g,f.bullet)(),f.list=l(f.list)(/bull/g,f.bullet)("hr","\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))")("def","\\n+(?="+f.def.source+")")(),f.blockquote=l(f.blockquote)("def",f.def)(),f._tag="(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b",f.html=l(f.html)("comment",/<!--[\s\S]*?-->/)("closed",/<(tag)[\s\S]+?<\/\1>/)("closing",/<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g,f._tag)(),f.paragraph=l(f.paragraph)("hr",f.hr)("heading",f.heading)("lheading",f.lheading)("blockquote",f.blockquote)("tag","<"+f._tag)("def",f.def)(),f.normal=s({},f),f.gfm=s({},f.normal,{fences:/^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/}),f.gfm.paragraph=l(f.paragraph)("(?!","(?!"+f.gfm.fences.source.replace("\\1","\\2")+"|"+f.list.source.replace("\\1","\\3")+"|")(),f.tables=s({},f.gfm,{nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/}),t.rules=f,t.lex=function(e,n){return new t(n).lex(e)},t.prototype.lex=function(e){return e=e.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n"),this.token(e,!0)},t.prototype.token=function(e,t,n){for(var r,o,i,a,l,u,s,c,p,e=e.replace(/^ +$/gm,"");e;)if((i=this.rules.newline.exec(e))&&(e=e.substring(i[0].length),i[0].length>1&&this.tokens.push({type:"space"})),i=this.rules.code.exec(e))e=e.substring(i[0].length),i=i[0].replace(/^ {4}/gm,""),this.tokens.push({type:"code",text:this.options.pedantic?i:i.replace(/\n+$/,"")});else if(i=this.rules.fences.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"code",lang:i[2],text:i[3]||""});else if(i=this.rules.heading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"heading",depth:i[1].length,text:i[2]});else if(t&&(i=this.rules.nptable.exec(e))){for(e=e.substring(i[0].length),u={type:"table",header:i[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:i[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:i[3].replace(/\n$/,"").split("\n")},c=0;c<u.align.length;c++)/^ *-+: *$/.test(u.align[c])?u.align[c]="right":/^ *:-+: *$/.test(u.align[c])?u.align[c]="center":/^ *:-+ *$/.test(u.align[c])?u.align[c]="left":u.align[c]=null;for(c=0;c<u.cells.length;c++)u.cells[c]=u.cells[c].split(/ *\| */);this.tokens.push(u)}else if(i=this.rules.lheading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"heading",depth:"="===i[2]?1:2,text:i[1]});else if(i=this.rules.hr.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"hr"});else if(i=this.rules.blockquote.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"blockquote_start"}),i=i[0].replace(/^ *> ?/gm,""),this.token(i,t,!0),this.tokens.push({type:"blockquote_end"});else if(i=this.rules.list.exec(e)){for(e=e.substring(i[0].length),a=i[2],this.tokens.push({type:"list_start",ordered:a.length>1}),i=i[0].match(this.rules.item),r=!1,p=i.length,c=0;c<p;c++)u=i[c],s=u.length,u=u.replace(/^ *([*+-]|\d+\.) +/,""),~u.indexOf("\n ")&&(s-=u.length,u=this.options.pedantic?u.replace(/^ {1,4}/gm,""):u.replace(new RegExp("^ {1,"+s+"}","gm"),"")),this.options.smartLists&&c!==p-1&&(l=f.bullet.exec(i[c+1])[0],a===l||a.length>1&&l.length>1||(e=i.slice(c+1).join("\n")+e,c=p-1)),o=r||/\n\n(?!\s*$)/.test(u),c!==p-1&&(r="\n"===u.charAt(u.length-1),o||(o=r)),this.tokens.push({type:o?"loose_item_start":"list_item_start"}),this.token(u,!1,n),this.tokens.push({type:"list_item_end"});this.tokens.push({type:"list_end"})}else if(i=this.rules.html.exec(e))e=e.substring(i[0].length),this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&("pre"===i[1]||"script"===i[1]||"style"===i[1]),text:i[0]});else if(!n&&t&&(i=this.rules.def.exec(e)))e=e.substring(i[0].length),this.tokens.links[i[1].toLowerCase()]={href:i[2],title:i[3]};else if(t&&(i=this.rules.table.exec(e))){for(e=e.substring(i[0].length),u={type:"table",header:i[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:i[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:i[3].replace(/(?: *\| *)?\n$/,"").split("\n")},c=0;c<u.align.length;c++)/^ *-+: *$/.test(u.align[c])?u.align[c]="right":/^ *:-+: *$/.test(u.align[c])?u.align[c]="center":/^ *:-+ *$/.test(u.align[c])?u.align[c]="left":u.align[c]=null;for(c=0;c<u.cells.length;c++)u.cells[c]=u.cells[c].replace(/^ *\| *| *\| *$/g,"").split(/ *\| */);this.tokens.push(u)}else if(t&&(i=this.rules.paragraph.exec(e)))e=e.substring(i[0].length),this.tokens.push({type:"paragraph",text:"\n"===i[1].charAt(i[1].length-1)?i[1].slice(0,-1):i[1]});else if(i=this.rules.text.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"text",text:i[0]});else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0));return this.tokens};var p={escape:/^\\([\\`*{}\[\]()#+\-.!_>])/,autolink:/^<([^ >]+(@|:\/)[^ >]+)>/,url:u,tag:/^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,link:/^!?\[(inside)\]\(href\)/,reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/,nolink:/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,strong:/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,em:/^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,code:/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,br:/^ {2,}\n(?!\s*$)/,del:u,text:/^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/};p._inside=/(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/,p._href=/\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/,p.link=l(p.link)("inside",p._inside)("href",p._href)(),p.reflink=l(p.reflink)("inside",p._inside)(),p.normal=s({},p),p.pedantic=s({},p.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/}),p.gfm=s({},p.normal,{escape:l(p.escape)("])","~|])")(),url:/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,del:/^~~(?=\S)([\s\S]*?\S)~~/,text:l(p.text)("]|","~]|")("|","|https?://|")()}),p.breaks=s({},p.gfm,{br:l(p.br)("{2,}","*")(),text:l(p.gfm.text)("{2,}","*")()}),n.rules=p,n.output=function(e,t,r){return new n(t,r).output(e)},n.prototype.output=function(e){for(var t,n,r,o,a="";e;)if(o=this.rules.escape.exec(e))e=e.substring(o[0].length),a+=o[1];else if(o=this.rules.autolink.exec(e))e=e.substring(o[0].length),"@"===o[2]?(n=":"===o[1].charAt(6)?this.mangle(o[1].substring(7)):this.mangle(o[1]),r=this.mangle("mailto:")+n):(n=i(o[1]),r=n),a+=this.renderer.link(r,null,n);else if(this.inLink||!(o=this.rules.url.exec(e))){if(o=this.rules.tag.exec(e))!this.inLink&&/^<a /i.test(o[0])?this.inLink=!0:this.inLink&&/^<\/a>/i.test(o[0])&&(this.inLink=!1),e=e.substring(o[0].length),a+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(o[0]):i(o[0]):o[0];else if(o=this.rules.link.exec(e))e=e.substring(o[0].length),this.inLink=!0,a+=this.outputLink(o,{href:o[2],title:o[3]}),this.inLink=!1;else if((o=this.rules.reflink.exec(e))||(o=this.rules.nolink.exec(e))){if(e=e.substring(o[0].length),t=(o[2]||o[1]).replace(/\s+/g," "),!(t=this.links[t.toLowerCase()])||!t.href){a+=o[0].charAt(0),e=o[0].substring(1)+e;continue}this.inLink=!0,a+=this.outputLink(o,t),this.inLink=!1}else if(o=this.rules.strong.exec(e))e=e.substring(o[0].length),a+=this.renderer.strong(this.output(o[2]||o[1]));else if(o=this.rules.em.exec(e))e=e.substring(o[0].length),a+=this.renderer.em(this.output(o[2]||o[1]));else if(o=this.rules.code.exec(e))e=e.substring(o[0].length),a+=this.renderer.codespan(i(o[2],!0));else if(o=this.rules.br.exec(e))e=e.substring(o[0].length),a+=this.renderer.br();else if(o=this.rules.del.exec(e))e=e.substring(o[0].length),a+=this.renderer.del(this.output(o[1]));else if(o=this.rules.text.exec(e))e=e.substring(o[0].length),a+=this.renderer.text(i(this.smartypants(o[0])));else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0))}else e=e.substring(o[0].length),n=i(o[1]),r=n,a+=this.renderer.link(r,null,n);return a},n.prototype.outputLink=function(e,t){var n=i(t.href),r=t.title?i(t.title):null;return"!"!==e[0].charAt(0)?this.renderer.link(n,r,this.output(e[1])):this.renderer.image(n,r,i(e[1]))},n.prototype.smartypants=function(e){return this.options.smartypants?e.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014\/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014\/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…"):e},n.prototype.mangle=function(e){if(!this.options.mangle)return e;for(var t,n="",r=e.length,o=0;o<r;o++)t=e.charCodeAt(o),Math.random()>.5&&(t="x"+t.toString(16)),n+="&#"+t+";";return n},r.prototype.code=function(e,t,n){if(this.options.highlight){var r=this.options.highlight(e,t);null!=r&&r!==e&&(n=!0,e=r)}return t?'<pre><code class="'+this.options.langPrefix+i(t,!0)+'">'+(n?e:i(e,!0))+"\n</code></pre>\n":"<pre><code>"+(n?e:i(e,!0))+"\n</code></pre>"},r.prototype.blockquote=function(e){return"<blockquote>\n"+e+"</blockquote>\n"},r.prototype.html=function(e){return e},r.prototype.heading=function(e,t,n){return"<h"+t+' id="'+this.options.headerPrefix+n.toLowerCase().replace(/[^\w]+/g,"-")+'">'+e+"</h"+t+">\n"},r.prototype.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"},r.prototype.list=function(e,t){var n=t?"ol":"ul";return"<"+n+">\n"+e+"</"+n+">\n"},r.prototype.listitem=function(e){return"<li>"+e+"</li>\n"},r.prototype.paragraph=function(e){return"<p>"+e+"</p>\n"},r.prototype.table=function(e,t){return"<table>\n<thead>\n"+e+"</thead>\n<tbody>\n"+t+"</tbody>\n</table>\n"},r.prototype.tablerow=function(e){return"<tr>\n"+e+"</tr>\n"},r.prototype.tablecell=function(e,t){var n=t.header?"th":"td";return(t.align?"<"+n+' style="text-align:'+t.align+'">':"<"+n+">")+e+"</"+n+">\n"},r.prototype.strong=function(e){return"<strong>"+e+"</strong>"},r.prototype.em=function(e){return"<em>"+e+"</em>"},r.prototype.codespan=function(e){return"<code>"+e+"</code>"},r.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"},r.prototype.del=function(e){return"<del>"+e+"</del>"},r.prototype.link=function(e,t,n){if(this.options.sanitize){try{var r=decodeURIComponent(a(e)).replace(/[^\w:]/g,"").toLowerCase()}catch(e){return""}if(0===r.indexOf("javascript:")||0===r.indexOf("vbscript:"))return""}var o='<a href="'+e+'"';return t&&(o+=' title="'+t+'"'),o+=">"+n+"</a>"},r.prototype.image=function(e,t,n){var r='<img src="'+e+'" alt="'+n+'"';return t&&(r+=' title="'+t+'"'),r+=this.options.xhtml?"/>":">"},r.prototype.text=function(e){return e},o.parse=function(e,t,n){return new o(t,n).parse(e)},o.prototype.parse=function(e){this.inline=new n(e.links,this.options,this.renderer),this.tokens=e.reverse();for(var t="";this.next();)t+=this.tok();return t},o.prototype.next=function(){return this.token=this.tokens.pop()},o.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},o.prototype.parseText=function(){for(var e=this.token.text;"text"===this.peek().type;)e+="\n"+this.next().text;return this.inline.output(e)},o.prototype.tok=function(){switch(this.token.type){case"space":return"";case"hr":return this.renderer.hr();case"heading":return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,this.token.text);case"code":return this.renderer.code(this.token.text,this.token.lang,this.token.escaped);case"table":var e,t,n,r,o="",i="";for(n="",e=0;e<this.token.header.length;e++)({header:!0,align:this.token.align[e]}),n+=this.renderer.tablecell(this.inline.output(this.token.header[e]),{header:!0,align:this.token.align[e]});for(o+=this.renderer.tablerow(n),e=0;e<this.token.cells.length;e++){for(t=this.token.cells[e],n="",r=0;r<t.length;r++)n+=this.renderer.tablecell(this.inline.output(t[r]),{header:!1,align:this.token.align[r]});i+=this.renderer.tablerow(n)}return this.renderer.table(o,i);case"blockquote_start":for(var i="";"blockquote_end"!==this.next().type;)i+=this.tok();return this.renderer.blockquote(i);case"list_start":for(var i="",a=this.token.ordered;"list_end"!==this.next().type;)i+=this.tok();return this.renderer.list(i,a);case"list_item_start":for(var i="";"list_item_end"!==this.next().type;)i+="text"===this.token.type?this.parseText():this.tok();return this.renderer.listitem(i);case"loose_item_start":for(var i="";"list_item_end"!==this.next().type;)i+=this.tok();return this.renderer.listitem(i);case"html":var l=this.token.pre||this.options.pedantic?this.token.text:this.inline.output(this.token.text);return this.renderer.html(l);case"paragraph":return this.renderer.paragraph(this.inline.output(this.token.text));case"text":return this.renderer.paragraph(this.parseText())}},u.exec=u,c.options=c.setOptions=function(e){return s(c.defaults,e),c},c.defaults={gfm:!0,tables:!0,breaks:!1,pedantic:!1,sanitize:!1,sanitizer:null,mangle:!0,smartLists:!1,silent:!1,highlight:null,langPrefix:"lang-",smartypants:!1,headerPrefix:"",renderer:new r,xhtml:!1},c.Parser=o,c.parser=o.parse,c.Renderer=r,c.Lexer=t,c.lexer=t.lex,c.InlineLexer=n,c.inlineLexer=n.output,c.parse=c,e.exports=c}).call(function(){return this||("undefined"!=typeof window?window:t)}())}).call(t,n(25))},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy9kZW1vLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCA5MmU1NDgwOGYzNTE4YTU5ODc0YyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvRXZlbnRMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jb250YWluc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzVGV4dE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZm9jdXNOb2RlLmpzIiwid2VicGFjazovLy8uL3NyYy93aGlybGlnaWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NsaWRlLmpzIiwid2VicGFjazovLy8uL2Rldi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtlZC9saWIvbWFya2VkLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwiYXJnIiwiZW1wdHlGdW5jdGlvbiIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJ0b09iamVjdCIsInZhbCIsInVuZGVmaW5lZCIsIlR5cGVFcnJvciIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImFzc2lnbiIsInRlc3QxIiwiU3RyaW5nIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwibWFwIiwiam9pbiIsInRlc3QzIiwic3BsaXQiLCJmb3JFYWNoIiwibGV0dGVyIiwia2V5cyIsImVyciIsInRhcmdldCIsInNvdXJjZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJrZXkiLCJlbXB0eU9iamVjdCIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiY29uc29sZSIsImVycm9yIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiYXJyMiIsInZhbHVlIiwid3JhcEFyb3VuZFZhbHVlIiwiaW5jbHVkZXMiLCJmaWx0ZXIiLCJpdGVtIiwibWF4IiwiaGFyZEJvdW5kZWRWYWx1ZSIsIk1hdGgiLCJtaW4iLCJlYXNlT3V0UXVpbnQiLCJub3JtYWxpemVJbmRleCIsImlkeCIsImxlbiIsInZhbHVlcyIsIm9iaiIsIm1pbk1hcCIsIl9sZW4iLCJ2YWxzIiwiX2tleSIsImFwcGx5IiwiY29uY2F0IiwibWF4TWFwIiwiX2xlbjIiLCJfa2V5MiIsIm5vb3AiLCJ0IiwicG93Iiwib24iLCJldnQiLCJvcHRzIiwiY2IiLCJlbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25XaW5kb3dTY3JvbGwiLCJ3aW5kb3ciLCJvblNjcm9sbCIsIl9yZWYiLCJfcmVmJHRhcmdldCIsImUiLCJvblNjcm9sbEVuZCIsIl9yZWYyIiwiX3JlZjIkd2FpdCIsIndhaXQiLCJfcmVmMiR0YXJnZXQiLCJ0aW1lb3V0SUQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwidHJhY2tUb3VjaGVzRm9yRWxlbWVudCIsIm9uU2Nyb2xsU3RhcnQiLCJfcmVmMyIsIl9yZWYzJHRhcmdldCIsInN0YXJ0ZWQiLCJvZmZTY3JvbGxFbmQiLCJvZmZTY3JvbGwiLCJvblN3aXBlIiwiX3JlZjQiLCJ0YXJnZXRUb3VjaGVzIiwiX3RhcmdldFRvdWNoZXMkIiwic3RhcnRYIiwicGFnZVgiLCJzdGFydFkiLCJwYWdlWSIsIm9mZlRvdWNoRW5kIiwiX3JlZjUiLCJjaGFuZ2VkVG91Y2hlcyIsIl9jaGFuZ2VkVG91Y2hlcyQiLCJlbmRYIiwiZW5kWSIsInhEaWZmIiwiYWJzWERpZmYiLCJhYnMiLCJ5RGlmZiIsImFic1lEaWZmIiwidG91Y2hJZHMiLCJfcmVmNiIsInRyYWNrT25nb2luZ01vdXNlSW50ZXJhY3Rpb24iLCJpc0ludGVyYWN0aW5nIiwiZG9jdW1lbnQiLCJib2R5IiwiZmFrZUNoaWxkIiwiaGFzT25nb2luZ0ludGVyYWN0aW9uIiwiZ2V0T25nb2luZ1RvdWNoQ291bnQiLCJnZXRPbmdvaW5nTW91c2VDbGljayIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImlzV2hvbGx5SW5WaWV3IiwicGFyZW50IiwiY2hpbGQiLCJfY2hpbGQkZ2V0Qm91bmRpbmdDbGkiLCJjTGVmdCIsImxlZnQiLCJjUmlnaHQiLCJyaWdodCIsIl9wYXJlbnQkZ2V0Qm91bmRpbmdDbCIsInBMZWZ0IiwicFJpZ2h0IiwiYW5pbWF0ZSIsIl9yZWY3IiwiX3JlZjckZGVsdGEiLCJkZWx0YSIsIl9yZWY3JGltbWVkaWF0ZSIsImltbWVkaWF0ZSIsIl9yZWY3JGR1cmF0aW9uIiwiZHVyYXRpb24iLCJfcmVmNyRlYXNpbmciLCJlYXNpbmciLCJfcmVmNyRwcm9wIiwicHJvcCIsIlByb21pc2UiLCJyZXMiLCJyZWoiLCJpbml0aWFsVmFsIiwiaGFzQmFpbGVkIiwiYmFpbCIsInBvcyIsInN0YXJ0VGltZSIsInN0ZXAiLCJ0aW1lc3RhbXAiLCJwcm9ncmVzc1RpbWUiLCJwcm9ncmVzc1JhdGlvIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicSIsImEiLCJiIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiRXJyb3IiLCJmcmFtZXNUb1BvcCIsInByb3BzIiwiY29udGV4dCIsInJlZnMiLCJ1cGRhdGVyIiwiciIsInUiLCJ2IiwieCIsIkQiLCJoIiwiayIsInJlZiIsIkEiLCJDIiwiZiIsImNoaWxkcmVuIiwiZyIsImRlZmF1bHRQcm9wcyIsIiQkdHlwZW9mIiwiQiIsInR5cGUiLCJfb3duZXIiLCJ6IiwiY3VycmVudCIsIkUiLCJlc2NhcGUiLCI9IiwiOiIsInJlcGxhY2UiLCJLIiwiSiIsInBvcCIsInJlc3VsdCIsImtleVByZWZpeCIsImZ1bmMiLCJjb3VudCIsIkwiLCJwdXNoIiwiTSIsIkciLCJIIiwiTiIsIkYiLCJuZXh0IiwiZG9uZSIsInRvU3RyaW5nIiwiTyIsIlAiLCJRIiwiSSIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJpc1JlYWN0Q29tcG9uZW50Iiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsInciLCJjb25zdHJ1Y3RvciIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwieSIsInVuc3RhYmxlX2lzQXN5bmNSZWFjdENvbXBvbmVudCIsInJlbmRlciIsIlN5bWJvbCIsIl9fc2VsZiIsIl9fc291cmNlIiwiaXRlcmF0b3IiLCJSIiwiQ2hpbGRyZW4iLCJ0b0FycmF5Iiwib25seSIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJ1bnN0YWJsZV9Bc3luY0NvbXBvbmVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiYmluZCIsImlzVmFsaWRFbGVtZW50IiwidmVyc2lvbiIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJTIiwiZnJlZXplIiwiZGVmYXVsdCIsIlQiLCJxYSIsInRhIiwibGEiLCJ1YSIsImhhc0Jvb2xlYW5WYWx1ZSIsImhhc1N0cmluZ0Jvb2xlYW5WYWx1ZSIsImhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUiLCJ0b0xvd2VyQ2FzZSIsInNsaWNlIiwic2EiLCJIYSIsInRvVXBwZXJDYXNlIiwiSWEiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfY2F1Z2h0RXJyb3IiLCJKYSIsIl9oYXNSZXRocm93RXJyb3IiLCJfcmV0aHJvd0Vycm9yIiwiTWEiLCJLYSIsIkxhIiwiaW5kZXhPZiIsIk5hIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJPYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwiUGEiLCJyZWdpc3RyYXRpb25OYW1lIiwiUWEiLCJSYSIsImRlcGVuZGVuY2llcyIsIlNhIiwiVGEiLCJZYSIsImN1cnJlbnRUYXJnZXQiLCJYYSIsImludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvciIsIlphIiwiJGEiLCJiYiIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsImRiIiwiamIiLCJzdGF0ZU5vZGUiLCJWYSIsImRpc2FibGVkIiwia2IiLCJsYiIsImFiIiwibWIiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJxYiIsInBhcmVudE5vZGUiLCJ0YWciLCJyYiIsInNiIiwicGIiLCJ1YiIsInZiIiwiZGlzcGF0Y2hDb25maWciLCJ3YiIsIl90YXJnZXRJbnN0IiwieGIiLCJ5YiIsInpiIiwiQWIiLCJCYiIsImFsdGVybmF0ZSIsIkViIiwiRGIiLCJjYW5Vc2VET00iLCJkb2N1bWVudEVsZW1lbnQiLCJGYiIsIl9mYWxsYmFja1RleHQiLCJfc3RhcnRUZXh0IiwiR2IiLCJfcm9vdCIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiUWIiLCJldmVudFBvb2wiLCJSYiIsImRlc3RydWN0b3IiLCJKYiIsImdldFBvb2xlZCIsIlNiIiwiVGIiLCJkYyIsIlViIiwia2V5Q29kZSIsImVjIiwiZGV0YWlsIiwiZGF0YSIsImdjIiwid2hpY2giLCJjYyIsImFjIiwiaGMiLCJmYyIsIlZiIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwiJGIiLCJtYyIsIldhIiwiamMiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlIiwib2MiLCJrYyIsImxjIiwicGMiLCJyYyIsInRjIiwic2MiLCJ2YyIsIm5vZGVOYW1lIiwidWMiLCJ3YyIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsIm5vZGVUeXBlIiwieWMiLCJzZXRBdHRyaWJ1dGUiLCJ4YyIsImltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsInpjIiwiQWMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJzZXQiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiX3ZhbHVlVHJhY2tlciIsIkJjIiwiQ2MiLCJjaGVja2VkIiwiRWMiLCJEYyIsImNoYW5nZSIsIkhjIiwiSWMiLCJKYyIsIlJjIiwiRmMiLCJkZXRhY2hFdmVudCIsIlNjIiwiR2MiLCJwcm9wZXJ0eU5hbWUiLCJUYyIsImF0dGFjaEV2ZW50IiwiVWMiLCJWYyIsIldjIiwiWWMiLCIkYyIsImdldE1vZGlmaWVyU3RhdGUiLCJaYyIsImFkIiwiYmQiLCJmZCIsImRpc3BsYXlOYW1lIiwiZ2QiLCJlZmZlY3RUYWciLCJoZCIsIl9yZWFjdEludGVybmFsRmliZXIiLCJpZCIsImpkIiwic2libGluZyIsImtkIiwibGQiLCJuZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwib2QiLCJ0b3BMZXZlbFR5cGUiLCJxZCIsInBkIiwiVSIsImNhIiwibGlzdGVuIiwicmQiLCJzZCIsImNhcHR1cmUiLCJtZCIsInVkIiwieWQiLCJ3ZCIsInZkIiwieGQiLCJEZCIsIkNkIiwiQmQiLCJBZCIsIkVkIiwiZmlyc3RDaGlsZCIsIkZkIiwidGV4dENvbnRlbnQiLCJub2RlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJHZCIsImNvbnRlbnRFZGl0YWJsZSIsIk5kIiwiTWQiLCJKZCIsImRhIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsImVuZCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIkxkIiwiZWEiLCJJZCIsInNlbGVjdCIsIktkIiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJjaGFyQ29kZSIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCJWIiwiZGUiLCJjZSIsIlciLCJnZSIsImhlIiwiZmUiLCJlZSIsImllIiwiY29udGV4dFR5cGVzIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiY2hpbGRDb250ZXh0VHlwZXMiLCJqZSIsIlgiLCJrZSIsImN1cnNvciIsImxlIiwiZ2V0Q2hpbGRDb250ZXh0IiwibWUiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIm5lIiwiWSIsImluZGV4IiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsInBlbmRpbmdQcm9wcyIsImludGVybmFsQ29udGV4dFRhZyIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJleHBpcmF0aW9uVGltZSIsIm9lIiwicGUiLCJxZSIsInJlIiwic2UiLCJoYW5kbGVyIiwidGUiLCJ1ZSIsInBlbmRpbmdDaGlsZHJlbiIsInhlIiwieWUiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsInZlIiwib25Db21taXRGaWJlclJvb3QiLCJ3ZSIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiemUiLCJBZSIsIkJlIiwiYmFzZVN0YXRlIiwiZmlyc3QiLCJsYXN0IiwiY2FsbGJhY2tMaXN0IiwiaGFzRm9yY2VVcGRhdGUiLCJpc0luaXRpYWxpemVkIiwiQ2UiLCJEZSIsIkVlIiwicGFydGlhbFN0YXRlIiwiTGUiLCJpc1JlcGxhY2UiLCJpc0ZvcmNlZCIsImNhbGxiYWNrIiwiTWUiLCJOZSIsIm5leHRDYWxsYmFjayIsImFkb3B0Q2xhc3NJbnN0YW5jZSIsImNvbnN0cnVjdENsYXNzSW5zdGFuY2UiLCJtb3VudENsYXNzSW5zdGFuY2UiLCJzdGF0ZSIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwidXBkYXRlQ2xhc3NJbnN0YW5jZSIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJjb21wb25lbnREaWRVcGRhdGUiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiUGUiLCJPZSIsIldlIiwiUmUiLCJYZSIsIl9zdHJpbmdSZWYiLCJZZSIsIlplIiwiTWFwIiwiU2UiLCJWZSIsIlRlIiwiVWUiLCJRZSIsImNmIiwiYmYiLCIkZSIsImFmIiwiZWQiLCJwZW5kaW5nQ29udGV4dCIsInNob3VsZFNldFRleHRDb250ZW50IiwidXNlU3luY1NjaGVkdWxpbmciLCJzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlIiwicHVzaEhvc3RDb250ZXh0IiwicHVzaEhvc3RDb250YWluZXIiLCJlbnRlckh5ZHJhdGlvblN0YXRlIiwicmVzZXRIeWRyYXRpb25TdGF0ZSIsInRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlIiwiS2IiLCJiZWdpbldvcmsiLCJlbGVtZW50IiwiaHlkcmF0ZSIsImJlZ2luRmFpbGVkV29yayIsImRmIiwiY3JlYXRlSW5zdGFuY2UiLCJjcmVhdGVUZXh0SW5zdGFuY2UiLCJhcHBlbmRJbml0aWFsQ2hpbGQiLCJmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbiIsInByZXBhcmVVcGRhdGUiLCJwZXJzaXN0ZW5jZSIsImdldFJvb3RIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRleHQiLCJnZXRIb3N0Q29udGV4dCIsInBvcEhvc3RDb250YWluZXIiLCJwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UiLCJwb3BIeWRyYXRpb25TdGF0ZSIsIm11dGF0aW9uIiwiY29tcGxldGVXb3JrIiwiZWYiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImdldFB1YmxpY0luc3RhbmNlIiwiY29tbWl0TW91bnQiLCJjb21taXRVcGRhdGUiLCJyZXNldFRleHRDb250ZW50IiwiY29tbWl0VGV4dFVwZGF0ZSIsImFwcGVuZENoaWxkIiwiYXBwZW5kQ2hpbGRUb0NvbnRhaW5lciIsImluc2VydEJlZm9yZSIsImluc2VydEluQ29udGFpbmVyQmVmb3JlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVDaGlsZEZyb21Db250YWluZXIiLCJjb21taXRSZXNldFRleHRDb250ZW50IiwiY29tbWl0UGxhY2VtZW50IiwiY29tbWl0RGVsZXRpb24iLCJjb21taXRXb3JrIiwiY29tbWl0TGlmZUN5Y2xlcyIsImNvbW1pdEF0dGFjaFJlZiIsImNvbW1pdERldGFjaFJlZiIsImdmIiwiZmYiLCJnZXRDaGlsZEhvc3RDb250ZXh0IiwiZ2V0Um9vdEhvc3RDb250ZXh0IiwicmVzZXRIb3N0Q29udGFpbmVyIiwiaGYiLCJoeWRyYXRpb24iLCJjYW5IeWRyYXRlSW5zdGFuY2UiLCJjYW5IeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nIiwiZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQiLCJoeWRyYXRlSW5zdGFuY2UiLCJoeWRyYXRlVGV4dEluc3RhbmNlIiwiamYiLCJMYiIsIm1hIiwiaXNSZWFkeUZvckNvbW1pdCIsInZnIiwid2ciLCJ4ZyIsIkhlIiwiSWUiLCJMYyIsInlnIiwiTWMiLCJ6ZyIsIkFnIiwiQmciLCJjb21wb25lbnREaWRDYXRjaCIsImNvbXBvbmVudFN0YWNrIiwiYmEiLCJGYSIsImZhIiwibmEiLCJvZyIsIm5nIiwiTmMiLCJlYiIsIm1nIiwiS2MiLCJmYiIsIkZlIiwiaGFzIiwiU2V0IiwiYWRkIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb21wb25lbnROYW1lIiwiZXJyb3JCb3VuZGFyeSIsImVycm9yQm91bmRhcnlGb3VuZCIsImVycm9yQm91bmRhcnlOYW1lIiwid2lsbFJldHJ5IiwiQ2ciLCJqYSIsIkRnIiwiTWIiLCJFZyIsIm5leHRTY2hlZHVsZWRSb290IiwicmVtYWluaW5nRXhwaXJhdGlvblRpbWUiLCJvYSIsIkdhIiwia2EiLCJOYiIsImdiIiwiSmUiLCJLZSIsIkZnIiwicGEiLCJPYiIsImhiIiwiT2MiLCJQYiIsIlBjIiwiZmluaXNoZWRXb3JrIiwidGltZVJlbWFpbmluZyIsIkdnIiwiR2UiLCJub3ciLCJzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2siLCJwcmVwYXJlRm9yQ29tbWl0IiwicmVzZXRBZnRlckNvbW1pdCIsImNvbXB1dGVBc3luY0V4cGlyYXRpb24iLCJjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyIiwic2NoZWR1bGVXb3JrIiwiYmF0Y2hlZFVwZGF0ZXMiLCJ1bmJhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiZGVmZXJyZWRVcGRhdGVzIiwia2YiLCJjcmVhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXIiLCJnZXRQdWJsaWNSb290SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMiLCJpbmplY3RJbnRvRGV2VG9vbHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiRGYiLCJDZiIsIkJmIiwiQWYiLCJ0ZXN0IiwiRWYiLCJtdXRhdGlvbk1ldGhvZCIsImhhc051bWVyaWNWYWx1ZSIsImlzTmFOIiwiaGFzUG9zaXRpdmVOdW1lcmljVmFsdWUiLCJGZiIsIm11c3RVc2VQcm9wZXJ0eSIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJzZXRBdHRyaWJ1dGVOUyIsIkdmIiwicmVtb3ZlQXR0cmlidXRlIiwiSGYiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsVmFsdWUiLCJpbml0aWFsQ2hlY2tlZCIsIklmIiwiY29udHJvbGxlZCIsIkpmIiwicGFyc2VGbG9hdCIsIktmIiwiTGYiLCJhYSIsIk1mIiwiTmYiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJPZiIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJQZiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiUWYiLCJSZiIsIlNmIiwiVWYiLCJWZiIsIlpmIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiY2ciLCJzdHlsZSIsImFnIiwidHJpbSIsInNldFByb3BlcnR5IiwiZWciLCJkZyIsImZnIiwiaXMiLCJpZyIsIm93bmVyRG9jdW1lbnQiLCJ0b3BCbHVyIiwidG9wRm9jdXMiLCJ0b3BDYW5jZWwiLCJ0b3BDbG9zZSIsInpkIiwia2ciLCJnZyIsImlubmVySFRNTCIsImNyZWF0ZUVsZW1lbnROUyIsImxnIiwiY3JlYXRlVGV4dE5vZGUiLCJwZyIsImpnIiwiaGciLCJfX2h0bWwiLCJYZiIsIiRmIiwib25DbGljayIsIm9uY2xpY2siLCJxZyIsInJnIiwic2ciLCJ0ZyIsIkpnIiwiS2ciLCJoYXNBdHRyaWJ1dGUiLCJMZyIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJaIiwiTWciLCJOZyIsImhhIiwiaWEiLCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmciLCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmciLCJyYSIsIk1VU1RfVVNFX1BST1BFUlRZIiwiSEFTX0JPT0xFQU5fVkFMVUUiLCJIQVNfTlVNRVJJQ19WQUxVRSIsIkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFIiwiSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSIsIkhBU19TVFJJTkdfQk9PTEVBTl9WQUxVRSIsImluamVjdERPTVByb3BlcnR5Q29uZmlnIiwiUHJvcGVydGllcyIsIkRPTUF0dHJpYnV0ZU5hbWVzcGFjZXMiLCJET01BdHRyaWJ1dGVOYW1lcyIsIkRPTU11dGF0aW9uTWV0aG9kcyIsInZhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiYWxsb3dGdWxsU2NyZWVuIiwiYXN5bmMiLCJhdXRvRm9jdXMiLCJhdXRvUGxheSIsImNvbHMiLCJjb250cm9scyIsImRlZmVyIiwiZG93bmxvYWQiLCJkcmFnZ2FibGUiLCJmb3JtTm9WYWxpZGF0ZSIsImhpZGRlbiIsImxvb3AiLCJtdXRlZCIsIm5vVmFsaWRhdGUiLCJvcGVuIiwicGxheXNJbmxpbmUiLCJyZWFkT25seSIsInJlcXVpcmVkIiwicmV2ZXJzZWQiLCJyb3dzIiwicm93U3BhbiIsInNjb3BlZCIsInNlYW1sZXNzIiwic2l6ZSIsInNwYW4iLCJzcGVsbENoZWNrIiwidGFiSW5kZXgiLCJpdGVtU2NvcGUiLCJhY2NlcHRDaGFyc2V0IiwiY2xhc3NOYW1lIiwiaHRtbEZvciIsImh0dHBFcXVpdiIsInZhbGlkaXR5IiwiYmFkSW5wdXQiLCJhY3RpdmVFbGVtZW50IiwiQ2EiLCJ4bGluayIsInhtbCIsIkRhIiwiYXV0b1JldmVyc2UiLCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkIiwicHJlc2VydmVBbHBoYSIsInhsaW5rQWN0dWF0ZSIsInhsaW5rQXJjcm9sZSIsInhsaW5rSHJlZiIsInhsaW5rUm9sZSIsInhsaW5rU2hvdyIsInhsaW5rVGl0bGUiLCJ4bGlua1R5cGUiLCJ4bWxCYXNlIiwieG1sTGFuZyIsInhtbFNwYWNlIiwiRWEiLCJpbmplY3Rpb24iLCJpbmplY3RFcnJvclV0aWxzIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrIiwiaGFzQ2F1Z2h0RXJyb3IiLCJjbGVhckNhdWdodEVycm9yIiwiVWEiLCJwbHVnaW5zIiwiZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzIiwicmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwicG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJpYiIsIm5iIiwiZ2V0TGlzdGVuZXIiLCJlbnF1ZXVlRXZlbnRzIiwicHJvY2Vzc0V2ZW50UXVldWUiLCJvYiIsInJhbmRvbSIsInRiIiwicHJlY2FjaGVGaWJlck5vZGUiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSIsInVwZGF0ZUZpYmVyUHJvcHMiLCJDYiIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldCIsImFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzIiwiSGIiLCJJYiIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJpc1RydXN0ZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJhdWdtZW50Q2xhc3MiLCJXYiIsImRvY3VtZW50TW9kZSIsIlhiIiwiWWIiLCJvcGVyYSIsInBhcnNlSW50IiwiWmIiLCJiYyIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJpYyIsIm5jIiwiaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudCIsInFjIiwiZW5xdWV1ZVN0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJudW1iZXIiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ1cmwiLCJ3ZWVrIiwiUWMiLCJYYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJnZXRBdHRyaWJ1dGUiLCJ2aWV3IiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJjZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwiZGQiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsInRkIiwiX2VuYWJsZWQiLCJfaGFuZGxlVG9wTGV2ZWwiLCJzZXRIYW5kbGVUb3BMZXZlbCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsInRvcEFib3J0IiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BDYW5QbGF5IiwidG9wQ2FuUGxheVRocm91Z2giLCJ0b3BDaGFuZ2UiLCJ0b3BDbGljayIsInRvcENvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25TdGFydCIsInRvcENvbXBvc2l0aW9uVXBkYXRlIiwidG9wQ29udGV4dE1lbnUiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wRHVyYXRpb25DaGFuZ2UiLCJ0b3BFbXB0aWVkIiwidG9wRW5jcnlwdGVkIiwidG9wRW5kZWQiLCJ0b3BFcnJvciIsInRvcElucHV0IiwidG9wS2V5RG93biIsInRvcEtleVByZXNzIiwidG9wS2V5VXAiLCJ0b3BMb2FkZWREYXRhIiwidG9wTG9hZCIsInRvcExvYWRlZE1ldGFkYXRhIiwidG9wTG9hZFN0YXJ0IiwidG9wTW91c2VEb3duIiwidG9wTW91c2VNb3ZlIiwidG9wTW91c2VPdXQiLCJ0b3BNb3VzZU92ZXIiLCJ0b3BNb3VzZVVwIiwidG9wUGFzdGUiLCJ0b3BQYXVzZSIsInRvcFBsYXkiLCJ0b3BQbGF5aW5nIiwidG9wUHJvZ3Jlc3MiLCJ0b3BSYXRlQ2hhbmdlIiwidG9wU2Nyb2xsIiwidG9wU2Vla2VkIiwidG9wU2Vla2luZyIsInRvcFNlbGVjdGlvbkNoYW5nZSIsInRvcFN0YWxsZWQiLCJ0b3BTdXNwZW5kIiwidG9wVGV4dElucHV0IiwidG9wVGltZVVwZGF0ZSIsInRvcFRvZ2dsZSIsInRvcFRvdWNoQ2FuY2VsIiwidG9wVG91Y2hFbmQiLCJ0b3BUb3VjaE1vdmUiLCJ0b3BUb3VjaFN0YXJ0IiwidG9wVHJhbnNpdGlvbkVuZCIsInRvcFZvbHVtZUNoYW5nZSIsInRvcFdhaXRpbmciLCJ0b3BXaGVlbCIsIkhkIiwiT2QiLCJvblNlbGVjdCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJjbGlwYm9hcmREYXRhIiwiVGQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiVWQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwibG9jYXRpb24iLCJyZXBlYXQiLCJsb2NhbGUiLCJkYXRhVHJhbnNmZXIiLCJ0b3VjaGVzIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCIkZCIsImFlIiwiYmUiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwibGYiLCJtZiIsIm5mIiwib2YiLCJwZXJmb3JtYW5jZSIsInBmIiwicWYiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwieGYiLCJyZiIsInNmIiwidGYiLCJ1ZiIsInZmIiwid2YiLCJ5ZiIsInpmIiwicG9zdE1lc3NhZ2UiLCJJbmZpbml0eSIsIlRmIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsIldmIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsIllmIiwiZXhlYyIsImNoYXJDb2RlQXQiLCJzdWJzdHJpbmciLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJiZyIsImNoYXJBdCIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInVnIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJkaWZmUHJvcGVydGllcyIsInVwZGF0ZVByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkVGV4dCIsIndhcm5Gb3JVbm1hdGNoZWRUZXh0Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiSlNPTiIsInN0cmluZ2lmeSIsImZvcm0iLCJIZyIsIklnIiwidGFnTmFtZSIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZXh0ZW5kIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwiZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZSIsImRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2UiLCJ1bm1vdW50IiwiT2ciLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzIiwiRXZlbnRQbHVnaW5IdWIiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiRXZlbnRQcm9wYWdhdG9ycyIsIlJlYWN0Q29udHJvbGxlZENvbXBvbmVudCIsIlJlYWN0RE9NQ29tcG9uZW50VHJlZSIsIlJlYWN0RE9NRXZlbnRMaXN0ZW5lciIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiUGciLCJRZyIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJpc0luV29ya2VyIiwiRXZlbnRMaXN0ZW5lciIsImV2ZW50VHlwZSIsInJlbW92ZSIsInJlZ2lzdGVyRGVmYXVsdCIsImdldEFjdGl2ZUVsZW1lbnQiLCJkb2MiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJpc1RleHROb2RlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImlzTm9kZSIsIk5vZGUiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJ3cml0YWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2V4dGVuZHMiLCJfc2xpY2VkVG9BcnJheSIsInNsaWNlSXRlcmF0b3IiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJfaSIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3JlYWN0IiwiUmVhY3QiLCJuZXdPYmoiLCJfcmVhY3REb20iLCJfc2xpZGUiLCJfc2xpZGUyIiwiX3V0aWxzIiwiV2hpcmxpZ2lnIiwiX1JlYWN0JENvbXBvbmVudCIsIl90aGlzIiwiZ2V0UHJvdG90eXBlT2YiLCJldmVudExpc3RlbmVycyIsImlzU2Nyb2xsaW5nIiwiY2FuU2VsZkNvcnJlY3QiLCJwcmV2ZW50QXV0b0NvcnJlY3QiLCJpc0FuaW1hdGluZyIsInNob3VsZFNlbGZDb3JyZWN0Iiwic25hcFRvU2xpZGUiLCJoYW5kbGVLZXlVcCIsIm5leHRLZXlzIiwicHJldktleXMiLCJpc05leHQiLCJpc1ByZXYiLCJjYXRjaCIsInByZXYiLCJnZXRQYXJ0aWFsbHlPYnNjdXJlZFNsaWRlcyIsIndoaXJsaWdpZyIsImZpbmRGaXJzdE9ic2N1cmVkQ2hpbGRJbmRleCIsImZpbmRJbmRleCIsImZpcnN0T2JzY3VyZWRDaGlsZEluZGV4IiwiZmluZExhc3RPYnNjdXJlZENoaWxkSW5kZXgiLCJnZXROZWFyZXN0U2xpZGVJbmRleCIsIl90aGlzJHdoaXJsaWdpZyIsIm9mZnNldHMiLCJvZmZzZXRMZWZ0Iiwic2V0V2hpcmxpZ2lnUmVmIiwiYWN0aXZlSW5kZXgiLCJzdGFydEF0IiwidmlzaWJsZVNsaWRlcyIsInNsaWRlQnkiLCJzbGlkZVRvIiwiX3RoaXMyIiwiRE9NTm9kZSIsImNoaWxkQ291bnQiLCJ1cCIsImRvd24iLCJhZnRlclNsaWRlIiwiZGlyZWN0aW9uIiwicHJldmVudFN3aXBlIiwiZm4iLCJwcmV2UHJvcHMiLCJuZXh0UHJvcHMiLCJwcm9wVmFsdWVzIiwibmV4dFByb3BWYWx1ZXMiLCJldmVyeSIsImluZmluaXRlIiwibGFzdEluZGV4IiwiX2dldFBhcnRpYWxseU9ic2N1cmVkIiwiX2dldFBhcnRpYWxseU9ic2N1cmVkMiIsIm5leHRTbGlkZSIsIm5leHRJbmZpbnRlU2xpZGUiLCJuZXh0QWN0aXZlQ2FuZGlkYXRlIiwibmV4dEFjdGl2ZSIsIm5leHRBY3RpdmVJbmZpbml0ZSIsInByZXZTbGlkZSIsInByZXZJbmZpbnRlU2xpZGUiLCJfdGhpczMiLCJfcmVmNSRpbW1lZGlhdGUiLCJyZWplY3QiLCJfcHJvcHMiLCJiZWZvcmVTbGlkZSIsImFuaW1hdGlvbkR1cmF0aW9uIiwicHJldmVudFNjcm9sbCIsIl93aGlybGlnaWciLCJzbGlkZUluZGV4Iiwic3RhcnRpbmdJbmRleCIsIl8iLCJvcmlnaW5hbE92ZXJmbG93WCIsInRoZW4iLCJfcHJvcHMyIiwiZ3V0dGVyIiwib25TbGlkZUNsaWNrIiwic2xpZGVDbGFzcyIsInByZXZlbnRTY3JvbGxpbmciLCJzdHlsZXMiLCJkaXNwbGF5IiwiZmxleEZsb3ciLCJqdXN0aWZ5Q29udGVudCIsIm92ZXJmbG93WCIsIm1zT3ZlcmZsb3dTdHlsZSIsInBvc2l0aW9uIiwib3V0bGluZSIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwib25LZXlVcCIsImJhc2lzIiwiU2xpZGUiLCJfcmVmJGJhc2lzIiwiX3JlZiRndXR0ZXIiLCJfcmVmJGNsYXNzTmFtZSIsIndpZHRoIiwibWFyZ2luTGVmdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJfcmVhY3QyIiwiX3doaXJsaWdpZzIiLCJfcHJvcFR5cGVzIiwiX21hcmtlZCIsIl9tYXJrZWQyIiwiaXNDaGVja2FibGUiLCJjb2VyY2VUYWJsZSIsIk51bWJlciIsIkZ1bmN0aW9uIiwiY2hlY2tib3giLCJCb29sZWFuIiwicmFkaW8iLCJjb2VyY2VWYWx1ZVRvVHlwZSIsImlkZW50IiwiU2xpZGVyIiwiX0NvbXBvbmVudCIsIl90ZW1wIiwiX3JldCIsImFyZ3MiLCJoYW5kbGVBZnRlclNsaWRlIiwiY3VycmVudFNsaWRlIiwic2V0UmVmIiwic2V0U3RhdGVGcm9tSW5wdXQiLCJwcm9wTmFtZSIsImxhYmVsIiwib25DaGFuZ2UiLCJwZXJzaXN0ZWRTdGF0ZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwYXJzZSIsInNldEl0ZW0iLCJfc3RhdGUiLCJhZnRlciIsInByb3BUeXBlcyIsIm5ld0luZGV4IiwibG9nIiwic2xpZGVzIiwiZmlsbCIsInNyYyIsImhlaWdodCIsImpvaW5lciIsIkRlbW8iLCJfQ29tcG9uZW50MiIsIl90ZW1wMiIsIl9yZXQyIiwiZG9jcyIsIl90aGlzNCIsImZldGNoIiwiYWx0IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbnZhcmlhbnQiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsInNoaW0iLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJib29sIiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwidmFsaWRhdGVGb3JtYXQiLCJhcmdJbmRleCIsImdsb2JhbCIsIkxleGVyIiwidG9rZW5zIiwibGlua3MiLCJtYXJrZWQiLCJkZWZhdWx0cyIsInJ1bGVzIiwiYmxvY2siLCJub3JtYWwiLCJnZm0iLCJ0YWJsZXMiLCJJbmxpbmVMZXhlciIsImlubGluZSIsInJlbmRlcmVyIiwiUmVuZGVyZXIiLCJicmVha3MiLCJwZWRhbnRpYyIsIlBhcnNlciIsInRva2VuIiwiZW5jb2RlIiwidW5lc2NhcGUiLCJyZWdleCIsIm9wdCIsIlJlZ0V4cCIsIm1lcmdlIiwicGVuZGluZyIsImhpZ2hsaWdodCIsImxleCIsIm91dCIsImxhbmciLCJjb2RlIiwiZXNjYXBlZCIsIm1lc3NhZ2UiLCJzaWxlbnQiLCJuZXdsaW5lIiwiZmVuY2VzIiwiaGVhZGluZyIsIm5wdGFibGUiLCJsaGVhZGluZyIsImJsb2NrcXVvdGUiLCJsaXN0IiwiZGVmIiwidGFibGUiLCJwYXJhZ3JhcGgiLCJidWxsZXQiLCJfdGFnIiwiYnEiLCJsb29zZSIsImNhcCIsImJ1bGwiLCJzcGFjZSIsImRlcHRoIiwiaGVhZGVyIiwiYWxpZ24iLCJjZWxscyIsIm9yZGVyZWQiLCJtYXRjaCIsInNtYXJ0TGlzdHMiLCJzYW5pdGl6ZSIsInByZSIsInNhbml0aXplciIsImhyZWYiLCJ0aXRsZSIsImF1dG9saW5rIiwicmVmbGluayIsIm5vbGluayIsInN0cm9uZyIsImVtIiwiZGVsIiwiX2luc2lkZSIsIl9ocmVmIiwib3V0cHV0IiwibWFuZ2xlIiwiaW5MaW5rIiwib3V0cHV0TGluayIsImNvZGVzcGFuIiwic21hcnR5cGFudHMiLCJpbWFnZSIsImNoIiwibGFuZ1ByZWZpeCIsInF1b3RlIiwibGV2ZWwiLCJyYXciLCJoZWFkZXJQcmVmaXgiLCJ4aHRtbCIsImxpc3RpdGVtIiwidGFibGVyb3ciLCJjb250ZW50IiwidGFibGVjZWxsIiwiZmxhZ3MiLCJwcm90IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmV2ZXJzZSIsInRvayIsInBlZWsiLCJwYXJzZVRleHQiLCJyb3ciLCJjZWxsIiwiaiIsInNldE9wdGlvbnMiLCJwYXJzZXIiLCJsZXhlciIsImlubGluZUxleGVyIiwiZXZhbCJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsR0FDQSxnQkFBQUMsVUFBQSxnQkFBQUMsUUFDQUEsT0FBQUQsUUFBQUQsSUFDQSxrQkFBQUcsZ0JBQUFDLElBQ0FELFVBQUFILEdBQ0EsZ0JBQUFDLFNBQ0FBLFFBQUEsZUFBQUQsSUFFQUQsRUFBQSxlQUFBQyxLQUNDSyxLQUFBLFdBQ0QsTUNBZ0IsVUFBVUMsR0NOMUIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFQLE9BR0EsSUFBQUMsR0FBQU8sRUFBQUQsSUFDQUUsRUFBQUYsRUFDQUcsR0FBQSxFQUNBVixXQVVBLE9BTkFLLEdBQUFFLEdBQUFJLEtBQUFWLEVBQUFELFFBQUFDLElBQUFELFFBQUFNLEdBR0FMLEVBQUFTLEdBQUEsRUFHQVQsRUFBQUQsUUF2QkEsR0FBQVEsS0E0REEsT0FoQ0FGLEdBQUFNLEVBQUFQLEVBR0FDLEVBQUFPLEVBQUFMLEVBR0FGLEVBQUFRLEVBQUEsU0FBQWQsRUFBQWUsRUFBQUMsR0FDQVYsRUFBQVcsRUFBQWpCLEVBQUFlLElBQ0FHLE9BQUFDLGVBQUFuQixFQUFBZSxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVYsRUFBQWlCLEVBQUEsU0FBQXRCLEdBQ0EsR0FBQWUsR0FBQWYsS0FBQXVCLFdBQ0EsV0FBMkIsTUFBQXZCLEdBQUEsU0FDM0IsV0FBaUMsTUFBQUEsR0FFakMsT0FEQUssR0FBQVEsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBVixF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QVVMLEVBQVFELEcyQmhoSHhCLEdBQUE4TixFQUdBQSxHQUFBLFdBQ0EsTUFBQTFOLFFBR0EsS0FFQTBOLEtBQUFxeEMsU0FBQSxxQkFBQTJLLE1BQUEsUUFDQyxNQUFBeGlELEdBRUQsZ0JBQUFKLFVBQ0E0RyxFQUFBNUcsUUFPQWpILEVBQUFELFFBQUE4TiIsImZpbGUiOiJkZW1vLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wicmVhY3QtdHJhY2tcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wicmVhY3QtdHJhY2tcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wicmVhY3QtdHJhY2tcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wicmVhY3QtdHJhY2tcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTgpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5pZiAodHJ1ZSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG5cblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247XG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5cblxudmFyIGVtcHR5T2JqZWN0ID0ge307XG5cbmlmIChmYWxzZSkge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDtcblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChmYWxzZSkge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAodHJ1ZSkge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG5cblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG4vLyB0aGVyZSBhcmUgYSBmZXcgZml4bWVzIGluIGhlcmUuIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMzE0NlxuXG52YXIgaW5jbHVkZXMgPSBleHBvcnRzLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXModmFsLCBhcnIpIHtcbiAgcmV0dXJuIGFyci5pbmNsdWRlcyA/IGFyci5pbmNsdWRlcyh2YWwpIDogISFhcnIuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0gPT09IHZhbDtcbiAgfSkubGVuZ3RoO1xufTtcblxudmFyIHdyYXBBcm91bmRWYWx1ZSA9IGZ1bmN0aW9uIHdyYXBBcm91bmRWYWx1ZSh2YWwsIG1heCkge1xuICByZXR1cm4gKHZhbCAlIG1heCArIG1heCkgJSBtYXg7XG59O1xuXG52YXIgaGFyZEJvdW5kZWRWYWx1ZSA9IGZ1bmN0aW9uIGhhcmRCb3VuZGVkVmFsdWUodmFsLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKG1heCwgdmFsKSk7XG59O1xuXG52YXIgbm9ybWFsaXplSW5kZXggPSBleHBvcnRzLm5vcm1hbGl6ZUluZGV4ID0gZnVuY3Rpb24gbm9ybWFsaXplSW5kZXgoaWR4LCBsZW4pIHtcbiAgdmFyIHdyYXAgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICByZXR1cm4gd3JhcCA/IHdyYXBBcm91bmRWYWx1ZShpZHgsIGxlbikgOiBoYXJkQm91bmRlZFZhbHVlKGlkeCwgbGVuIC0gMSk7XG59O1xuXG52YXIgdmFsdWVzID0gZXhwb3J0cy52YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH0pO1xufTtcblxudmFyIG1pbk1hcCA9IGV4cG9ydHMubWluTWFwID0gZnVuY3Rpb24gbWluTWFwKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdmFscyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHZhbHNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiBNYXRoLm1pbi5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkodmFscykuY29uY2F0KFt2YWxdKSk7XG4gIH07XG59O1xuXG52YXIgbWF4TWFwID0gZXhwb3J0cy5tYXhNYXAgPSBmdW5jdGlvbiBtYXhNYXAoKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgdmFscyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgdmFsc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWwpIHtcbiAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KHZhbHMpLmNvbmNhdChbdmFsXSkpO1xuICB9O1xufTtcblxudmFyIG5vb3AgPSBleHBvcnRzLm5vb3AgPSBmdW5jdGlvbiBub29wKCkge1xuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxudmFyIGVhc2VPdXRRdWludCA9IGV4cG9ydHMuZWFzZU91dFF1aW50ID0gZnVuY3Rpb24gZWFzZU91dFF1aW50KHQpIHtcbiAgcmV0dXJuIDEgKyAtLXQgKiBNYXRoLnBvdyh0LCA0KTtcbn07XG5cbnZhciBvbiA9IGV4cG9ydHMub24gPSBmdW5jdGlvbiBvbihldnQpIHtcbiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGNiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbCkge1xuICAgICAgaWYgKGVsICYmIHR5cGVvZiBlbC5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZ0LCBjYiwgb3B0cyk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0LCBjYik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn07XG5cbnZhciBvbldpbmRvd1Njcm9sbCA9IGV4cG9ydHMub25XaW5kb3dTY3JvbGwgPSBmdW5jdGlvbiBvbldpbmRvd1Njcm9sbChjYikge1xuICByZXR1cm4gb24oJ3Njcm9sbCcsIHRydWUpKGNiKSh3aW5kb3cpO1xufTtcblxudmFyIG9uU2Nyb2xsID0gZXhwb3J0cy5vblNjcm9sbCA9IGZ1bmN0aW9uIG9uU2Nyb2xsKGNiKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgIF9yZWYkdGFyZ2V0ID0gX3JlZi50YXJnZXQsXG4gICAgICB0YXJnZXQgPSBfcmVmJHRhcmdldCA9PT0gdW5kZWZpbmVkID8gd2luZG93IDogX3JlZiR0YXJnZXQ7XG5cbiAgcmV0dXJuIG9uV2luZG93U2Nyb2xsKGZ1bmN0aW9uIChlKSB7XG4gICAgcmV0dXJuICh0YXJnZXQgPT09IHdpbmRvdyB8fCB0YXJnZXQgPT09IGUudGFyZ2V0KSAmJiBjYihlKTtcbiAgfSk7XG59O1xuXG52YXIgb25TY3JvbGxFbmQgPSBleHBvcnRzLm9uU2Nyb2xsRW5kID0gZnVuY3Rpb24gb25TY3JvbGxFbmQoY2IpIHtcbiAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgIF9yZWYyJHdhaXQgPSBfcmVmMi53YWl0LFxuICAgICAgd2FpdCA9IF9yZWYyJHdhaXQgPT09IHVuZGVmaW5lZCA/IDEwMCA6IF9yZWYyJHdhaXQsXG4gICAgICBfcmVmMiR0YXJnZXQgPSBfcmVmMi50YXJnZXQsXG4gICAgICB0YXJnZXQgPSBfcmVmMiR0YXJnZXQgPT09IHVuZGVmaW5lZCA/IHdpbmRvdyA6IF9yZWYyJHRhcmdldDtcblxuICByZXR1cm4gZnVuY3Rpb24gKHRpbWVvdXRJRCkge1xuICAgIHJldHVybiBvblNjcm9sbChmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dElEKTtcbiAgICAgIHRpbWVvdXRJRCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZXZ0LnRhcmdldCA9PT0gdGFyZ2V0ID8gY2IoKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0sIHdhaXQpO1xuICAgIH0pO1xuICB9KDApO1xufTtcblxudmFyIG9uU2Nyb2xsU3RhcnQgPSBleHBvcnRzLm9uU2Nyb2xsU3RhcnQgPSBmdW5jdGlvbiBvblNjcm9sbFN0YXJ0KGNiKSB7XG4gIHZhciBfcmVmMyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICBfcmVmMyR0YXJnZXQgPSBfcmVmMy50YXJnZXQsXG4gICAgICB0YXJnZXQgPSBfcmVmMyR0YXJnZXQgPT09IHVuZGVmaW5lZCA/IHdpbmRvdyA6IF9yZWYzJHRhcmdldDtcblxuICB2YXIgc3RhcnRlZCA9IGZhbHNlO1xuICB2YXIgb2ZmU2Nyb2xsRW5kID0gb25TY3JvbGxFbmQoZnVuY3Rpb24gKCkge1xuICAgIHN0YXJ0ZWQgPSBmYWxzZTtcbiAgfSwgeyB0YXJnZXQ6IHRhcmdldCB9KTtcbiAgdmFyIG9mZlNjcm9sbCA9IG9uU2Nyb2xsKGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCFzdGFydGVkKSB7XG4gICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgIGNiKGUpO1xuICAgIH1cbiAgfSwgeyB0YXJnZXQ6IHRhcmdldCB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2Ygb2ZmU2Nyb2xsID09PSAnZnVuY3Rpb24nKSBvZmZTY3JvbGwoKTtcbiAgICBpZiAodHlwZW9mIG9mZlNjcm9sbEVuZCA9PT0gJ2Z1bmN0aW9uJykgb2ZmU2Nyb2xsRW5kKCk7XG4gIH07XG59O1xuXG52YXIgb25Td2lwZSA9IGV4cG9ydHMub25Td2lwZSA9IGZ1bmN0aW9uIG9uU3dpcGUoY2IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB2YXIgb2ZmVG91Y2hTdGFydCA9IG9uKCd0b3VjaHN0YXJ0JykoZnVuY3Rpb24gKF9yZWY0KSB7XG4gICAgICB2YXIgdGFyZ2V0VG91Y2hlcyA9IF9yZWY0LnRhcmdldFRvdWNoZXM7XG4gICAgICB2YXIgX3RhcmdldFRvdWNoZXMkID0gdGFyZ2V0VG91Y2hlc1swXSxcbiAgICAgICAgICBzdGFydFggPSBfdGFyZ2V0VG91Y2hlcyQucGFnZVgsXG4gICAgICAgICAgc3RhcnRZID0gX3RhcmdldFRvdWNoZXMkLnBhZ2VZO1xuXG4gICAgICB2YXIgb2ZmVG91Y2hFbmQgPSBvbigndG91Y2hlbmQnKShmdW5jdGlvbiAoX3JlZjUpIHtcbiAgICAgICAgdmFyIGNoYW5nZWRUb3VjaGVzID0gX3JlZjUuY2hhbmdlZFRvdWNoZXM7XG4gICAgICAgIHZhciBfY2hhbmdlZFRvdWNoZXMkID0gY2hhbmdlZFRvdWNoZXNbMF0sXG4gICAgICAgICAgICBlbmRYID0gX2NoYW5nZWRUb3VjaGVzJC5wYWdlWCxcbiAgICAgICAgICAgIGVuZFkgPSBfY2hhbmdlZFRvdWNoZXMkLnBhZ2VZO1xuXG4gICAgICAgIHZhciB4RGlmZiA9IGVuZFggLSBzdGFydFg7XG4gICAgICAgIHZhciBhYnNYRGlmZiA9IE1hdGguYWJzKHhEaWZmKTtcbiAgICAgICAgdmFyIHlEaWZmID0gZW5kWSAtIHN0YXJ0WTtcbiAgICAgICAgdmFyIGFic1lEaWZmID0gTWF0aC5hYnMoeURpZmYpO1xuICAgICAgICBpZiAoTWF0aC5tYXgoYWJzWERpZmYsIGFic1lEaWZmKSA+IDIwKSB7XG4gICAgICAgICAgdmFyIGRpciA9IGFic1hEaWZmID4gYWJzWURpZmYgPyAvKiBoICoveERpZmYgPCAwID8gJ3JpZ2h0JyA6ICdsZWZ0JyA6IC8qIHYgKi95RGlmZiA8IDAgPyAnZG93bicgOiAndXAnO1xuICAgICAgICAgIGNiKGRpcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvZmZUb3VjaEVuZCA9PT0gJ2Z1bmN0aW9uJykgb2ZmVG91Y2hFbmQoKTtcbiAgICAgIH0pKHRhcmdldCk7XG4gICAgfSkodGFyZ2V0KTtcblxuICAgIHJldHVybiBvZmZUb3VjaFN0YXJ0O1xuICB9O1xufTtcblxudmFyIHRyYWNrVG91Y2hlc0ZvckVsZW1lbnQgPSBleHBvcnRzLnRyYWNrVG91Y2hlc0ZvckVsZW1lbnQgPSBmdW5jdGlvbiB0cmFja1RvdWNoZXNGb3JFbGVtZW50KGVsKSB7XG4gIHZhciB0b3VjaElkcyA9IFtdO1xuICBvbigndG91Y2hlbmQnKShmdW5jdGlvbiAoX3JlZjYpIHtcbiAgICB2YXIgdGFyZ2V0VG91Y2hlcyA9IF9yZWY2LnRhcmdldFRvdWNoZXM7XG4gICAgdG91Y2hJZHMgPSB0YXJnZXRUb3VjaGVzO1xuICB9KShlbCk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRvdWNoSWRzLmxlbmd0aDtcbiAgfTtcbn07XG5cbnZhciB0cmFja09uZ29pbmdNb3VzZUludGVyYWN0aW9uID0gZXhwb3J0cy50cmFja09uZ29pbmdNb3VzZUludGVyYWN0aW9uID0gZnVuY3Rpb24gdHJhY2tPbmdvaW5nTW91c2VJbnRlcmFjdGlvbihlbCkge1xuICB2YXIgaXNJbnRlcmFjdGluZyA9IGZhbHNlO1xuICBvbignbW91c2Vkb3duJykoZnVuY3Rpb24gKCkge1xuICAgIGlzSW50ZXJhY3RpbmcgPSB0cnVlO1xuICB9KShlbCk7XG4gIG9uKCdtb3VzZXVwJykoZnVuY3Rpb24gKCkge1xuICAgIGlzSW50ZXJhY3RpbmcgPSBmYWxzZTtcbiAgfSkoZG9jdW1lbnQuYm9keSk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlzSW50ZXJhY3Rpbmc7XG4gIH07XG59O1xuXG52YXIgaGFzT25nb2luZ0ludGVyYWN0aW9uID0gZXhwb3J0cy5oYXNPbmdvaW5nSW50ZXJhY3Rpb24gPSBmdW5jdGlvbiBoYXNPbmdvaW5nSW50ZXJhY3Rpb24oZWwpIHtcbiAgdmFyIGdldE9uZ29pbmdUb3VjaENvdW50ID0gdHJhY2tUb3VjaGVzRm9yRWxlbWVudChlbCk7XG4gIHZhciBnZXRPbmdvaW5nTW91c2VDbGljayA9IHRyYWNrT25nb2luZ01vdXNlSW50ZXJhY3Rpb24oZWwpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIWdldE9uZ29pbmdUb3VjaENvdW50KCkgfHwgZ2V0T25nb2luZ01vdXNlQ2xpY2soKTtcbiAgfTtcbn07XG5cbnZhciBmYWtlQ2hpbGQgPSB7IGdldEJvdW5kaW5nQ2xpZW50UmVjdDogZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkge1xuICAgIHJldHVybiB7fTtcbiAgfSB9O1xudmFyIGlzV2hvbGx5SW5WaWV3ID0gZXhwb3J0cy5pc1dob2xseUluVmlldyA9IGZ1bmN0aW9uIGlzV2hvbGx5SW5WaWV3KHBhcmVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjaGlsZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFrZUNoaWxkO1xuXG4gICAgdmFyIF9jaGlsZCRnZXRCb3VuZGluZ0NsaSA9IGNoaWxkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICBjTGVmdCA9IF9jaGlsZCRnZXRCb3VuZGluZ0NsaS5sZWZ0LFxuICAgICAgICBjUmlnaHQgPSBfY2hpbGQkZ2V0Qm91bmRpbmdDbGkucmlnaHQ7XG5cbiAgICB2YXIgX3BhcmVudCRnZXRCb3VuZGluZ0NsID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICBwTGVmdCA9IF9wYXJlbnQkZ2V0Qm91bmRpbmdDbC5sZWZ0LFxuICAgICAgICBwUmlnaHQgPSBfcGFyZW50JGdldEJvdW5kaW5nQ2wucmlnaHQ7XG5cbiAgICByZXR1cm4gY0xlZnQgPj0gcExlZnQgJiYgY1JpZ2h0IDw9IHBSaWdodDtcbiAgfTtcbn07XG5cbnZhciBhbmltYXRlID0gZXhwb3J0cy5hbmltYXRlID0gZnVuY3Rpb24gYW5pbWF0ZShlbCkge1xuICB2YXIgX3JlZjcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgX3JlZjckZGVsdGEgPSBfcmVmNy5kZWx0YSxcbiAgICAgIGRlbHRhID0gX3JlZjckZGVsdGEgPT09IHVuZGVmaW5lZCA/IDAgOiBfcmVmNyRkZWx0YSxcbiAgICAgIF9yZWY3JGltbWVkaWF0ZSA9IF9yZWY3LmltbWVkaWF0ZSxcbiAgICAgIGltbWVkaWF0ZSA9IF9yZWY3JGltbWVkaWF0ZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcmVmNyRpbW1lZGlhdGUsXG4gICAgICBfcmVmNyRkdXJhdGlvbiA9IF9yZWY3LmR1cmF0aW9uLFxuICAgICAgZHVyYXRpb24gPSBfcmVmNyRkdXJhdGlvbiA9PT0gdW5kZWZpbmVkID8gNTAwIDogX3JlZjckZHVyYXRpb24sXG4gICAgICBfcmVmNyRlYXNpbmcgPSBfcmVmNy5lYXNpbmcsXG4gICAgICBlYXNpbmcgPSBfcmVmNyRlYXNpbmcgPT09IHVuZGVmaW5lZCA/IGVhc2VPdXRRdWludCA6IF9yZWY3JGVhc2luZyxcbiAgICAgIF9yZWY3JHByb3AgPSBfcmVmNy5wcm9wLFxuICAgICAgcHJvcCA9IF9yZWY3JHByb3AgPT09IHVuZGVmaW5lZCA/ICdzY3JvbGxUb3AnIDogX3JlZjckcHJvcDtcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlcywgcmVqKSB7XG4gICAgaWYgKCFkZWx0YSkgcmV0dXJuIHJlcygpO1xuICAgIC8vICRGbG93Rml4TWVcbiAgICB2YXIgaW5pdGlhbFZhbCA9IGVsW3Byb3BdO1xuICAgIGlmIChpbW1lZGlhdGUpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGVsW3Byb3BdID0gaW5pdGlhbFZhbCArIGRlbHRhO1xuICAgICAgcmV0dXJuIHJlcygpO1xuICAgIH1cbiAgICB2YXIgaGFzQmFpbGVkID0gZmFsc2U7XG4gICAgdmFyIGJhaWwgPSBmdW5jdGlvbiBiYWlsKCkge1xuICAgICAgaGFzQmFpbGVkID0gdHJ1ZTtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHZhciBwb3MgPSBlbFtwcm9wXTtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBiYWlsKTtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGVsW3Byb3BdID0gcG9zO1xuICAgICAgcmV0dXJuIHJlaignQW5pbWF0aW9uIGludGVycnVwdGVkIGJ5IGludGVyYWN0aW9uJyk7XG4gICAgfTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgYmFpbCk7XG4gICAgdmFyIHN0YXJ0VGltZSA9IG51bGw7XG4gICAgdmFyIHN0ZXAgPSBmdW5jdGlvbiBzdGVwKHRpbWVzdGFtcCkge1xuICAgICAgaWYgKGhhc0JhaWxlZCkgcmV0dXJuO1xuICAgICAgaWYgKCFzdGFydFRpbWUpIHN0YXJ0VGltZSA9IHRpbWVzdGFtcDtcbiAgICAgIHZhciBwcm9ncmVzc1RpbWUgPSB0aW1lc3RhbXAgLSBzdGFydFRpbWU7XG4gICAgICB2YXIgcHJvZ3Jlc3NSYXRpbyA9IGVhc2luZyhwcm9ncmVzc1RpbWUgLyBkdXJhdGlvbik7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBlbFtwcm9wXSA9IGluaXRpYWxWYWwgKyBkZWx0YSAqIHByb2dyZXNzUmF0aW87XG4gICAgICBpZiAocHJvZ3Jlc3NUaW1lIDwgZHVyYXRpb24pIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgZWxbcHJvcF0gPSBpbml0aWFsVmFsICsgZGVsdGE7IC8vIGp1bXAgdG8gZW5kIHdoZW4gYW5pbWF0aW9uIGlzIGNvbXBsZXRlLiBuZWNlc3NhcnkgYXQgbGVhc3QgZm9yIGltbWVkaWF0ZSBzY3JvbGxcbiAgICAgICAgcmVzKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xuICB9KTtcbn07XG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMS4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG52YXIgbT1fX3dlYnBhY2tfcmVxdWlyZV9fKDIpLG49X193ZWJwYWNrX3JlcXVpcmVfXygzKSxwPV9fd2VicGFja19yZXF1aXJlX18oMSk7XG5mdW5jdGlvbiBxKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZT1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyllKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2I9RXJyb3IoZStcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2IubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIjtiLmZyYW1lc1RvUG9wPTE7dGhyb3cgYjt9XG52YXIgcj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX07ZnVuY3Rpb24gdChhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1uO3RoaXMudXBkYXRlcj1lfHxyfXQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307dC5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP3EoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTt0LnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIHUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9bjt0aGlzLnVwZGF0ZXI9ZXx8cn1mdW5jdGlvbiB2KCl7fXYucHJvdG90eXBlPXQucHJvdG90eXBlO3ZhciB3PXUucHJvdG90eXBlPW5ldyB2O3cuY29uc3RydWN0b3I9dTttKHcsdC5wcm90b3R5cGUpO3cuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7ZnVuY3Rpb24geChhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1uO3RoaXMudXBkYXRlcj1lfHxyfXZhciB5PXgucHJvdG90eXBlPW5ldyB2O3kuY29uc3RydWN0b3I9eDttKHksdC5wcm90b3R5cGUpO3kudW5zdGFibGVfaXNBc3luY1JlYWN0Q29tcG9uZW50PSEwO3kucmVuZGVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW59O1xudmFyIHo9e2N1cnJlbnQ6bnVsbH0sQT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdJiZTeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpfHw2MDEwMyxDPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBEKGEsYixlKXt2YXIgZCxjPXt9LGg9bnVsbCxrPW51bGw7aWYobnVsbCE9Yilmb3IoZCBpbiB2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaD1cIlwiK2Iua2V5KSxiKUEuY2FsbChiLGQpJiYhQy5oYXNPd25Qcm9wZXJ0eShkKSYmKGNbZF09YltkXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWMuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zm9yKHZhciBnPUFycmF5KGYpLGw9MDtsPGY7bCsrKWdbbF09YXJndW1lbnRzW2wrMl07Yy5jaGlsZHJlbj1nfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihkIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1jW2RdJiYoY1tkXT1mW2RdKTtyZXR1cm57JCR0eXBlb2Y6Qix0eXBlOmEsa2V5OmgscmVmOmsscHJvcHM6Yyxfb3duZXI6ei5jdXJyZW50fX1mdW5jdGlvbiBFKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1CfVxudmFyIEY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLEc9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdJiZTeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpfHw2MDEwMyxIPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbFtcImZvclwiXSYmU3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucG9ydGFsXCIpfHw2MDEwNjtmdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiXFx4M2RcIjpcIlxceDNkMFwiLFwiOlwiOlwiXFx4M2QyXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBJPS9cXC8rL2csSj1bXTtcbmZ1bmN0aW9uIEsoYSxiLGUsZCl7aWYoSi5sZW5ndGgpe3ZhciBjPUoucG9wKCk7Yy5yZXN1bHQ9YTtjLmtleVByZWZpeD1iO2MuZnVuYz1lO2MuY29udGV4dD1kO2MuY291bnQ9MDtyZXR1cm4gY31yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzplLGNvbnRleHQ6ZCxjb3VudDowfX1mdW5jdGlvbiBMKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+Si5sZW5ndGgmJkoucHVzaChhKX1cbmZ1bmN0aW9uIE0oYSxiLGUsZCl7dmFyIGM9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWN8fFwiYm9vbGVhblwiPT09YylhPW51bGw7aWYobnVsbD09PWF8fFwic3RyaW5nXCI9PT1jfHxcIm51bWJlclwiPT09Y3x8XCJvYmplY3RcIj09PWMmJmEuJCR0eXBlb2Y9PT1HfHxcIm9iamVjdFwiPT09YyYmYS4kJHR5cGVvZj09PUgpcmV0dXJuIGUoZCxhLFwiXCI9PT1iP1wiLlwiK04oYSwwKTpiKSwxO3ZhciBoPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2M9YVtrXTt2YXIgZj1iK04oYyxrKTtoKz1NKGMsZixlLGQpfWVsc2UgaWYoZj1GJiZhW0ZdfHxhW1wiQEBpdGVyYXRvclwiXSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaz0wOyEoYz1hLm5leHQoKSkuZG9uZTspYz1jLnZhbHVlLGY9YitOKGMsaysrKSxoKz1NKGMsZixlLGQpO2Vsc2VcIm9iamVjdFwiPT09YyYmKGU9XCJcIithLHEoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1cbmU/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZSxcIlwiKSk7cmV0dXJuIGh9ZnVuY3Rpb24gTihhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gTyhhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBQKGEsYixlKXt2YXIgZD1hLnJlc3VsdCxjPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1EoYSxkLGUscC50aGF0UmV0dXJuc0FyZ3VtZW50KTpudWxsIT1hJiYoRShhKSYmKGI9YysoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoSSxcIiRcXHgyNi9cIikrXCIvXCIpK2UsYT17JCR0eXBlb2Y6Qix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9KSxkLnB1c2goYSkpfWZ1bmN0aW9uIFEoYSxiLGUsZCxjKXt2YXIgaD1cIlwiO251bGwhPWUmJihoPShcIlwiK2UpLnJlcGxhY2UoSSxcIiRcXHgyNi9cIikrXCIvXCIpO2I9SyhiLGgsZCxjKTtudWxsPT1hfHxNKGEsXCJcIixQLGIpO0woYil9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdJiZTeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTtcbnZhciBSPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdO1EoYSxkLG51bGwsYixlKTtyZXR1cm4gZH0sZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTtiPUsobnVsbCxudWxsLGIsZSk7bnVsbD09YXx8TShhLFwiXCIsTyxiKTtMKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT8wOk0oYSxcIlwiLHAudGhhdFJldHVybnNOdWxsLG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1EoYSxiLG51bGwscC50aGF0UmV0dXJuc0FyZ3VtZW50KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtFKGEpP3ZvaWQgMDpxKFwiMTQzXCIpO3JldHVybiBhfX0sQ29tcG9uZW50OnQsUHVyZUNvbXBvbmVudDp1LHVuc3RhYmxlX0FzeW5jQ29tcG9uZW50OngsY3JlYXRlRWxlbWVudDpELGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7dmFyIGQ9bSh7fSxhLnByb3BzKSxjPWEua2V5LGg9YS5yZWYsXG5rPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixrPXouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihjPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihnIGluIGIpQS5jYWxsKGIsZykmJiFDLmhhc093blByb3BlcnR5KGcpJiYoZFtnXT12b2lkIDA9PT1iW2ddJiZ2b2lkIDAhPT1mP2ZbZ106YltnXSl9dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zyl7Zj1BcnJheShnKTtmb3IodmFyIGw9MDtsPGc7bCsrKWZbbF09YXJndW1lbnRzW2wrMl07ZC5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpCLHR5cGU6YS50eXBlLGtleTpjLHJlZjpoLHByb3BzOmQsX293bmVyOmt9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPUQuYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpFLFxudmVyc2lvbjpcIjE2LjEuMVwiLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjp6LGFzc2lnbjptfX0sUz1PYmplY3QuZnJlZXplKHtkZWZhdWx0OlJ9KSxUPVMmJlJ8fFM7bW9kdWxlLmV4cG9ydHM9VFtcImRlZmF1bHRcIl0/VFtcImRlZmF1bHRcIl06VDtcblxuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xudmFyIGFhPV9fd2VicGFja19yZXF1aXJlX18oMCksbT1fX3dlYnBhY2tfcmVxdWlyZV9fKDgpLEE9X193ZWJwYWNrX3JlcXVpcmVfXygyKSxCPV9fd2VicGFja19yZXF1aXJlX18oMSksY2E9X193ZWJwYWNrX3JlcXVpcmVfXyg5KSxkYT1fX3dlYnBhY2tfcmVxdWlyZV9fKDEwKSxlYT1fX3dlYnBhY2tfcmVxdWlyZV9fKDExKSxoYT1fX3dlYnBhY2tfcmVxdWlyZV9fKDEyKSxpYT1fX3dlYnBhY2tfcmVxdWlyZV9fKDE1KSxDPV9fd2VicGFja19yZXF1aXJlX18oMyk7XG5mdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyljKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2I9RXJyb3IoYytcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2IubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIjtiLmZyYW1lc1RvUG9wPTE7dGhyb3cgYjt9YWE/dm9pZCAwOkQoXCIyMjdcIik7XG52YXIgbGE9e2NoaWxkcmVuOiEwLGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiEwLGRlZmF1bHRWYWx1ZTohMCxkZWZhdWx0Q2hlY2tlZDohMCxpbm5lckhUTUw6ITAsc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nOiEwLHN1cHByZXNzSHlkcmF0aW9uV2FybmluZzohMCxzdHlsZTohMH07ZnVuY3Rpb24gcWEoYSxiKXtyZXR1cm4oYSZiKT09PWJ9XG52YXIgcmE9e01VU1RfVVNFX1BST1BFUlRZOjEsSEFTX0JPT0xFQU5fVkFMVUU6NCxIQVNfTlVNRVJJQ19WQUxVRTo4LEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFOjI0LEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU6MzIsSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFOjY0LGluamVjdERPTVByb3BlcnR5Q29uZmlnOmZ1bmN0aW9uKGEpe3ZhciBiPXJhLGM9YS5Qcm9wZXJ0aWVzfHx7fSxkPWEuRE9NQXR0cmlidXRlTmFtZXNwYWNlc3x8e30sZT1hLkRPTUF0dHJpYnV0ZU5hbWVzfHx7fTthPWEuRE9NTXV0YXRpb25NZXRob2RzfHx7fTtmb3IodmFyIGYgaW4gYyl7c2EuaGFzT3duUHJvcGVydHkoZik/RChcIjQ4XCIsZik6dm9pZCAwO3ZhciBnPWYudG9Mb3dlckNhc2UoKSxrPWNbZl07Zz17YXR0cmlidXRlTmFtZTpnLGF0dHJpYnV0ZU5hbWVzcGFjZTpudWxsLHByb3BlcnR5TmFtZTpmLG11dGF0aW9uTWV0aG9kOm51bGwsbXVzdFVzZVByb3BlcnR5OnFhKGssYi5NVVNUX1VTRV9QUk9QRVJUWSksXG5oYXNCb29sZWFuVmFsdWU6cWEoayxiLkhBU19CT09MRUFOX1ZBTFVFKSxoYXNOdW1lcmljVmFsdWU6cWEoayxiLkhBU19OVU1FUklDX1ZBTFVFKSxoYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZTpxYShrLGIuSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUpLGhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6cWEoayxiLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUpLGhhc1N0cmluZ0Jvb2xlYW5WYWx1ZTpxYShrLGIuSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFKX07MT49Zy5oYXNCb29sZWFuVmFsdWUrZy5oYXNOdW1lcmljVmFsdWUrZy5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlP3ZvaWQgMDpEKFwiNTBcIixmKTtlLmhhc093blByb3BlcnR5KGYpJiYoZy5hdHRyaWJ1dGVOYW1lPWVbZl0pO2QuaGFzT3duUHJvcGVydHkoZikmJihnLmF0dHJpYnV0ZU5hbWVzcGFjZT1kW2ZdKTthLmhhc093blByb3BlcnR5KGYpJiYoZy5tdXRhdGlvbk1ldGhvZD1hW2ZdKTtzYVtmXT1nfX19LHNhPXt9O1xuZnVuY3Rpb24gdGEoYSxiKXtpZihsYS5oYXNPd25Qcm9wZXJ0eShhKXx8MjxhLmxlbmd0aCYmKFwib1wiPT09YVswXXx8XCJPXCI9PT1hWzBdKSYmKFwiblwiPT09YVsxXXx8XCJOXCI9PT1hWzFdKSlyZXR1cm4hMTtpZihudWxsPT09YilyZXR1cm4hMDtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJib29sZWFuXCI6cmV0dXJuIGxhLmhhc093blByb3BlcnR5KGEpP2E9ITA6KGI9dWEoYSkpP2E9Yi5oYXNCb29sZWFuVmFsdWV8fGIuaGFzU3RyaW5nQm9vbGVhblZhbHVlfHxiLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6KGE9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSksYT1cImRhdGEtXCI9PT1hfHxcImFyaWEtXCI9PT1hKSxhO2Nhc2UgXCJ1bmRlZmluZWRcIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJvYmplY3RcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiB1YShhKXtyZXR1cm4gc2EuaGFzT3duUHJvcGVydHkoYSk/c2FbYV06bnVsbH1cbnZhciB2YT1yYSx3YT12YS5NVVNUX1VTRV9QUk9QRVJUWSxIPXZhLkhBU19CT09MRUFOX1ZBTFVFLHhhPXZhLkhBU19OVU1FUklDX1ZBTFVFLHlhPXZhLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLHphPXZhLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUsQWE9dmEuSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFLEJhPXtQcm9wZXJ0aWVzOnthbGxvd0Z1bGxTY3JlZW46SCxhc3luYzpILGF1dG9Gb2N1czpILGF1dG9QbGF5OkgsY2FwdHVyZTp6YSxjaGVja2VkOndhfEgsY29sczp5YSxjb250ZW50RWRpdGFibGU6QWEsY29udHJvbHM6SCxcImRlZmF1bHRcIjpILGRlZmVyOkgsZGlzYWJsZWQ6SCxkb3dubG9hZDp6YSxkcmFnZ2FibGU6QWEsZm9ybU5vVmFsaWRhdGU6SCxoaWRkZW46SCxsb29wOkgsbXVsdGlwbGU6d2F8SCxtdXRlZDp3YXxILG5vVmFsaWRhdGU6SCxvcGVuOkgscGxheXNJbmxpbmU6SCxyZWFkT25seTpILHJlcXVpcmVkOkgscmV2ZXJzZWQ6SCxyb3dzOnlhLHJvd1NwYW46eGEsXG5zY29wZWQ6SCxzZWFtbGVzczpILHNlbGVjdGVkOndhfEgsc2l6ZTp5YSxzdGFydDp4YSxzcGFuOnlhLHNwZWxsQ2hlY2s6QWEsc3R5bGU6MCx0YWJJbmRleDowLGl0ZW1TY29wZTpILGFjY2VwdENoYXJzZXQ6MCxjbGFzc05hbWU6MCxodG1sRm9yOjAsaHR0cEVxdWl2OjAsdmFsdWU6QWF9LERPTUF0dHJpYnV0ZU5hbWVzOnthY2NlcHRDaGFyc2V0OlwiYWNjZXB0LWNoYXJzZXRcIixjbGFzc05hbWU6XCJjbGFzc1wiLGh0bWxGb3I6XCJmb3JcIixodHRwRXF1aXY6XCJodHRwLWVxdWl2XCJ9LERPTU11dGF0aW9uTWV0aG9kczp7dmFsdWU6ZnVuY3Rpb24oYSxiKXtpZihudWxsPT1iKXJldHVybiBhLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO1wibnVtYmVyXCIhPT1hLnR5cGV8fCExPT09YS5oYXNBdHRyaWJ1dGUoXCJ2YWx1ZVwiKT9hLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitiKTphLnZhbGlkaXR5JiYhYS52YWxpZGl0eS5iYWRJbnB1dCYmYS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hJiZcbmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK2IpfX19LENhPXZhLkhBU19TVFJJTkdfQk9PTEVBTl9WQUxVRSxLPXt4bGluazpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIix4bWw6XCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIn0sRGE9e1Byb3BlcnRpZXM6e2F1dG9SZXZlcnNlOkNhLGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQ6Q2EscHJlc2VydmVBbHBoYTpDYX0sRE9NQXR0cmlidXRlTmFtZXM6e2F1dG9SZXZlcnNlOlwiYXV0b1JldmVyc2VcIixleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkOlwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLHByZXNlcnZlQWxwaGE6XCJwcmVzZXJ2ZUFscGhhXCJ9LERPTUF0dHJpYnV0ZU5hbWVzcGFjZXM6e3hsaW5rQWN0dWF0ZTpLLnhsaW5rLHhsaW5rQXJjcm9sZTpLLnhsaW5rLHhsaW5rSHJlZjpLLnhsaW5rLHhsaW5rUm9sZTpLLnhsaW5rLHhsaW5rU2hvdzpLLnhsaW5rLHhsaW5rVGl0bGU6Sy54bGluayx4bGlua1R5cGU6Sy54bGluayxcbnhtbEJhc2U6Sy54bWwseG1sTGFuZzpLLnhtbCx4bWxTcGFjZTpLLnhtbH19LEVhPS9bXFwtXFw6XShbYS16XSkvZztmdW5jdGlvbiBIYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4LWhlaWdodCB4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZSB4bWw6YmFzZSB4bWxuczp4bGluayB4bWw6bGFuZyB4bWw6c3BhY2VcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoRWEsXG5IYSk7RGEuUHJvcGVydGllc1tiXT0wO0RhLkRPTUF0dHJpYnV0ZU5hbWVzW2JdPWF9KTt2YS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhCYSk7dmEuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoRGEpO1xudmFyIE49e19jYXVnaHRFcnJvcjpudWxsLF9oYXNDYXVnaHRFcnJvcjohMSxfcmV0aHJvd0Vycm9yOm51bGwsX2hhc1JldGhyb3dFcnJvcjohMSxpbmplY3Rpb246e2luamVjdEVycm9yVXRpbHM6ZnVuY3Rpb24oYSl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGEuaW52b2tlR3VhcmRlZENhbGxiYWNrP0QoXCIxOTdcIik6dm9pZCAwO0lhPWEuaW52b2tlR3VhcmRlZENhbGxiYWNrfX0saW52b2tlR3VhcmRlZENhbGxiYWNrOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsayxoKXtJYS5hcHBseShOLGFyZ3VtZW50cyl9LGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGssaCl7Ti5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKE4uaGFzQ2F1Z2h0RXJyb3IoKSl7dmFyIHI9Ti5jbGVhckNhdWdodEVycm9yKCk7Ti5faGFzUmV0aHJvd0Vycm9yfHwoTi5faGFzUmV0aHJvd0Vycm9yPSEwLE4uX3JldGhyb3dFcnJvcj1cbnIpfX0scmV0aHJvd0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIEphLmFwcGx5KE4sYXJndW1lbnRzKX0saGFzQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gTi5faGFzQ2F1Z2h0RXJyb3J9LGNsZWFyQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtpZihOLl9oYXNDYXVnaHRFcnJvcil7dmFyIGE9Ti5fY2F1Z2h0RXJyb3I7Ti5fY2F1Z2h0RXJyb3I9bnVsbDtOLl9oYXNDYXVnaHRFcnJvcj0hMTtyZXR1cm4gYX1EKFwiMTk4XCIpfX07ZnVuY3Rpb24gSWEoYSxiLGMsZCxlLGYsZyxrLGgpe04uX2hhc0NhdWdodEVycm9yPSExO04uX2NhdWdodEVycm9yPW51bGw7dmFyIHI9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMscil9Y2F0Y2gobil7Ti5fY2F1Z2h0RXJyb3I9bixOLl9oYXNDYXVnaHRFcnJvcj0hMH19XG5mdW5jdGlvbiBKYSgpe2lmKE4uX2hhc1JldGhyb3dFcnJvcil7dmFyIGE9Ti5fcmV0aHJvd0Vycm9yO04uX3JldGhyb3dFcnJvcj1udWxsO04uX2hhc1JldGhyb3dFcnJvcj0hMTt0aHJvdyBhO319dmFyIEthPW51bGwsTGE9e307XG5mdW5jdGlvbiBNYSgpe2lmKEthKWZvcih2YXIgYSBpbiBMYSl7dmFyIGI9TGFbYV0sYz1LYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOkQoXCI5NlwiLGEpO2lmKCFOYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDpEKFwiOTdcIixhKTtOYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaz1kO09hLmhhc093blByb3BlcnR5KGspP0QoXCI5OVwiLGspOnZvaWQgMDtPYVtrXT1mO3ZhciBoPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoaCl7Zm9yKGUgaW4gaCloLmhhc093blByb3BlcnR5KGUpJiZQYShoW2VdLGcsayk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8oUGEoZi5yZWdpc3RyYXRpb25OYW1lLGcsayksZT0hMCk6ZT0hMTtlP3ZvaWQgMDpEKFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gUGEoYSxiLGMpe1FhW2FdP0QoXCIxMDBcIixhKTp2b2lkIDA7UWFbYV09YjtSYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBOYT1bXSxPYT17fSxRYT17fSxSYT17fTtmdW5jdGlvbiBTYShhKXtLYT9EKFwiMTAxXCIpOnZvaWQgMDtLYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtNYSgpfWZ1bmN0aW9uIFRhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO0xhLmhhc093blByb3BlcnR5KGMpJiZMYVtjXT09PWR8fChMYVtjXT9EKFwiMTAyXCIsYyk6dm9pZCAwLExhW2NdPWQsYj0hMCl9YiYmTWEoKX1cbnZhciBVYT1PYmplY3QuZnJlZXplKHtwbHVnaW5zOk5hLGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczpPYSxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczpRYSxyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOlJhLHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6bnVsbCxpbmplY3RFdmVudFBsdWdpbk9yZGVyOlNhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpUYX0pLFZhPW51bGwsV2E9bnVsbCxYYT1udWxsO2Z1bmN0aW9uIFlhKGEsYixjLGQpe2I9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9WGEoZCk7Ti5pbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IoYixjLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIFphKGEsYil7bnVsbD09Yj9EKFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiAkYShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgYWI9bnVsbDtcbmZ1bmN0aW9uIGJiKGEsYil7aWYoYSl7dmFyIGM9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsZD1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZSsrKVlhKGEsYixjW2VdLGRbZV0pO2Vsc2UgYyYmWWEoYSxiLGMsZCk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gY2IoYSl7cmV0dXJuIGJiKGEsITApfWZ1bmN0aW9uIGRiKGEpe3JldHVybiBiYihhLCExKX12YXIgaWI9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6U2EsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOlRhfTtcbmZ1bmN0aW9uIGpiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9VmEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/RChcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIGtiKGEsYixjLGQpe2Zvcih2YXIgZSxmPTA7ZjxOYS5sZW5ndGg7ZisrKXt2YXIgZz1OYVtmXTtnJiYoZz1nLmV4dHJhY3RFdmVudHMoYSxiLGMsZCkpJiYoZT1aYShlLGcpKX1yZXR1cm4gZX1mdW5jdGlvbiBsYihhKXthJiYoYWI9WmEoYWIsYSkpfWZ1bmN0aW9uIG1iKGEpe3ZhciBiPWFiO2FiPW51bGw7YT8kYShiLGNiKTokYShiLGRiKTthYj9EKFwiOTVcIik6dm9pZCAwO04ucmV0aHJvd0NhdWdodEVycm9yKCl9dmFyIG5iPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjppYixnZXRMaXN0ZW5lcjpqYixleHRyYWN0RXZlbnRzOmtiLGVucXVldWVFdmVudHM6bGIscHJvY2Vzc0V2ZW50UXVldWU6bWJ9KSxvYj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxPPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrb2IscGI9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitvYjtcbmZ1bmN0aW9uIHFiKGEpe2lmKGFbT10pcmV0dXJuIGFbT107Zm9yKHZhciBiPVtdOyFhW09dOylpZihiLnB1c2goYSksYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7dmFyIGM9dm9pZCAwLGQ9YVtPXTtpZig1PT09ZC50YWd8fDY9PT1kLnRhZylyZXR1cm4gZDtmb3IoO2EmJihkPWFbT10pO2E9Yi5wb3AoKSljPWQ7cmV0dXJuIGN9ZnVuY3Rpb24gcmIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO0QoXCIzM1wiKX1mdW5jdGlvbiBzYihhKXtyZXR1cm4gYVtwYl18fG51bGx9XG52YXIgdGI9T2JqZWN0LmZyZWV6ZSh7cHJlY2FjaGVGaWJlck5vZGU6ZnVuY3Rpb24oYSxiKXtiW09dPWF9LGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlOnFiLGdldEluc3RhbmNlRnJvbU5vZGU6ZnVuY3Rpb24oYSl7YT1hW09dO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9LGdldE5vZGVGcm9tSW5zdGFuY2U6cmIsZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTpzYix1cGRhdGVGaWJlclByb3BzOmZ1bmN0aW9uKGEsYil7YVtwYl09Yn19KTtmdW5jdGlvbiBRKGEpe2RvIGE9YVtcInJldHVyblwiXTt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiB1YihhLGIsYyl7Zm9yKHZhciBkPVtdO2E7KWQucHVzaChhKSxhPVEoYSk7Zm9yKGE9ZC5sZW5ndGg7MDxhLS07KWIoZFthXSxcImNhcHR1cmVkXCIsYyk7Zm9yKGE9MDthPGQubGVuZ3RoO2ErKyliKGRbYV0sXCJidWJibGVkXCIsYyl9XG5mdW5jdGlvbiB2YihhLGIsYyl7aWYoYj1qYihhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPVphKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPVphKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIHdiKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMmJnViKGEuX3RhcmdldEluc3QsdmIsYSl9ZnVuY3Rpb24geGIoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7dmFyIGI9YS5fdGFyZ2V0SW5zdDtiPWI/UShiKTpudWxsO3ViKGIsdmIsYSl9fVxuZnVuY3Rpb24geWIoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9amIoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPVphKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPVphKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiB6YihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJnliKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBBYihhKXskYShhLHdiKX1cbmZ1bmN0aW9uIEJiKGEsYixjLGQpe2lmKGMmJmQpYTp7dmFyIGU9Yztmb3IodmFyIGY9ZCxnPTAsaz1lO2s7az1RKGspKWcrKztrPTA7Zm9yKHZhciBoPWY7aDtoPVEoaCkpaysrO2Zvcig7MDxnLWs7KWU9UShlKSxnLS07Zm9yKDswPGstZzspZj1RKGYpLGstLTtmb3IoO2ctLTspe2lmKGU9PT1mfHxlPT09Zi5hbHRlcm5hdGUpYnJlYWsgYTtlPVEoZSk7Zj1RKGYpfWU9bnVsbH1lbHNlIGU9bnVsbDtmPWU7Zm9yKGU9W107YyYmYyE9PWY7KXtnPWMuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09ZilicmVhaztlLnB1c2goYyk7Yz1RKGMpfWZvcihjPVtdO2QmJmQhPT1mOyl7Zz1kLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWYpYnJlYWs7Yy5wdXNoKGQpO2Q9UShkKX1mb3IoZD0wO2Q8ZS5sZW5ndGg7ZCsrKXliKGVbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGE9Yy5sZW5ndGg7MDxhLS07KXliKGNbYV0sXCJjYXB0dXJlZFwiLGIpfVxudmFyIENiPU9iamVjdC5mcmVlemUoe2FjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6QWIsYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6ZnVuY3Rpb24oYSl7JGEoYSx4Yil9LGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczpCYixhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczpmdW5jdGlvbihhKXskYShhLHpiKX19KSxEYj1udWxsO2Z1bmN0aW9uIEViKCl7IURiJiZtLmNhblVzZURPTSYmKERiPVwidGV4dENvbnRlbnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudD9cInRleHRDb250ZW50XCI6XCJpbm5lclRleHRcIik7cmV0dXJuIERifXZhciBSPXtfcm9vdDpudWxsLF9zdGFydFRleHQ6bnVsbCxfZmFsbGJhY2tUZXh0Om51bGx9O1xuZnVuY3Rpb24gRmIoKXtpZihSLl9mYWxsYmFja1RleHQpcmV0dXJuIFIuX2ZhbGxiYWNrVGV4dDt2YXIgYSxiPVIuX3N0YXJ0VGV4dCxjPWIubGVuZ3RoLGQsZT1HYigpLGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7Ui5fZmFsbGJhY2tUZXh0PWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCk7cmV0dXJuIFIuX2ZhbGxiYWNrVGV4dH1mdW5jdGlvbiBHYigpe3JldHVyblwidmFsdWVcImluIFIuX3Jvb3Q/Ui5fcm9vdC52YWx1ZTpSLl9yb290W0ViKCldfVxudmFyIEhiPVwiZGlzcGF0Y2hDb25maWcgX3RhcmdldEluc3QgbmF0aXZlRXZlbnQgaXNEZWZhdWx0UHJldmVudGVkIGlzUHJvcGFnYXRpb25TdG9wcGVkIF9kaXNwYXRjaExpc3RlbmVycyBfZGlzcGF0Y2hJbnN0YW5jZXNcIi5zcGxpdChcIiBcIiksSWI9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OkIudGhhdFJldHVybnNOdWxsLGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5mdW5jdGlvbiBTKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9CLnRoYXRSZXR1cm5zVHJ1ZTpCLnRoYXRSZXR1cm5zRmFsc2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1CLnRoYXRSZXR1cm5zRmFsc2U7cmV0dXJuIHRoaXN9XG5BKFMucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Qi50aGF0UmV0dXJuc1RydWUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Qi50aGF0UmV0dXJuc1RydWUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9Qi50aGF0UmV0dXJuc1RydWV9LGlzUGVyc2lzdGVudDpCLnRoYXRSZXR1cm5zRmFsc2UsXG5kZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDtmb3IoYT0wO2E8SGIubGVuZ3RoO2ErKyl0aGlzW0hiW2FdXT1udWxsfX0pO1MuSW50ZXJmYWNlPUliO1MuYXVnbWVudENsYXNzPWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYygpe31jLnByb3RvdHlwZT10aGlzLnByb3RvdHlwZTt2YXIgZD1uZXcgYztBKGQsYS5wcm90b3R5cGUpO2EucHJvdG90eXBlPWQ7YS5wcm90b3R5cGUuY29uc3RydWN0b3I9YTthLkludGVyZmFjZT1BKHt9LHRoaXMuSW50ZXJmYWNlLGIpO2EuYXVnbWVudENsYXNzPXRoaXMuYXVnbWVudENsYXNzO0piKGEpfTtKYihTKTtmdW5jdGlvbiBRYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIFJiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDpEKFwiMjIzXCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBKYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1RYjthLnJlbGVhc2U9UmJ9ZnVuY3Rpb24gU2IoYSxiLGMsZCl7cmV0dXJuIFMuY2FsbCh0aGlzLGEsYixjLGQpfVMuYXVnbWVudENsYXNzKFNiLHtkYXRhOm51bGx9KTtmdW5jdGlvbiBUYihhLGIsYyxkKXtyZXR1cm4gUy5jYWxsKHRoaXMsYSxiLGMsZCl9Uy5hdWdtZW50Q2xhc3MoVGIse2RhdGE6bnVsbH0pO3ZhciBVYj1bOSwxMywyNywzMl0sVmI9bS5jYW5Vc2VET00mJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LFdiPW51bGw7bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKFdiPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIFhiO1xuaWYoWGI9bS5jYW5Vc2VET00mJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFXYil7dmFyIFliPXdpbmRvdy5vcGVyYTtYYj0hKFwib2JqZWN0XCI9PT10eXBlb2YgWWImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBZYi52ZXJzaW9uJiYxMj49cGFyc2VJbnQoWWIudmVyc2lvbigpLDEwKSl9XG52YXIgWmI9WGIsJGI9bS5jYW5Vc2VET00mJighVmJ8fFdiJiY4PFdiJiYxMT49V2IpLGFjPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGJjPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1widG9wQ29tcG9zaXRpb25FbmRcIixcInRvcEtleVByZXNzXCIsXCJ0b3BUZXh0SW5wdXRcIixcInRvcFBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uRW5kIHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25TdGFydCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvblVwZGF0ZSB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX19LGNjPSExO1xuZnVuY3Rpb24gZGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuLTEhPT1VYi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcInRvcEtleURvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmNhc2UgXCJ0b3BNb3VzZURvd25cIjpjYXNlIFwidG9wQmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGVjKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGZjPSExO2Z1bmN0aW9uIGdjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOnJldHVybiBlYyhiKTtjYXNlIFwidG9wS2V5UHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7Y2M9ITA7cmV0dXJuIGFjO2Nhc2UgXCJ0b3BUZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWFjJiZjYz9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBoYyhhLGIpe2lmKGZjKXJldHVyblwidG9wQ29tcG9zaXRpb25FbmRcIj09PWF8fCFWYiYmZGMoYSxiKT8oYT1GYigpLFIuX3Jvb3Q9bnVsbCxSLl9zdGFydFRleHQ9bnVsbCxSLl9mYWxsYmFja1RleHQ9bnVsbCxmYz0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwidG9wUGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5UHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gJGI/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgaWM9e2V2ZW50VHlwZXM6YmMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZTtpZihWYiliOntzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uU3RhcnRcIjp2YXIgZj1iYy5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6Zj1iYy5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJ0b3BDb21wb3NpdGlvblVwZGF0ZVwiOmY9YmMuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1mPXZvaWQgMH1lbHNlIGZjP2RjKGEsYykmJihmPWJjLmNvbXBvc2l0aW9uRW5kKTpcInRvcEtleURvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGY9YmMuY29tcG9zaXRpb25TdGFydCk7Zj8oJGImJihmY3x8ZiE9PWJjLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PWJjLmNvbXBvc2l0aW9uRW5kJiZmYyYmKGU9RmIoKSk6KFIuX3Jvb3Q9ZCxSLl9zdGFydFRleHQ9R2IoKSxmYz0hMCkpLGY9U2IuZ2V0UG9vbGVkKGYsYixjLGQpLGU/Zi5kYXRhPVxuZTooZT1lYyhjKSxudWxsIT09ZSYmKGYuZGF0YT1lKSksQWIoZiksZT1mKTplPW51bGw7KGE9WmI/Z2MoYSxjKTpoYyhhLGMpKT8oYj1UYi5nZXRQb29sZWQoYmMuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLEFiKGIpKTpiPW51bGw7cmV0dXJuW2UsYl19fSxqYz1udWxsLGtjPW51bGwsbGM9bnVsbDtmdW5jdGlvbiBtYyhhKXtpZihhPVdhKGEpKXtqYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGpjLnJlc3RvcmVDb250cm9sbGVkU3RhdGU/dm9pZCAwOkQoXCIxOTRcIik7dmFyIGI9VmEoYS5zdGF0ZU5vZGUpO2pjLnJlc3RvcmVDb250cm9sbGVkU3RhdGUoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX12YXIgbmM9e2luamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQ6ZnVuY3Rpb24oYSl7amM9YX19O2Z1bmN0aW9uIG9jKGEpe2tjP2xjP2xjLnB1c2goYSk6bGM9W2FdOmtjPWF9XG5mdW5jdGlvbiBwYygpe2lmKGtjKXt2YXIgYT1rYyxiPWxjO2xjPWtjPW51bGw7bWMoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKW1jKGJbYV0pfX12YXIgcWM9T2JqZWN0LmZyZWV6ZSh7aW5qZWN0aW9uOm5jLGVucXVldWVTdGF0ZVJlc3RvcmU6b2MscmVzdG9yZVN0YXRlSWZOZWVkZWQ6cGN9KTtmdW5jdGlvbiByYyhhLGIpe3JldHVybiBhKGIpfXZhciBzYz0hMTtmdW5jdGlvbiB0YyhhLGIpe2lmKHNjKXJldHVybiByYyhhLGIpO3NjPSEwO3RyeXtyZXR1cm4gcmMoYSxiKX1maW5hbGx5e3NjPSExLHBjKCl9fXZhciB1Yz17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtcbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhdWNbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIHdjKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeGM7bS5jYW5Vc2VET00mJih4Yz1kb2N1bWVudC5pbXBsZW1lbnRhdGlvbiYmZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSYmITAhPT1kb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKFwiXCIsXCJcIikpO1xuZnVuY3Rpb24geWMoYSxiKXtpZighbS5jYW5Vc2VET018fGImJiEoXCJhZGRFdmVudExpc3RlbmVyXCJpbiBkb2N1bWVudCkpcmV0dXJuITE7Yj1cIm9uXCIrYTt2YXIgYz1iIGluIGRvY3VtZW50O2N8fChjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYy5zZXRBdHRyaWJ1dGUoYixcInJldHVybjtcIiksYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY1tiXSk7IWMmJnhjJiZcIndoZWVsXCI9PT1hJiYoYz1kb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKFwiRXZlbnRzLndoZWVsXCIsXCIzLjBcIikpO3JldHVybiBjfWZ1bmN0aW9uIHpjKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBBYyhhKXt2YXIgYj16YyhhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldClyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGUsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBjLmdldC5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Yy5zZXQuY2FsbCh0aGlzLGEpfX0pLHtnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPW51bGw7ZGVsZXRlIGFbYl19fX1cbmZ1bmN0aW9uIEJjKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1BYyhhKSl9ZnVuY3Rpb24gQ2MoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPXpjKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9dmFyIERjPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENoYW5nZSB0b3BDbGljayB0b3BGb2N1cyB0b3BJbnB1dCB0b3BLZXlEb3duIHRvcEtleVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O1xuZnVuY3Rpb24gRWMoYSxiLGMpe2E9Uy5nZXRQb29sZWQoRGMuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtvYyhjKTtBYihhKTtyZXR1cm4gYX12YXIgRmM9bnVsbCxHYz1udWxsO2Z1bmN0aW9uIEhjKGEpe2xiKGEpO21iKCExKX1mdW5jdGlvbiBJYyhhKXt2YXIgYj1yYihhKTtpZihDYyhiKSlyZXR1cm4gYX1mdW5jdGlvbiBKYyhhLGIpe2lmKFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBRYz0hMTttLmNhblVzZURPTSYmKFFjPXljKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIFJjKCl7RmMmJihGYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixTYyksR2M9RmM9bnVsbCl9ZnVuY3Rpb24gU2MoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkljKEdjKSYmKGE9RWMoR2MsYSx3YyhhKSksdGMoSGMsYSkpfVxuZnVuY3Rpb24gVGMoYSxiLGMpe1widG9wRm9jdXNcIj09PWE/KFJjKCksRmM9YixHYz1jLEZjLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFNjKSk6XCJ0b3BCbHVyXCI9PT1hJiZSYygpfWZ1bmN0aW9uIFVjKGEpe2lmKFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI9PT1hfHxcInRvcEtleVVwXCI9PT1hfHxcInRvcEtleURvd25cIj09PWEpcmV0dXJuIEljKEdjKX1mdW5jdGlvbiBWYyhhLGIpe2lmKFwidG9wQ2xpY2tcIj09PWEpcmV0dXJuIEljKGIpfWZ1bmN0aW9uIFdjKGEsYil7aWYoXCJ0b3BJbnB1dFwiPT09YXx8XCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIEljKGIpfVxudmFyIFhjPXtldmVudFR5cGVzOkRjLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6UWMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP3JiKGIpOndpbmRvdyxmPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09Znx8XCJpbnB1dFwiPT09ZiYmXCJmaWxlXCI9PT1lLnR5cGUpdmFyIGc9SmM7ZWxzZSBpZih2YyhlKSlpZihRYylnPVdjO2Vsc2V7Zz1VYzt2YXIgaz1UY31lbHNlIGY9ZS5ub2RlTmFtZSwhZnx8XCJpbnB1dFwiIT09Zi50b0xvd2VyQ2FzZSgpfHxcImNoZWNrYm94XCIhPT1lLnR5cGUmJlwicmFkaW9cIiE9PWUudHlwZXx8KGc9VmMpO2lmKGcmJihnPWcoYSxiKSkpcmV0dXJuIEVjKGcsYyxkKTtrJiZrKGEsZSxiKTtcInRvcEJsdXJcIj09PWEmJm51bGwhPWImJihhPWIuX3dyYXBwZXJTdGF0ZXx8ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiYoYT1cIlwiK2UudmFsdWUsZS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSE9PVxuYSYmZS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLGEpKX19O2Z1bmN0aW9uIFljKGEsYixjLGQpe3JldHVybiBTLmNhbGwodGhpcyxhLGIsYyxkKX1TLmF1Z21lbnRDbGFzcyhZYyx7dmlldzpudWxsLGRldGFpbDpudWxsfSk7dmFyIFpjPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiAkYyhhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPVpjW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gYWQoKXtyZXR1cm4gJGN9ZnVuY3Rpb24gYmQoYSxiLGMsZCl7cmV0dXJuIFMuY2FsbCh0aGlzLGEsYixjLGQpfVxuWWMuYXVnbWVudENsYXNzKGJkLHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOmFkLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfX0pO1xudmFyIGNkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX19LGRkPXtldmVudFR5cGVzOmNkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoXCJ0b3BNb3VzZU92ZXJcIj09PWEmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHxcInRvcE1vdXNlT3V0XCIhPT1hJiZcInRvcE1vdXNlT3ZlclwiIT09YSlyZXR1cm4gbnVsbDt2YXIgZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztcInRvcE1vdXNlT3V0XCI9PT1hPyhhPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9xYihiKTpudWxsKTphPW51bGw7aWYoYT09PVxuYilyZXR1cm4gbnVsbDt2YXIgZj1udWxsPT1hP2U6cmIoYSk7ZT1udWxsPT1iP2U6cmIoYik7dmFyIGc9YmQuZ2V0UG9vbGVkKGNkLm1vdXNlTGVhdmUsYSxjLGQpO2cudHlwZT1cIm1vdXNlbGVhdmVcIjtnLnRhcmdldD1mO2cucmVsYXRlZFRhcmdldD1lO2M9YmQuZ2V0UG9vbGVkKGNkLm1vdXNlRW50ZXIsYixjLGQpO2MudHlwZT1cIm1vdXNlZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1mO0JiKGcsYyxhLGIpO3JldHVybltnLGNdfX0sZWQ9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXI7ZnVuY3Rpb24gZmQoYSl7YT1hLnR5cGU7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOm51bGx9XG5mdW5jdGlvbiBnZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7YltcInJldHVyblwiXTspYj1iW1wicmV0dXJuXCJdO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2JbXCJyZXR1cm5cIl07KWlmKGI9YltcInJldHVyblwiXSwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIGhkKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PWdkKGEpOiExfWZ1bmN0aW9uIGlkKGEpezIhPT1nZChhKT9EKFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIGpkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPWdkKGEpLDM9PT1iP0QoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Y1tcInJldHVyblwiXSxmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09YylyZXR1cm4gaWQoZSksYTtpZihnPT09ZClyZXR1cm4gaWQoZSksYjtnPWcuc2libGluZ31EKFwiMTg4XCIpfWlmKGNbXCJyZXR1cm5cIl0hPT1kW1wicmV0dXJuXCJdKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaz1lLmNoaWxkO2s7KXtpZihrPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGs9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9az1rLnNpYmxpbmd9aWYoIWcpe2ZvcihrPWYuY2hpbGQ7azspe2lmKGs9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaz09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31rPWsuc2libGluZ31nP1xudm9pZCAwOkQoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD9EKFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/RChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBrZChhKXthPWpkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gbGQoYSl7YT1qZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkJiY0IT09Yi50YWcpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfXZhciBtZD1bXTtcbmZ1bmN0aW9uIG5kKGEpe3ZhciBiPWEudGFyZ2V0SW5zdDtkb3tpZighYil7YS5hbmNlc3RvcnMucHVzaChiKTticmVha312YXIgYztmb3IoYz1iO2NbXCJyZXR1cm5cIl07KWM9Y1tcInJldHVyblwiXTtjPTMhPT1jLnRhZz9udWxsOmMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPXFiKGMpfXdoaWxlKGIpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKWI9YS5hbmNlc3RvcnNbY10sb2QoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LHdjKGEubmF0aXZlRXZlbnQpKX12YXIgcGQ9ITAsb2Q9dm9pZCAwO2Z1bmN0aW9uIHFkKGEpe3BkPSEhYX1mdW5jdGlvbiBVKGEsYixjKXtyZXR1cm4gYz9jYS5saXN0ZW4oYyxiLHJkLmJpbmQobnVsbCxhKSk6bnVsbH1mdW5jdGlvbiBzZChhLGIsYyl7cmV0dXJuIGM/Y2EuY2FwdHVyZShjLGIscmQuYmluZChudWxsLGEpKTpudWxsfVxuZnVuY3Rpb24gcmQoYSxiKXtpZihwZCl7dmFyIGM9d2MoYik7Yz1xYihjKTtudWxsPT09Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBjLnRhZ3x8Mj09PWdkKGMpfHwoYz1udWxsKTtpZihtZC5sZW5ndGgpe3ZhciBkPW1kLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e3RjKG5kLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+bWQubGVuZ3RoJiZtZC5wdXNoKGEpfX19XG52YXIgdGQ9T2JqZWN0LmZyZWV6ZSh7Z2V0IF9lbmFibGVkKCl7cmV0dXJuIHBkfSxnZXQgX2hhbmRsZVRvcExldmVsKCl7cmV0dXJuIG9kfSxzZXRIYW5kbGVUb3BMZXZlbDpmdW5jdGlvbihhKXtvZD1hfSxzZXRFbmFibGVkOnFkLGlzRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiBwZH0sdHJhcEJ1YmJsZWRFdmVudDpVLHRyYXBDYXB0dXJlZEV2ZW50OnNkLGRpc3BhdGNoRXZlbnQ6cmR9KTtmdW5jdGlvbiB1ZChhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO2NbXCJtc1wiK2FdPVwiTVNcIitiO2NbXCJPXCIrYV09XCJvXCIrYi50b0xvd2VyQ2FzZSgpO3JldHVybiBjfVxudmFyIHZkPXthbmltYXRpb25lbmQ6dWQoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246dWQoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDp1ZChcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDp1ZChcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LHdkPXt9LHhkPXt9O20uY2FuVXNlRE9NJiYoeGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgdmQuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgdmQuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgdmQuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgdmQudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtcbmZ1bmN0aW9uIHlkKGEpe2lmKHdkW2FdKXJldHVybiB3ZFthXTtpZighdmRbYV0pcmV0dXJuIGE7dmFyIGI9dmRbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4geGQpcmV0dXJuIHdkW2FdPWJbY107cmV0dXJuXCJcIn1cbnZhciB6ZD17dG9wQWJvcnQ6XCJhYm9ydFwiLHRvcEFuaW1hdGlvbkVuZDp5ZChcImFuaW1hdGlvbmVuZFwiKXx8XCJhbmltYXRpb25lbmRcIix0b3BBbmltYXRpb25JdGVyYXRpb246eWQoXCJhbmltYXRpb25pdGVyYXRpb25cIil8fFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIsdG9wQW5pbWF0aW9uU3RhcnQ6eWQoXCJhbmltYXRpb25zdGFydFwiKXx8XCJhbmltYXRpb25zdGFydFwiLHRvcEJsdXI6XCJibHVyXCIsdG9wQ2FuY2VsOlwiY2FuY2VsXCIsdG9wQ2FuUGxheTpcImNhbnBsYXlcIix0b3BDYW5QbGF5VGhyb3VnaDpcImNhbnBsYXl0aHJvdWdoXCIsdG9wQ2hhbmdlOlwiY2hhbmdlXCIsdG9wQ2xpY2s6XCJjbGlja1wiLHRvcENsb3NlOlwiY2xvc2VcIix0b3BDb21wb3NpdGlvbkVuZDpcImNvbXBvc2l0aW9uZW5kXCIsdG9wQ29tcG9zaXRpb25TdGFydDpcImNvbXBvc2l0aW9uc3RhcnRcIix0b3BDb21wb3NpdGlvblVwZGF0ZTpcImNvbXBvc2l0aW9udXBkYXRlXCIsdG9wQ29udGV4dE1lbnU6XCJjb250ZXh0bWVudVwiLHRvcENvcHk6XCJjb3B5XCIsXG50b3BDdXQ6XCJjdXRcIix0b3BEb3VibGVDbGljazpcImRibGNsaWNrXCIsdG9wRHJhZzpcImRyYWdcIix0b3BEcmFnRW5kOlwiZHJhZ2VuZFwiLHRvcERyYWdFbnRlcjpcImRyYWdlbnRlclwiLHRvcERyYWdFeGl0OlwiZHJhZ2V4aXRcIix0b3BEcmFnTGVhdmU6XCJkcmFnbGVhdmVcIix0b3BEcmFnT3ZlcjpcImRyYWdvdmVyXCIsdG9wRHJhZ1N0YXJ0OlwiZHJhZ3N0YXJ0XCIsdG9wRHJvcDpcImRyb3BcIix0b3BEdXJhdGlvbkNoYW5nZTpcImR1cmF0aW9uY2hhbmdlXCIsdG9wRW1wdGllZDpcImVtcHRpZWRcIix0b3BFbmNyeXB0ZWQ6XCJlbmNyeXB0ZWRcIix0b3BFbmRlZDpcImVuZGVkXCIsdG9wRXJyb3I6XCJlcnJvclwiLHRvcEZvY3VzOlwiZm9jdXNcIix0b3BJbnB1dDpcImlucHV0XCIsdG9wS2V5RG93bjpcImtleWRvd25cIix0b3BLZXlQcmVzczpcImtleXByZXNzXCIsdG9wS2V5VXA6XCJrZXl1cFwiLHRvcExvYWRlZERhdGE6XCJsb2FkZWRkYXRhXCIsdG9wTG9hZDpcImxvYWRcIix0b3BMb2FkZWRNZXRhZGF0YTpcImxvYWRlZG1ldGFkYXRhXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsXG50b3BNb3VzZURvd246XCJtb3VzZWRvd25cIix0b3BNb3VzZU1vdmU6XCJtb3VzZW1vdmVcIix0b3BNb3VzZU91dDpcIm1vdXNlb3V0XCIsdG9wTW91c2VPdmVyOlwibW91c2VvdmVyXCIsdG9wTW91c2VVcDpcIm1vdXNldXBcIix0b3BQYXN0ZTpcInBhc3RlXCIsdG9wUGF1c2U6XCJwYXVzZVwiLHRvcFBsYXk6XCJwbGF5XCIsdG9wUGxheWluZzpcInBsYXlpbmdcIix0b3BQcm9ncmVzczpcInByb2dyZXNzXCIsdG9wUmF0ZUNoYW5nZTpcInJhdGVjaGFuZ2VcIix0b3BTY3JvbGw6XCJzY3JvbGxcIix0b3BTZWVrZWQ6XCJzZWVrZWRcIix0b3BTZWVraW5nOlwic2Vla2luZ1wiLHRvcFNlbGVjdGlvbkNoYW5nZTpcInNlbGVjdGlvbmNoYW5nZVwiLHRvcFN0YWxsZWQ6XCJzdGFsbGVkXCIsdG9wU3VzcGVuZDpcInN1c3BlbmRcIix0b3BUZXh0SW5wdXQ6XCJ0ZXh0SW5wdXRcIix0b3BUaW1lVXBkYXRlOlwidGltZXVwZGF0ZVwiLHRvcFRvZ2dsZTpcInRvZ2dsZVwiLHRvcFRvdWNoQ2FuY2VsOlwidG91Y2hjYW5jZWxcIix0b3BUb3VjaEVuZDpcInRvdWNoZW5kXCIsdG9wVG91Y2hNb3ZlOlwidG91Y2htb3ZlXCIsXG50b3BUb3VjaFN0YXJ0OlwidG91Y2hzdGFydFwiLHRvcFRyYW5zaXRpb25FbmQ6eWQoXCJ0cmFuc2l0aW9uZW5kXCIpfHxcInRyYW5zaXRpb25lbmRcIix0b3BWb2x1bWVDaGFuZ2U6XCJ2b2x1bWVjaGFuZ2VcIix0b3BXYWl0aW5nOlwid2FpdGluZ1wiLHRvcFdoZWVsOlwid2hlZWxcIn0sQWQ9e30sQmQ9MCxDZD1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7ZnVuY3Rpb24gRGQoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsQ2QpfHwoYVtDZF09QmQrKyxBZFthW0NkXV09e30pO3JldHVybiBBZFthW0NkXV19ZnVuY3Rpb24gRWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gRmQoYSxiKXt2YXIgYz1FZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1FZChjKX19ZnVuY3Rpb24gR2QoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmXCJ0ZXh0XCI9PT1hLnR5cGV8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIEhkPW0uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsSWQ9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29udGV4dE1lbnUgdG9wRm9jdXMgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BNb3VzZURvd24gdG9wTW91c2VVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxKZD1udWxsLEtkPW51bGwsTGQ9bnVsbCxNZD0hMTtcbmZ1bmN0aW9uIE5kKGEsYil7aWYoTWR8fG51bGw9PUpkfHxKZCE9PWRhKCkpcmV0dXJuIG51bGw7dmFyIGM9SmQ7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmR2QoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OndpbmRvdy5nZXRTZWxlY3Rpb24/KGM9d2luZG93LmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pOmM9dm9pZCAwO3JldHVybiBMZCYmZWEoTGQsYyk/bnVsbDooTGQ9YyxhPVMuZ2V0UG9vbGVkKElkLnNlbGVjdCxLZCxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PUpkLEFiKGEpLGEpfVxudmFyIE9kPXtldmVudFR5cGVzOklkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPURkKGUpO2Y9UmEub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBrPWZbZ107aWYoIWUuaGFzT3duUHJvcGVydHkoayl8fCFlW2tdKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9yYihiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BGb2N1c1wiOmlmKHZjKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKUpkPWUsS2Q9YixMZD1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6TGQ9S2Q9SmQ9bnVsbDticmVhaztjYXNlIFwidG9wTW91c2VEb3duXCI6TWQ9ITA7YnJlYWs7Y2FzZSBcInRvcENvbnRleHRNZW51XCI6Y2FzZSBcInRvcE1vdXNlVXBcIjpyZXR1cm4gTWQ9ITEsTmQoYyxkKTtjYXNlIFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI6aWYoSGQpYnJlYWs7XG5jYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOnJldHVybiBOZChjLGQpfXJldHVybiBudWxsfX07ZnVuY3Rpb24gUGQoYSxiLGMsZCl7cmV0dXJuIFMuY2FsbCh0aGlzLGEsYixjLGQpfVMuYXVnbWVudENsYXNzKFBkLHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KTtmdW5jdGlvbiBRZChhLGIsYyxkKXtyZXR1cm4gUy5jYWxsKHRoaXMsYSxiLGMsZCl9Uy5hdWdtZW50Q2xhc3MoUWQse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KTtmdW5jdGlvbiBSZChhLGIsYyxkKXtyZXR1cm4gUy5jYWxsKHRoaXMsYSxiLGMsZCl9WWMuYXVnbWVudENsYXNzKFJkLHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtcbmZ1bmN0aW9uIFNkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIFRkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxVZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn07ZnVuY3Rpb24gVmQoYSxiLGMsZCl7cmV0dXJuIFMuY2FsbCh0aGlzLGEsYixjLGQpfVxuWWMuYXVnbWVudENsYXNzKFZkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPVRkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPVNkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9VZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6YWQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP1NkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/U2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KTtmdW5jdGlvbiBXZChhLGIsYyxkKXtyZXR1cm4gUy5jYWxsKHRoaXMsYSxiLGMsZCl9YmQuYXVnbWVudENsYXNzKFdkLHtkYXRhVHJhbnNmZXI6bnVsbH0pO2Z1bmN0aW9uIFhkKGEsYixjLGQpe3JldHVybiBTLmNhbGwodGhpcyxhLGIsYyxkKX1ZYy5hdWdtZW50Q2xhc3MoWGQse3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTphZH0pO2Z1bmN0aW9uIFlkKGEsYixjLGQpe3JldHVybiBTLmNhbGwodGhpcyxhLGIsYyxkKX1TLmF1Z21lbnRDbGFzcyhZZCx7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KTtcbmZ1bmN0aW9uIFpkKGEsYixjLGQpe3JldHVybiBTLmNhbGwodGhpcyxhLGIsYyxkKX1iZC5hdWdtZW50Q2xhc3MoWmQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSk7dmFyICRkPXt9LGFlPXt9O1xuXCJhYm9ydCBhbmltYXRpb25FbmQgYW5pbWF0aW9uSXRlcmF0aW9uIGFuaW1hdGlvblN0YXJ0IGJsdXIgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZG91YmxlQ2xpY2sgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZm9jdXMgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCBzY3JvbGwgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvZ2dsZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaE1vdmUgdG91Y2hTdGFydCB0cmFuc2l0aW9uRW5kIHZvbHVtZUNoYW5nZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXS50b1VwcGVyQ2FzZSgpK1xuYS5zbGljZSgxKSxjPVwib25cIitiO2I9XCJ0b3BcIitiO2M9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmMsY2FwdHVyZWQ6YytcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltiXX07JGRbYV09YzthZVtiXT1jfSk7XG52YXIgYmU9e2V2ZW50VHlwZXM6JGQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hZVthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMD09PVNkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6YT1WZDticmVhaztjYXNlIFwidG9wQmx1clwiOmNhc2UgXCJ0b3BGb2N1c1wiOmE9UmQ7YnJlYWs7Y2FzZSBcInRvcENsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJ0b3BEb3VibGVDbGlja1wiOmNhc2UgXCJ0b3BNb3VzZURvd25cIjpjYXNlIFwidG9wTW91c2VNb3ZlXCI6Y2FzZSBcInRvcE1vdXNlVXBcIjpjYXNlIFwidG9wTW91c2VPdXRcIjpjYXNlIFwidG9wTW91c2VPdmVyXCI6Y2FzZSBcInRvcENvbnRleHRNZW51XCI6YT1iZDticmVhaztjYXNlIFwidG9wRHJhZ1wiOmNhc2UgXCJ0b3BEcmFnRW5kXCI6Y2FzZSBcInRvcERyYWdFbnRlclwiOmNhc2UgXCJ0b3BEcmFnRXhpdFwiOmNhc2UgXCJ0b3BEcmFnTGVhdmVcIjpjYXNlIFwidG9wRHJhZ092ZXJcIjpjYXNlIFwidG9wRHJhZ1N0YXJ0XCI6Y2FzZSBcInRvcERyb3BcIjphPVxuV2Q7YnJlYWs7Y2FzZSBcInRvcFRvdWNoQ2FuY2VsXCI6Y2FzZSBcInRvcFRvdWNoRW5kXCI6Y2FzZSBcInRvcFRvdWNoTW92ZVwiOmNhc2UgXCJ0b3BUb3VjaFN0YXJ0XCI6YT1YZDticmVhaztjYXNlIFwidG9wQW5pbWF0aW9uRW5kXCI6Y2FzZSBcInRvcEFuaW1hdGlvbkl0ZXJhdGlvblwiOmNhc2UgXCJ0b3BBbmltYXRpb25TdGFydFwiOmE9UGQ7YnJlYWs7Y2FzZSBcInRvcFRyYW5zaXRpb25FbmRcIjphPVlkO2JyZWFrO2Nhc2UgXCJ0b3BTY3JvbGxcIjphPVljO2JyZWFrO2Nhc2UgXCJ0b3BXaGVlbFwiOmE9WmQ7YnJlYWs7Y2FzZSBcInRvcENvcHlcIjpjYXNlIFwidG9wQ3V0XCI6Y2FzZSBcInRvcFBhc3RlXCI6YT1RZDticmVhaztkZWZhdWx0OmE9U31iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO0FiKGIpO3JldHVybiBifX07b2Q9ZnVuY3Rpb24oYSxiLGMsZCl7YT1rYihhLGIsYyxkKTtsYihhKTttYighMSl9O2liLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBUYXBFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7XG5WYT10Yi5nZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlO1dhPXRiLmdldEluc3RhbmNlRnJvbU5vZGU7WGE9dGIuZ2V0Tm9kZUZyb21JbnN0YW5jZTtpYi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOmJlLEVudGVyTGVhdmVFdmVudFBsdWdpbjpkZCxDaGFuZ2VFdmVudFBsdWdpbjpYYyxTZWxlY3RFdmVudFBsdWdpbjpPZCxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOmljfSk7dmFyIGNlPVtdLGRlPS0xO2Z1bmN0aW9uIFYoYSl7MD5kZXx8KGEuY3VycmVudD1jZVtkZV0sY2VbZGVdPW51bGwsZGUtLSl9ZnVuY3Rpb24gVyhhLGIpe2RlKys7Y2VbZGVdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn1uZXcgU2V0O3ZhciBlZT17Y3VycmVudDpDfSxYPXtjdXJyZW50OiExfSxmZT1DO2Z1bmN0aW9uIGdlKGEpe3JldHVybiBoZShhKT9mZTplZS5jdXJyZW50fVxuZnVuY3Rpb24gaWUoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBDO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIGhlKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jaGlsZENvbnRleHRUeXBlc31mdW5jdGlvbiBqZShhKXtoZShhKSYmKFYoWCxhKSxWKGVlLGEpKX1cbmZ1bmN0aW9uIGtlKGEsYixjKXtudWxsIT1lZS5jdXJzb3I/RChcIjE2OFwiKTp2b2lkIDA7VyhlZSxiLGEpO1coWCxjLGEpfWZ1bmN0aW9uIGxlKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGUsZD1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBiO2M9Yy5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gYyllIGluIGQ/dm9pZCAwOkQoXCIxMDhcIixmZChhKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIEEoe30sYixjKX1mdW5jdGlvbiBtZShhKXtpZighaGUoYSkpcmV0dXJuITE7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxDO2ZlPWVlLmN1cnJlbnQ7VyhlZSxiLGEpO1coWCxYLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiBuZShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2M/dm9pZCAwOkQoXCIxNjlcIik7aWYoYil7dmFyIGQ9bGUoYSxmZSk7Yy5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1kO1YoWCxhKTtWKGVlLGEpO1coZWUsZCxhKX1lbHNlIFYoWCxhKTtXKFgsYixhKX1cbmZ1bmN0aW9uIFkoYSxiLGMpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yjt0aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzW1wicmV0dXJuXCJdPW51bGw7dGhpcy5pbmRleD0wO3RoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz10aGlzLnBlbmRpbmdQcm9wcz10aGlzLnJlZj1udWxsO3RoaXMuaW50ZXJuYWxDb250ZXh0VGFnPWM7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1cbmZ1bmN0aW9uIG9lKGEsYixjKXt2YXIgZD1hLmFsdGVybmF0ZTtudWxsPT09ZD8oZD1uZXcgWShhLnRhZyxhLmtleSxhLmludGVybmFsQ29udGV4dFRhZyksZC50eXBlPWEudHlwZSxkLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxkLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWQpOihkLmVmZmVjdFRhZz0wLGQubmV4dEVmZmVjdD1udWxsLGQuZmlyc3RFZmZlY3Q9bnVsbCxkLmxhc3RFZmZlY3Q9bnVsbCk7ZC5leHBpcmF0aW9uVGltZT1jO2QucGVuZGluZ1Byb3BzPWI7ZC5jaGlsZD1hLmNoaWxkO2QubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7ZC5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7ZC5zaWJsaW5nPWEuc2libGluZztkLmluZGV4PWEuaW5kZXg7ZC5yZWY9YS5yZWY7cmV0dXJuIGR9XG5mdW5jdGlvbiBwZShhLGIsYyl7dmFyIGQ9dm9pZCAwLGU9YS50eXBlLGY9YS5rZXk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/KGQ9ZS5wcm90b3R5cGUmJmUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ/bmV3IFkoMixmLGIpOm5ldyBZKDAsZixiKSxkLnR5cGU9ZSxkLnBlbmRpbmdQcm9wcz1hLnByb3BzKTpcInN0cmluZ1wiPT09dHlwZW9mIGU/KGQ9bmV3IFkoNSxmLGIpLGQudHlwZT1lLGQucGVuZGluZ1Byb3BzPWEucHJvcHMpOlwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwibnVtYmVyXCI9PT10eXBlb2YgZS50YWc/KGQ9ZSxkLnBlbmRpbmdQcm9wcz1hLnByb3BzKTpEKFwiMTMwXCIsbnVsbD09ZT9lOnR5cGVvZiBlLFwiXCIpO2QuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gZH1mdW5jdGlvbiBxZShhLGIsYyxkKXtiPW5ldyBZKDEwLGQsYik7Yi5wZW5kaW5nUHJvcHM9YTtiLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGJ9XG5mdW5jdGlvbiByZShhLGIsYyl7Yj1uZXcgWSg2LG51bGwsYik7Yi5wZW5kaW5nUHJvcHM9YTtiLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGJ9ZnVuY3Rpb24gc2UoYSxiLGMpe2I9bmV3IFkoNyxhLmtleSxiKTtiLnR5cGU9YS5oYW5kbGVyO2IucGVuZGluZ1Byb3BzPWE7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIHRlKGEsYixjKXthPW5ldyBZKDksbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gdWUoYSxiLGMpe2I9bmV3IFkoNCxhLmtleSxiKTtiLnBlbmRpbmdQcm9wcz1hLmNoaWxkcmVufHxbXTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifXZhciB2ZT1udWxsLHdlPW51bGw7XG5mdW5jdGlvbiB4ZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fWZ1bmN0aW9uIHllKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO3ZlPXhlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTt3ZT14ZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfWZ1bmN0aW9uIHplKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiB2ZSYmdmUoYSl9ZnVuY3Rpb24gQWUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIHdlJiZ3ZShhKX1cbmZ1bmN0aW9uIEJlKGEpe3JldHVybntiYXNlU3RhdGU6YSxleHBpcmF0aW9uVGltZTowLGZpcnN0Om51bGwsbGFzdDpudWxsLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExLGlzSW5pdGlhbGl6ZWQ6ITF9fWZ1bmN0aW9uIENlKGEsYil7bnVsbD09PWEubGFzdD9hLmZpcnN0PWEubGFzdD1iOihhLmxhc3QubmV4dD1iLGEubGFzdD1iKTtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iLmV4cGlyYXRpb25UaW1lKWEuZXhwaXJhdGlvblRpbWU9Yi5leHBpcmF0aW9uVGltZX1cbmZ1bmN0aW9uIERlKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLnVwZGF0ZVF1ZXVlO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPUJlKG51bGwpKTtudWxsIT09Yz8oYT1jLnVwZGF0ZVF1ZXVlLG51bGw9PT1hJiYoYT1jLnVwZGF0ZVF1ZXVlPUJlKG51bGwpKSk6YT1udWxsO2E9YSE9PWQ/YTpudWxsO251bGw9PT1hP0NlKGQsYik6bnVsbD09PWQubGFzdHx8bnVsbD09PWEubGFzdD8oQ2UoZCxiKSxDZShhLGIpKTooQ2UoZCxiKSxhLmxhc3Q9Yil9ZnVuY3Rpb24gRWUoYSxiLGMsZCl7YT1hLnBhcnRpYWxTdGF0ZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoYixjLGQpOmF9XG5mdW5jdGlvbiBMZShhLGIsYyxkLGUsZil7bnVsbCE9PWEmJmEudXBkYXRlUXVldWU9PT1jJiYoYz1iLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6Yy5iYXNlU3RhdGUsZXhwaXJhdGlvblRpbWU6Yy5leHBpcmF0aW9uVGltZSxmaXJzdDpjLmZpcnN0LGxhc3Q6Yy5sYXN0LGlzSW5pdGlhbGl6ZWQ6Yy5pc0luaXRpYWxpemVkLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExfSk7Yy5leHBpcmF0aW9uVGltZT0wO2MuaXNJbml0aWFsaXplZD9hPWMuYmFzZVN0YXRlOihhPWMuYmFzZVN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxjLmlzSW5pdGlhbGl6ZWQ9ITApO2Zvcih2YXIgZz0hMCxrPWMuZmlyc3QsaD0hMTtudWxsIT09azspe3ZhciByPWsuZXhwaXJhdGlvblRpbWU7aWYocj5mKXt2YXIgbj1jLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1ufHxuPnIpYy5leHBpcmF0aW9uVGltZT1yO2h8fChoPSEwLGMuYmFzZVN0YXRlPWEpfWVsc2V7aHx8KGMuZmlyc3Q9ay5uZXh0LG51bGw9PT1cbmMuZmlyc3QmJihjLmxhc3Q9bnVsbCkpO2lmKGsuaXNSZXBsYWNlKWE9RWUoayxkLGEsZSksZz0hMDtlbHNlIGlmKHI9RWUoayxkLGEsZSkpYT1nP0Eoe30sYSxyKTpBKGEsciksZz0hMTtrLmlzRm9yY2VkJiYoYy5oYXNGb3JjZVVwZGF0ZT0hMCk7bnVsbCE9PWsuY2FsbGJhY2smJihyPWMuY2FsbGJhY2tMaXN0LG51bGw9PT1yJiYocj1jLmNhbGxiYWNrTGlzdD1bXSksci5wdXNoKGspKX1rPWsubmV4dH1udWxsIT09Yy5jYWxsYmFja0xpc3Q/Yi5lZmZlY3RUYWd8PTMyOm51bGwhPT1jLmZpcnN0fHxjLmhhc0ZvcmNlVXBkYXRlfHwoYi51cGRhdGVRdWV1ZT1udWxsKTtofHwoYy5iYXNlU3RhdGU9YSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBNZShhLGIpe3ZhciBjPWEuY2FsbGJhY2tMaXN0O2lmKG51bGwhPT1jKWZvcihhLmNhbGxiYWNrTGlzdD1udWxsLGE9MDthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXSxlPWQuY2FsbGJhY2s7ZC5jYWxsYmFjaz1udWxsO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBlP0QoXCIxOTFcIixlKTp2b2lkIDA7ZS5jYWxsKGIpfX1cbmZ1bmN0aW9uIE5lKGEsYixjLGQpe2Z1bmN0aW9uIGUoYSxiKXtiLnVwZGF0ZXI9ZjthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hfXZhciBmPXtpc01vdW50ZWQ6aGQsZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGMsZCxlKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBnPWIoYyk7RGUoYyx7ZXhwaXJhdGlvblRpbWU6ZyxwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxuZXh0Q2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9KTthKGMsZyl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYyxkLGUpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2U9dm9pZCAwPT09ZT9udWxsOmU7dmFyIGY9YihjKTtEZShjLHtleHBpcmF0aW9uVGltZTpmLHBhcnRpYWxTdGF0ZTpkLGNhbGxiYWNrOmUsaXNSZXBsYWNlOiEwLGlzRm9yY2VkOiExLG5leHRDYWxsYmFjazpudWxsLG5leHQ6bnVsbH0pO1xuYShjLGYpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYyxkKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBlPWIoYyk7RGUoYyx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6bnVsbCxjYWxsYmFjazpkLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMCxuZXh0Q2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9KTthKGMsZSl9fTtyZXR1cm57YWRvcHRDbGFzc0luc3RhbmNlOmUsY29uc3RydWN0Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPWdlKGEpLGY9Mj09PWEudGFnJiZudWxsIT1hLnR5cGUuY29udGV4dFR5cGVzLGc9Zj9pZShhLGQpOkM7Yj1uZXcgYyhiLGcpO2UoYSxiKTtmJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZCxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWcpO3JldHVybiBifSxtb3VudENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxcbmIpe3ZhciBjPWEuYWx0ZXJuYXRlLGQ9YS5zdGF0ZU5vZGUsZT1kLnN0YXRlfHxudWxsLGc9YS5wZW5kaW5nUHJvcHM7Zz92b2lkIDA6RChcIjE1OFwiKTt2YXIgaz1nZShhKTtkLnByb3BzPWc7ZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGU9ZTtkLnJlZnM9QztkLmNvbnRleHQ9aWUoYSxrKTtudWxsIT1hLnR5cGUmJm51bGwhPWEudHlwZS5wcm90b3R5cGUmJiEwPT09YS50eXBlLnByb3RvdHlwZS51bnN0YWJsZV9pc0FzeW5jUmVhY3RDb21wb25lbnQmJihhLmludGVybmFsQ29udGV4dFRhZ3w9MSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50JiYoZT1kLnN0YXRlLGQuY29tcG9uZW50V2lsbE1vdW50KCksZSE9PWQuc3RhdGUmJmYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShkLGQuc3RhdGUsbnVsbCksZT1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1lJiYoZC5zdGF0ZT1MZShjLGEsZSxkLGcsYikpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD1cbjQpfSx1cGRhdGVDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYixlKXt2YXIgZz1iLnN0YXRlTm9kZTtnLnByb3BzPWIubWVtb2l6ZWRQcm9wcztnLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTt2YXIgaz1iLm1lbW9pemVkUHJvcHMsaD1iLnBlbmRpbmdQcm9wcztofHwoaD1rLG51bGw9PWg/RChcIjE1OVwiKTp2b2lkIDApO3ZhciB1PWcuY29udGV4dCx4PWdlKGIpO3g9aWUoYix4KTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxrPT09aCYmdT09PXh8fCh1PWcuc3RhdGUsZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGgseCksZy5zdGF0ZSE9PXUmJmYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShnLGcuc3RhdGUsbnVsbCkpO3U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWIudXBkYXRlUXVldWU/TGUoYSxiLGIudXBkYXRlUXVldWUsZyxoLGUpOnU7aWYoIShrIT09aHx8dSE9PWV8fFguY3VycmVudHx8bnVsbCE9PWIudXBkYXRlUXVldWUmJmIudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpKXJldHVyblwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxrPT09YS5tZW1vaXplZFByb3BzJiZ1PT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLCExO3ZhciBGPWg7aWYobnVsbD09PWt8fG51bGwhPT1iLnVwZGF0ZVF1ZXVlJiZiLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKUY9ITA7ZWxzZXt2YXIgTD1iLnN0YXRlTm9kZSxHPWIudHlwZTtGPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBMLnNob3VsZENvbXBvbmVudFVwZGF0ZT9MLnNob3VsZENvbXBvbmVudFVwZGF0ZShGLGUseCk6Ry5wcm90b3R5cGUmJkcucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFlYShrLEYpfHwhZWEodSxlKTohMH1GPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoaCxlLHgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5rPT09YS5tZW1vaXplZFByb3BzJiZ1PT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLGMoYixoKSxkKGIsZSkpO2cucHJvcHM9aDtnLnN0YXRlPWU7Zy5jb250ZXh0PXg7cmV0dXJuIEZ9fX12YXIgT2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdJiZTeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIil8fDYwMTA2O2Z1bmN0aW9uIFBlKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6T2Usa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319dmFyIFFlPUFycmF5LmlzQXJyYXksUmU9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLFNlLFRlLFVlLFZlO1xuXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdPyhTZT1TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpLFRlPVN5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIiksVWU9U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucmV0dXJuXCIpLFZlPVN5bWJvbFtcImZvclwiXShcInJlYWN0LmZyYWdtZW50XCIpKTooU2U9NjAxMDMsVGU9NjAxMDQsVWU9NjAxMDUsVmU9NjAxMDcpO2Z1bmN0aW9uIFdlKGEpe2lmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1SZSYmYVtSZV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFhlKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbCE9PWMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXtpZihiLl9vd25lcil7Yj1iLl9vd25lcjt2YXIgZD12b2lkIDA7YiYmKDIhPT1iLnRhZz9EKFwiMTEwXCIpOnZvaWQgMCxkPWIuc3RhdGVOb2RlKTtkP3ZvaWQgMDpEKFwiMTQ3XCIsYyk7dmFyIGU9XCJcIitjO2lmKG51bGwhPT1hJiZudWxsIT09YS5yZWYmJmEucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBhLnJlZjthPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcz09PUM/ZC5yZWZzPXt9OmQucmVmcztudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2EuX3N0cmluZ1JlZj1lO3JldHVybiBhfVwic3RyaW5nXCIhPT10eXBlb2YgYz9EKFwiMTQ4XCIpOnZvaWQgMDtiLl9vd25lcj92b2lkIDA6RChcIjE0OVwiLGMpfXJldHVybiBjfVxuZnVuY3Rpb24gWWUoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJkQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIFplKGEsYil7ZnVuY3Rpb24gYyhjLGQpe2lmKGIpe2lmKCFhKXtpZihudWxsPT09ZC5hbHRlcm5hdGUpcmV0dXJuO2Q9ZC5hbHRlcm5hdGV9dmFyIHA9Yy5sYXN0RWZmZWN0O251bGwhPT1wPyhwLm5leHRFZmZlY3Q9ZCxjLmxhc3RFZmZlY3Q9ZCk6Yy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9ZDtkLm5leHRFZmZlY3Q9bnVsbDtkLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBkKGEsZCl7aWYoIWIpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYyhhLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGUoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtpZihhKXJldHVybiBiPW9lKGIsYyxkKSxiLmluZGV4PTAsYi5zaWJsaW5nPW51bGwsYjtiLmV4cGlyYXRpb25UaW1lPWQ7Yi5lZmZlY3RUYWc9MDtiLmluZGV4PVxuMDtiLnNpYmxpbmc9bnVsbDtiLnBlbmRpbmdQcm9wcz1jO3JldHVybiBifWZ1bmN0aW9uIGcoYSxjLGQpe2EuaW5kZXg9ZDtpZighYilyZXR1cm4gYztkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhhLmVmZmVjdFRhZz0yLGMpOmQ7YS5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBrKGEpe2ImJm51bGw9PT1hLmFsdGVybmF0ZSYmKGEuZWZmZWN0VGFnPTIpO3JldHVybiBhfWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1yZShjLGEuaW50ZXJuYWxDb250ZXh0VGFnLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZihiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIHIoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIudHlwZT09PWMudHlwZSlyZXR1cm4gZD1mKGIsYy5wcm9wcyxkKSxkLnJlZj1YZShiLGMpLGRbXCJyZXR1cm5cIl09YSxkO2Q9cGUoYyxhLmludGVybmFsQ29udGV4dFRhZyxkKTtcbmQucmVmPVhlKGIsYyk7ZFtcInJldHVyblwiXT1hO3JldHVybiBkfWZ1bmN0aW9uIG4oYSxiLGMsZCl7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1zZShjLGEuaW50ZXJuYWxDb250ZXh0VGFnLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZihiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIHkoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDkhPT1iLnRhZylyZXR1cm4gYj10ZShjLGEuaW50ZXJuYWxDb250ZXh0VGFnLGQpLGIudHlwZT1jLnZhbHVlLGJbXCJyZXR1cm5cIl09YSxiO2I9ZihiLG51bGwsZCk7Yi50eXBlPWMudmFsdWU7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIHUoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPXVlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsXG5kKSxiW1wicmV0dXJuXCJdPWEsYjtiPWYoYixjLmNoaWxkcmVufHxbXSxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24geChhLGIsYyxkLGUpe2lmKG51bGw9PT1ifHwxMCE9PWIudGFnKXJldHVybiBiPXFlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsZCxlKSxiW1wicmV0dXJuXCJdPWEsYjtiPWYoYixjLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBGKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1yZShcIlwiK2IsYS5pbnRlcm5hbENvbnRleHRUYWcsYyksYltcInJldHVyblwiXT1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgU2U6aWYoYi50eXBlPT09VmUpcmV0dXJuIGI9cWUoYi5wcm9wcy5jaGlsZHJlbixhLmludGVybmFsQ29udGV4dFRhZyxjLGIua2V5KSxiW1wicmV0dXJuXCJdPWEsYjtjPXBlKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsYyk7XG5jLnJlZj1YZShudWxsLGIpO2NbXCJyZXR1cm5cIl09YTtyZXR1cm4gYztjYXNlIFRlOnJldHVybiBiPXNlKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsYyksYltcInJldHVyblwiXT1hLGI7Y2FzZSBVZTpyZXR1cm4gYz10ZShiLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMpLGMudHlwZT1iLnZhbHVlLGNbXCJyZXR1cm5cIl09YSxjO2Nhc2UgT2U6cmV0dXJuIGI9dWUoYixhLmludGVybmFsQ29udGV4dFRhZyxjKSxiW1wicmV0dXJuXCJdPWEsYn1pZihRZShiKXx8V2UoYikpcmV0dXJuIGI9cWUoYixhLmludGVybmFsQ29udGV4dFRhZyxjLG51bGwpLGJbXCJyZXR1cm5cIl09YSxiO1llKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBTZTpyZXR1cm4gYy5rZXk9PT1cbmU/Yy50eXBlPT09VmU/eChhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOnIoYSxiLGMsZCk6bnVsbDtjYXNlIFRlOnJldHVybiBjLmtleT09PWU/bihhLGIsYyxkKTpudWxsO2Nhc2UgVWU6cmV0dXJuIG51bGw9PT1lP3koYSxiLGMsZCk6bnVsbDtjYXNlIE9lOnJldHVybiBjLmtleT09PWU/dShhLGIsYyxkKTpudWxsfWlmKFFlKGMpfHxXZShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDp4KGEsYixjLGQsbnVsbCk7WWUoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBHKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFNlOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1WZT94KGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOlxucihiLGEsZCxlKTtjYXNlIFRlOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxuKGIsYSxkLGUpO2Nhc2UgVWU6cmV0dXJuIGE9YS5nZXQoYyl8fG51bGwseShiLGEsZCxlKTtjYXNlIE9lOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCx1KGIsYSxkLGUpfWlmKFFlKGQpfHxXZShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCx4KGIsYSxkLGUsbnVsbCk7WWUoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBUKGEsZix2LGspe2Zvcih2YXIgcD1udWxsLHo9bnVsbCxsPWYsaD1mPTAsdD1udWxsO251bGwhPT1sJiZoPHYubGVuZ3RoO2grKyl7bC5pbmRleD5oPyh0PWwsbD1udWxsKTp0PWwuc2libGluZzt2YXIgdz1MKGEsbCx2W2hdLGspO2lmKG51bGw9PT13KXtudWxsPT09bCYmKGw9dCk7YnJlYWt9YiYmbCYmbnVsbD09PXcuYWx0ZXJuYXRlJiZjKGEsbCk7Zj1nKHcsZixoKTtudWxsPT09ej9wPXc6ei5zaWJsaW5nPXc7ej13O1xubD10fWlmKGg9PT12Lmxlbmd0aClyZXR1cm4gZChhLGwpLHA7aWYobnVsbD09PWwpe2Zvcig7aDx2Lmxlbmd0aDtoKyspaWYobD1GKGEsdltoXSxrKSlmPWcobCxmLGgpLG51bGw9PT16P3A9bDp6LnNpYmxpbmc9bCx6PWw7cmV0dXJuIHB9Zm9yKGw9ZShhLGwpO2g8di5sZW5ndGg7aCsrKWlmKHQ9RyhsLGEsaCx2W2hdLGspKXtpZihiJiZudWxsIT09dC5hbHRlcm5hdGUpbFtcImRlbGV0ZVwiXShudWxsPT09dC5rZXk/aDp0LmtleSk7Zj1nKHQsZixoKTtudWxsPT09ej9wPXQ6ei5zaWJsaW5nPXQ7ej10fWImJmwuZm9yRWFjaChmdW5jdGlvbihiKXtyZXR1cm4gYyhhLGIpfSk7cmV0dXJuIHB9ZnVuY3Rpb24gSShhLGYsdixrKXt2YXIgcD1XZSh2KTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgcD9EKFwiMTUwXCIpOnZvaWQgMDt2PXAuY2FsbCh2KTtudWxsPT12P0QoXCIxNTFcIik6dm9pZCAwO2Zvcih2YXIgaD1wPW51bGwsbD1mLHo9Zj0wLHQ9bnVsbCx3PXYubmV4dCgpO251bGwhPT1sJiYhdy5kb25lO3orKyxcbnc9di5uZXh0KCkpe2wuaW5kZXg+ej8odD1sLGw9bnVsbCk6dD1sLnNpYmxpbmc7dmFyIG49TChhLGwsdy52YWx1ZSxrKTtpZihudWxsPT09bil7bHx8KGw9dCk7YnJlYWt9YiYmbCYmbnVsbD09PW4uYWx0ZXJuYXRlJiZjKGEsbCk7Zj1nKG4sZix6KTtudWxsPT09aD9wPW46aC5zaWJsaW5nPW47aD1uO2w9dH1pZih3LmRvbmUpcmV0dXJuIGQoYSxsKSxwO2lmKG51bGw9PT1sKXtmb3IoOyF3LmRvbmU7eisrLHc9di5uZXh0KCkpdz1GKGEsdy52YWx1ZSxrKSxudWxsIT09dyYmKGY9Zyh3LGYseiksbnVsbD09PWg/cD13Omguc2libGluZz13LGg9dyk7cmV0dXJuIHB9Zm9yKGw9ZShhLGwpOyF3LmRvbmU7eisrLHc9di5uZXh0KCkpaWYodz1HKGwsYSx6LHcudmFsdWUsayksbnVsbCE9PXcpe2lmKGImJm51bGwhPT13LmFsdGVybmF0ZSlsW1wiZGVsZXRlXCJdKG51bGw9PT13LmtleT96Oncua2V5KTtmPWcodyxmLHopO251bGw9PT1oP3A9dzpoLnNpYmxpbmc9dztoPXd9YiYmbC5mb3JFYWNoKGZ1bmN0aW9uKGIpe3JldHVybiBjKGEsXG5iKX0pO3JldHVybiBwfXJldHVybiBmdW5jdGlvbihhLGIsZSxnKXt2YXIgaD1cIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lO2lmKGgpc3dpdGNoKGUuJCR0eXBlb2Ype2Nhc2UgU2U6YTp7dmFyIHY9ZS5rZXk7Zm9yKGg9YjtudWxsIT09aDspe2lmKGgua2V5PT09dilpZigxMD09PWgudGFnP2UudHlwZT09PVZlOmgudHlwZT09PWUudHlwZSl7ZChhLGguc2libGluZyk7Yj1mKGgsZS50eXBlPT09VmU/ZS5wcm9wcy5jaGlsZHJlbjplLnByb3BzLGcpO2IucmVmPVhlKGgsZSk7YltcInJldHVyblwiXT1hO2E9YjticmVhayBhfWVsc2V7ZChhLGgpO2JyZWFrfWVsc2UgYyhhLGgpO2g9aC5zaWJsaW5nfWUudHlwZT09PVZlPyhlPXFlKGUucHJvcHMuY2hpbGRyZW4sYS5pbnRlcm5hbENvbnRleHRUYWcsZyxlLmtleSksZVtcInJldHVyblwiXT1hLGE9ZSk6KGc9cGUoZSxhLmludGVybmFsQ29udGV4dFRhZyxnKSxnLnJlZj1YZShiLGUpLGdbXCJyZXR1cm5cIl09YSxhPWcpfXJldHVybiBrKGEpO1xuY2FzZSBUZTphOntmb3IoaD1lLmtleTtudWxsIT09Yjspe2lmKGIua2V5PT09aClpZig3PT09Yi50YWcpe2QoYSxiLnNpYmxpbmcpO2U9ZihiLGUsZyk7ZVtcInJldHVyblwiXT1hO2E9ZTticmVhayBhfWVsc2V7ZChhLGIpO2JyZWFrfWVsc2UgYyhhLGIpO2I9Yi5zaWJsaW5nfWU9c2UoZSxhLmludGVybmFsQ29udGV4dFRhZyxnKTtlW1wicmV0dXJuXCJdPWE7YT1lfXJldHVybiBrKGEpO2Nhc2UgVWU6YTp7aWYobnVsbCE9PWIpaWYoOT09PWIudGFnKXtkKGEsYi5zaWJsaW5nKTtiPWYoYixudWxsLGcpO2IudHlwZT1lLnZhbHVlO2JbXCJyZXR1cm5cIl09YTthPWI7YnJlYWsgYX1lbHNlIGQoYSxiKTtiPXRlKGUsYS5pbnRlcm5hbENvbnRleHRUYWcsZyk7Yi50eXBlPWUudmFsdWU7YltcInJldHVyblwiXT1hO2E9Yn1yZXR1cm4gayhhKTtjYXNlIE9lOmE6e2ZvcihoPWUua2V5O251bGwhPT1iOyl7aWYoYi5rZXk9PT1oKWlmKDQ9PT1iLnRhZyYmYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWUuY29udGFpbmVySW5mbyYmXG5iLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWUuaW1wbGVtZW50YXRpb24pe2QoYSxiLnNpYmxpbmcpO2U9ZihiLGUuY2hpbGRyZW58fFtdLGcpO2VbXCJyZXR1cm5cIl09YTthPWU7YnJlYWsgYX1lbHNle2QoYSxiKTticmVha31lbHNlIGMoYSxiKTtiPWIuc2libGluZ31lPXVlKGUsYS5pbnRlcm5hbENvbnRleHRUYWcsZyk7ZVtcInJldHVyblwiXT1hO2E9ZX1yZXR1cm4gayhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGV8fFwibnVtYmVyXCI9PT10eXBlb2YgZSlyZXR1cm4gZT1cIlwiK2UsbnVsbCE9PWImJjY9PT1iLnRhZz8oZChhLGIuc2libGluZyksZT1mKGIsZSxnKSk6KGQoYSxiKSxlPXJlKGUsYS5pbnRlcm5hbENvbnRleHRUYWcsZykpLGVbXCJyZXR1cm5cIl09YSxhPWUsayhhKTtpZihRZShlKSlyZXR1cm4gVChhLGIsZSxnKTtpZihXZShlKSlyZXR1cm4gSShhLGIsZSxnKTtoJiZZZShhLGUpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZSlzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDE6ZT1cbmEudHlwZSxEKFwiMTUyXCIsZS5kaXNwbGF5TmFtZXx8ZS5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gZChhLGIpfX12YXIgJGU9WmUoITAsITApLGFmPVplKCExLCEwKSxiZj1aZSghMSwhMSk7XG5mdW5jdGlvbiBjZihhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSxiLGMpe2coYSxiLGMsYi5leHBpcmF0aW9uVGltZSl9ZnVuY3Rpb24gZyhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP2JmKGIsYi5jaGlsZCxjLGQpOmEuY2hpbGQ9PT1iLmNoaWxkPyRlKGIsYi5jaGlsZCxjLGQpOmFmKGIsYi5jaGlsZCxjLGQpfWZ1bmN0aW9uIGsoYSxiKXt2YXIgYz1iLnJlZjtudWxsPT09Y3x8YSYmYS5yZWY9PT1jfHwoYi5lZmZlY3RUYWd8PTEyOCl9ZnVuY3Rpb24gaChhLGIsYyxkKXtrKGEsYik7aWYoIWMpcmV0dXJuIGQmJm5lKGIsITEpLG4oYSxiKTtjPWIuc3RhdGVOb2RlO2VkLmN1cnJlbnQ9Yjt2YXIgZT1jLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO2YoYSxiLGUpO2IubWVtb2l6ZWRTdGF0ZT1jLnN0YXRlO2IubWVtb2l6ZWRQcm9wcz1jLnByb3BzO2QmJm5lKGIsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHIoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9rZShhLFxuYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJmtlKGEsYi5jb250ZXh0LCExKTtHKGEsYi5jb250YWluZXJJbmZvKX1mdW5jdGlvbiBuKGEsYil7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP0QoXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7dmFyIGM9b2UoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGNbXCJyZXR1cm5cIl09YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1vZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGNbXCJyZXR1cm5cIl09YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiB5KGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDM6cihiKTticmVhaztjYXNlIDI6bWUoYik7YnJlYWs7Y2FzZSA0OkcoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKX1yZXR1cm4gbnVsbH12YXIgdT1cbmEuc2hvdWxkU2V0VGV4dENvbnRlbnQseD1hLnVzZVN5bmNTY2hlZHVsaW5nLEY9YS5zaG91bGREZXByaW9yaXRpemVTdWJ0cmVlLEw9Yi5wdXNoSG9zdENvbnRleHQsRz1iLnB1c2hIb3N0Q29udGFpbmVyLFQ9Yy5lbnRlckh5ZHJhdGlvblN0YXRlLEk9Yy5yZXNldEh5ZHJhdGlvblN0YXRlLHo9Yy50cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTthPU5lKGQsZSxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRQcm9wcz1ifSxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRTdGF0ZT1ifSk7dmFyIHA9YS5hZG9wdENsYXNzSW5zdGFuY2Usdj1hLmNvbnN0cnVjdENsYXNzSW5zdGFuY2UsdD1hLm1vdW50Q2xhc3NJbnN0YW5jZSxLYj1hLnVwZGF0ZUNsYXNzSW5zdGFuY2U7cmV0dXJue2JlZ2luV29yazpmdW5jdGlvbihhLGIsYyl7aWYoMD09PWIuZXhwaXJhdGlvblRpbWV8fGIuZXhwaXJhdGlvblRpbWU+YylyZXR1cm4geShhLGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAwOm51bGwhPT1hP1xuRChcIjE1NVwiKTp2b2lkIDA7dmFyIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZz1nZShiKTtnPWllKGIsZyk7ZD1kKGUsZyk7Yi5lZmZlY3RUYWd8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQucmVuZGVyPyhiLnRhZz0yLGU9bWUoYikscChiLGQpLHQoYixjKSxiPWgoYSxiLCEwLGUpKTooYi50YWc9MSxmKGEsYixkKSxiLm1lbW9pemVkUHJvcHM9ZSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgMTphOntlPWIudHlwZTtjPWIucGVuZGluZ1Byb3BzO2Q9Yi5tZW1vaXplZFByb3BzO2lmKFguY3VycmVudCludWxsPT09YyYmKGM9ZCk7ZWxzZSBpZihudWxsPT09Y3x8ZD09PWMpe2I9bihhLGIpO2JyZWFrIGF9ZD1nZShiKTtkPWllKGIsZCk7ZT1lKGMsZCk7Yi5lZmZlY3RUYWd8PTE7ZihhLGIsZSk7Yi5tZW1vaXplZFByb3BzPWM7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgMjpyZXR1cm4gZT1tZShiKSxkPXZvaWQgMCxudWxsPT09XG5hP2Iuc3RhdGVOb2RlP0QoXCIxNTNcIik6KHYoYixiLnBlbmRpbmdQcm9wcyksdChiLGMpLGQ9ITApOmQ9S2IoYSxiLGMpLGgoYSxiLGQsZSk7Y2FzZSAzOnJldHVybiByKGIpLGU9Yi51cGRhdGVRdWV1ZSxudWxsIT09ZT8oZD1iLm1lbW9pemVkU3RhdGUsZT1MZShhLGIsZSxudWxsLG51bGwsYyksZD09PWU/KEkoKSxiPW4oYSxiKSk6KGQ9ZS5lbGVtZW50LGc9Yi5zdGF0ZU5vZGUsKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmcuaHlkcmF0ZSYmVChiKT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1iZihiLGIuY2hpbGQsZCxjKSk6KEkoKSxmKGEsYixkKSksYi5tZW1vaXplZFN0YXRlPWUsYj1iLmNoaWxkKSk6KEkoKSxiPW4oYSxiKSksYjtjYXNlIDU6TChiKTtudWxsPT09YSYmeihiKTtlPWIudHlwZTt2YXIgbD1iLm1lbW9pemVkUHJvcHM7ZD1iLnBlbmRpbmdQcm9wcztudWxsPT09ZCYmKGQ9bCxudWxsPT09ZD9EKFwiMTU0XCIpOnZvaWQgMCk7Zz1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6XG5udWxsO1guY3VycmVudHx8bnVsbCE9PWQmJmwhPT1kPyhsPWQuY2hpbGRyZW4sdShlLGQpP2w9bnVsbDpnJiZ1KGUsZykmJihiLmVmZmVjdFRhZ3w9MTYpLGsoYSxiKSwyMTQ3NDgzNjQ3IT09YyYmIXgmJkYoZSxkKT8oYi5leHBpcmF0aW9uVGltZT0yMTQ3NDgzNjQ3LGI9bnVsbCk6KGYoYSxiLGwpLGIubWVtb2l6ZWRQcm9wcz1kLGI9Yi5jaGlsZCkpOmI9bihhLGIpO3JldHVybiBiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJnooYiksYT1iLnBlbmRpbmdQcm9wcyxudWxsPT09YSYmKGE9Yi5tZW1vaXplZFByb3BzKSxiLm1lbW9pemVkUHJvcHM9YSxudWxsO2Nhc2UgODpiLnRhZz03O2Nhc2UgNzplPWIucGVuZGluZ1Byb3BzO2lmKFguY3VycmVudCludWxsPT09ZSYmKGU9YSYmYS5tZW1vaXplZFByb3BzLG51bGw9PT1lP0QoXCIxNTRcIik6dm9pZCAwKTtlbHNlIGlmKG51bGw9PT1lfHxiLm1lbW9pemVkUHJvcHM9PT1lKWU9Yi5tZW1vaXplZFByb3BzO2Q9ZS5jaGlsZHJlbjtiLnN0YXRlTm9kZT1cbm51bGw9PT1hP2JmKGIsYi5zdGF0ZU5vZGUsZCxjKTphLmNoaWxkPT09Yi5jaGlsZD8kZShiLGIuc3RhdGVOb2RlLGQsYyk6YWYoYixiLnN0YXRlTm9kZSxkLGMpO2IubWVtb2l6ZWRQcm9wcz1lO3JldHVybiBiLnN0YXRlTm9kZTtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSA0OmE6e0coYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtlPWIucGVuZGluZ1Byb3BzO2lmKFguY3VycmVudCludWxsPT09ZSYmKGU9YSYmYS5tZW1vaXplZFByb3BzLG51bGw9PWU/RChcIjE1NFwiKTp2b2lkIDApO2Vsc2UgaWYobnVsbD09PWV8fGIubWVtb2l6ZWRQcm9wcz09PWUpe2I9bihhLGIpO2JyZWFrIGF9bnVsbD09PWE/Yi5jaGlsZD1hZihiLGIuY2hpbGQsZSxjKTpmKGEsYixlKTtiLm1lbW9pemVkUHJvcHM9ZTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSAxMDphOntjPWIucGVuZGluZ1Byb3BzO2lmKFguY3VycmVudCludWxsPT09YyYmKGM9Yi5tZW1vaXplZFByb3BzKTtlbHNlIGlmKG51bGw9PT1jfHxcbmIubWVtb2l6ZWRQcm9wcz09PWMpe2I9bihhLGIpO2JyZWFrIGF9ZihhLGIsYyk7Yi5tZW1vaXplZFByb3BzPWM7Yj1iLmNoaWxkfXJldHVybiBiO2RlZmF1bHQ6RChcIjE1NlwiKX19LGJlZ2luRmFpbGVkV29yazpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIudGFnKXtjYXNlIDI6bWUoYik7YnJlYWs7Y2FzZSAzOnIoYik7YnJlYWs7ZGVmYXVsdDpEKFwiMTU3XCIpfWIuZWZmZWN0VGFnfD02NDtudWxsPT09YT9iLmNoaWxkPW51bGw6Yi5jaGlsZCE9PWEuY2hpbGQmJihiLmNoaWxkPWEuY2hpbGQpO2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpcmV0dXJuIHkoYSxiKTtiLmZpcnN0RWZmZWN0PW51bGw7Yi5sYXN0RWZmZWN0PW51bGw7ZyhhLGIsbnVsbCxjKTsyPT09Yi50YWcmJihhPWIuc3RhdGVOb2RlLGIubWVtb2l6ZWRQcm9wcz1hLnByb3BzLGIubWVtb2l6ZWRTdGF0ZT1hLnN0YXRlKTtyZXR1cm4gYi5jaGlsZH19fVxuZnVuY3Rpb24gZGYoYSxiLGMpe2Z1bmN0aW9uIGQoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGU9YS5jcmVhdGVJbnN0YW5jZSxmPWEuY3JlYXRlVGV4dEluc3RhbmNlLGc9YS5hcHBlbmRJbml0aWFsQ2hpbGQsaz1hLmZpbmFsaXplSW5pdGlhbENoaWxkcmVuLGg9YS5wcmVwYXJlVXBkYXRlLHI9YS5wZXJzaXN0ZW5jZSxuPWIuZ2V0Um9vdEhvc3RDb250YWluZXIseT1iLnBvcEhvc3RDb250ZXh0LHU9Yi5nZXRIb3N0Q29udGV4dCx4PWIucG9wSG9zdENvbnRhaW5lcixGPWMucHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSxMPWMucHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UsRz1jLnBvcEh5ZHJhdGlvblN0YXRlLFQ9dm9pZCAwLEk9dm9pZCAwLHo9dm9pZCAwO2EubXV0YXRpb24/KFQ9ZnVuY3Rpb24oKXt9LEk9ZnVuY3Rpb24oYSxiLGMpeyhiLnVwZGF0ZVF1ZXVlPWMpJiZkKGIpfSx6PWZ1bmN0aW9uKGEsYixjLGUpe2MhPT1lJiZkKGIpfSk6cj9EKFwiMjM1XCIpOkQoXCIyMzZcIik7XG5yZXR1cm57Y29tcGxldGVXb3JrOmZ1bmN0aW9uKGEsYixjKXt2YXIgcD1iLnBlbmRpbmdQcm9wcztpZihudWxsPT09cClwPWIubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDIxNDc0ODM2NDchPT1iLmV4cGlyYXRpb25UaW1lfHwyMTQ3NDgzNjQ3PT09YyliLnBlbmRpbmdQcm9wcz1udWxsO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBudWxsO2Nhc2UgMjpyZXR1cm4gamUoYiksbnVsbDtjYXNlIDM6eChiKTtWKFgsYik7VihlZSxiKTtwPWIuc3RhdGVOb2RlO3AucGVuZGluZ0NvbnRleHQmJihwLmNvbnRleHQ9cC5wZW5kaW5nQ29udGV4dCxwLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClHKGIpLGIuZWZmZWN0VGFnJj0tMztUKGIpO3JldHVybiBudWxsO2Nhc2UgNTp5KGIpO2M9bigpO3ZhciB2PWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBsPWEubWVtb2l6ZWRQcm9wcyx0PWIuc3RhdGVOb2RlLHI9dSgpO3Q9XG5oKHQsdixsLHAsYyxyKTtJKGEsYix0LHYsbCxwLGMpO2EucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNle2lmKCFwKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXUoKTtpZihHKGIpKUYoYixjLGEpJiZkKGIpO2Vsc2V7YT1lKHYscCxjLGEsYik7YTpmb3IobD1iLmNoaWxkO251bGwhPT1sOyl7aWYoNT09PWwudGFnfHw2PT09bC50YWcpZyhhLGwuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1sLnRhZyYmbnVsbCE9PWwuY2hpbGQpe2wuY2hpbGRbXCJyZXR1cm5cIl09bDtsPWwuY2hpbGQ7Y29udGludWV9aWYobD09PWIpYnJlYWs7Zm9yKDtudWxsPT09bC5zaWJsaW5nOyl7aWYobnVsbD09PWxbXCJyZXR1cm5cIl18fGxbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7bD1sW1wicmV0dXJuXCJdfWwuc2libGluZ1tcInJldHVyblwiXT1sW1wicmV0dXJuXCJdO2w9bC5zaWJsaW5nfWsoYSx2LHAsYykmJmQoYik7Yi5zdGF0ZU5vZGU9YX1udWxsIT09Yi5yZWYmJlxuKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSl6KGEsYixhLm1lbW9pemVkUHJvcHMscCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIHApcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9bigpO2M9dSgpO0coYik/TChiKSYmZChiKTpiLnN0YXRlTm9kZT1mKHAsYSxjLGIpfXJldHVybiBudWxsO2Nhc2UgNzoocD1iLm1lbW9pemVkUHJvcHMpP3ZvaWQgMDpEKFwiMTY1XCIpO2IudGFnPTg7dj1bXTthOmZvcigobD1iLnN0YXRlTm9kZSkmJihsW1wicmV0dXJuXCJdPWIpO251bGwhPT1sOyl7aWYoNT09PWwudGFnfHw2PT09bC50YWd8fDQ9PT1sLnRhZylEKFwiMjQ3XCIpO2Vsc2UgaWYoOT09PWwudGFnKXYucHVzaChsLnR5cGUpO2Vsc2UgaWYobnVsbCE9PWwuY2hpbGQpe2wuY2hpbGRbXCJyZXR1cm5cIl09bDtsPWwuY2hpbGQ7Y29udGludWV9Zm9yKDtudWxsPT09bC5zaWJsaW5nOyl7aWYobnVsbD09PVxubFtcInJldHVyblwiXXx8bFtcInJldHVyblwiXT09PWIpYnJlYWsgYTtsPWxbXCJyZXR1cm5cIl19bC5zaWJsaW5nW1wicmV0dXJuXCJdPWxbXCJyZXR1cm5cIl07bD1sLnNpYmxpbmd9bD1wLmhhbmRsZXI7cD1sKHAucHJvcHMsdik7Yi5jaGlsZD0kZShiLG51bGwhPT1hP2EuY2hpbGQ6bnVsbCxwLGMpO3JldHVybiBiLmNoaWxkO2Nhc2UgODpyZXR1cm4gYi50YWc9NyxudWxsO2Nhc2UgOTpyZXR1cm4gbnVsbDtjYXNlIDEwOnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4geChiKSxUKGIpLG51bGw7Y2FzZSAwOkQoXCIxNjdcIik7ZGVmYXVsdDpEKFwiMTU2XCIpfX19fVxuZnVuY3Rpb24gZWYoYSxiKXtmdW5jdGlvbiBjKGEpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKXRyeXtjKG51bGwpfWNhdGNoKHYpe2IoYSx2KX19ZnVuY3Rpb24gZChhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQWUmJkFlKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAyOmMoYSk7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2QucHJvcHM9YS5tZW1vaXplZFByb3BzLGQuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGQuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh2KXtiKGEsdil9YnJlYWs7Y2FzZSA1OmMoYSk7YnJlYWs7Y2FzZSA3OmUoYS5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgNDpoJiZnKGEpfX1mdW5jdGlvbiBlKGEpe2Zvcih2YXIgYj1hOzspaWYoZChiKSxudWxsPT09Yi5jaGlsZHx8aCYmND09PWIudGFnKXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8XG5iW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfWVsc2UgYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZH1mdW5jdGlvbiBmKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfWZ1bmN0aW9uIGcoYSl7Zm9yKHZhciBiPWEsYz0hMSxmPXZvaWQgMCxnPXZvaWQgMDs7KXtpZighYyl7Yz1iW1wicmV0dXJuXCJdO2E6Zm9yKDs7KXtudWxsPT09Yz9EKFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpmPWMuc3RhdGVOb2RlO2c9ITE7YnJlYWsgYTtjYXNlIDM6Zj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYTtjYXNlIDQ6Zj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyllKGIpLGc/SShmLGIuc3RhdGVOb2RlKTpUKGYsYi5zdGF0ZU5vZGUpO1xuZWxzZSBpZig0PT09Yi50YWc/Zj1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOmQoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGRbXCJyZXR1cm5cIl09YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl07ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXZhciBrPWEuZ2V0UHVibGljSW5zdGFuY2UsaD1hLm11dGF0aW9uO2E9YS5wZXJzaXN0ZW5jZTtofHwoYT9EKFwiMjM1XCIpOkQoXCIyMzZcIikpO3ZhciByPWguY29tbWl0TW91bnQsbj1oLmNvbW1pdFVwZGF0ZSx5PWgucmVzZXRUZXh0Q29udGVudCx1PWguY29tbWl0VGV4dFVwZGF0ZSx4PWguYXBwZW5kQ2hpbGQsRj1oLmFwcGVuZENoaWxkVG9Db250YWluZXIsTD1oLmluc2VydEJlZm9yZSxHPWguaW5zZXJ0SW5Db250YWluZXJCZWZvcmUsXG5UPWgucmVtb3ZlQ2hpbGQsST1oLnJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjtyZXR1cm57Y29tbWl0UmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXt5KGEuc3RhdGVOb2RlKX0sY29tbWl0UGxhY2VtZW50OmZ1bmN0aW9uKGEpe2E6e2Zvcih2YXIgYj1hW1wicmV0dXJuXCJdO251bGwhPT1iOyl7aWYoZihiKSl7dmFyIGM9YjticmVhayBhfWI9YltcInJldHVyblwiXX1EKFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6RChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKHkoYiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWNbXCJyZXR1cm5cIl18fGYoY1tcInJldHVyblwiXSkpe2M9XG5udWxsO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWMuc2libGluZ1tcInJldHVyblwiXT1jW1wicmV0dXJuXCJdO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkW1wicmV0dXJuXCJdPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpYz9kP0coYixlLnN0YXRlTm9kZSxjKTpMKGIsZS5zdGF0ZU5vZGUsYyk6ZD9GKGIsZS5zdGF0ZU5vZGUpOngoYixlLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkW1wicmV0dXJuXCJdPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lW1wicmV0dXJuXCJdfHxlW1wicmV0dXJuXCJdPT09XG5hKXJldHVybjtlPWVbXCJyZXR1cm5cIl19ZS5zaWJsaW5nW1wicmV0dXJuXCJdPWVbXCJyZXR1cm5cIl07ZT1lLnNpYmxpbmd9fSxjb21taXREZWxldGlvbjpmdW5jdGlvbihhKXtnKGEpO2FbXCJyZXR1cm5cIl09bnVsbDthLmNoaWxkPW51bGw7YS5hbHRlcm5hdGUmJihhLmFsdGVybmF0ZS5jaGlsZD1udWxsLGEuYWx0ZXJuYXRlW1wicmV0dXJuXCJdPW51bGwpfSxjb21taXRXb3JrOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZuKGMsZixlLGEsZCxiKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjJcIik6dm9pZCAwO2M9Yi5tZW1vaXplZFByb3BzO3UoYi5zdGF0ZU5vZGUsbnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOlxuYyxjKTticmVhaztjYXNlIDM6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0TGlmZUN5Y2xlczpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOnZhciBjPWIuc3RhdGVOb2RlO2lmKGIuZWZmZWN0VGFnJjQpaWYobnVsbD09PWEpYy5wcm9wcz1iLm1lbW9pemVkUHJvcHMsYy5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsYy5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9YS5tZW1vaXplZFByb3BzO2E9YS5tZW1vaXplZFN0YXRlO2MucHJvcHM9Yi5tZW1vaXplZFByb3BzO2Muc3RhdGU9Yi5tZW1vaXplZFN0YXRlO2MuY29tcG9uZW50RGlkVXBkYXRlKGQsYSl9Yj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZNZShiLGMpO2JyZWFrO2Nhc2UgMzpjPWIudXBkYXRlUXVldWU7bnVsbCE9PWMmJk1lKGMsbnVsbCE9PWIuY2hpbGQ/Yi5jaGlsZC5zdGF0ZU5vZGU6bnVsbCk7YnJlYWs7Y2FzZSA1OmM9Yi5zdGF0ZU5vZGU7bnVsbD09PWEmJmIuZWZmZWN0VGFnJjQmJnIoYyxcbmIudHlwZSxiLm1lbW9pemVkUHJvcHMsYik7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRBdHRhY2hSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmIoayhjKSk7YnJlYWs7ZGVmYXVsdDpiKGMpfX19LGNvbW1pdERldGFjaFJlZjpmdW5jdGlvbihhKXthPWEucmVmO251bGwhPT1hJiZhKG51bGwpfX19dmFyIGZmPXt9O1xuZnVuY3Rpb24gZ2YoYSl7ZnVuY3Rpb24gYihhKXthPT09ZmY/RChcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9dmFyIGM9YS5nZXRDaGlsZEhvc3RDb250ZXh0LGQ9YS5nZXRSb290SG9zdENvbnRleHQsZT17Y3VycmVudDpmZn0sZj17Y3VycmVudDpmZn0sZz17Y3VycmVudDpmZn07cmV0dXJue2dldEhvc3RDb250ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGIoZS5jdXJyZW50KX0sZ2V0Um9vdEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtyZXR1cm4gYihnLmN1cnJlbnQpfSxwb3BIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEpe1YoZSxhKTtWKGYsYSk7VihnLGEpfSxwb3BIb3N0Q29udGV4dDpmdW5jdGlvbihhKXtmLmN1cnJlbnQ9PT1hJiYoVihlLGEpLFYoZixhKSl9LHB1c2hIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEsYil7VyhnLGIsYSk7Yj1kKGIpO1coZixhLGEpO1coZSxiLGEpfSxwdXNoSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGQ9YihnLmN1cnJlbnQpLGs9YihlLmN1cnJlbnQpO1xuZD1jKGssYS50eXBlLGQpO2shPT1kJiYoVyhmLGEsYSksVyhlLGQsYSkpfSxyZXNldEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtlLmN1cnJlbnQ9ZmY7Zy5jdXJyZW50PWZmfX19XG5mdW5jdGlvbiBoZihhKXtmdW5jdGlvbiBiKGEsYil7dmFyIGM9bmV3IFkoNSxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2NbXCJyZXR1cm5cIl09YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gYyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBiPWYoYixhLnR5cGUsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9ZyhiLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZChhKXtmb3IoYT1hW1wicmV0dXJuXCJdO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hW1wicmV0dXJuXCJdO3k9YX12YXIgZT1hLnNob3VsZFNldFRleHRDb250ZW50O1xuYT1hLmh5ZHJhdGlvbjtpZighYSlyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7fSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbigpe0QoXCIxNzVcIil9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7RChcIjE3NlwiKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX19O3ZhciBmPWEuY2FuSHlkcmF0ZUluc3RhbmNlLGc9YS5jYW5IeWRyYXRlVGV4dEluc3RhbmNlLGs9YS5nZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcsaD1hLmdldEZpcnN0SHlkcmF0YWJsZUNoaWxkLHI9YS5oeWRyYXRlSW5zdGFuY2Usbj1hLmh5ZHJhdGVUZXh0SW5zdGFuY2UseT1udWxsLHU9bnVsbCx4PSExO3JldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe3U9XG5oKGEuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3k9YTtyZXR1cm4geD0hMH0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3U9eT1udWxsO3g9ITF9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKGEpe2lmKHgpe3ZhciBkPXU7aWYoZCl7aWYoIWMoYSxkKSl7ZD1rKGQpO2lmKCFkfHwhYyhhLGQpKXthLmVmZmVjdFRhZ3w9Mjt4PSExO3k9YTtyZXR1cm59Yih5LHUpfXk9YTt1PWgoZCl9ZWxzZSBhLmVmZmVjdFRhZ3w9Mix4PSExLHk9YX19LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2I9cihhLnN0YXRlTm9kZSxhLnR5cGUsYS5tZW1vaXplZFByb3BzLGIsYyxhKTthLnVwZGF0ZVF1ZXVlPWI7cmV0dXJuIG51bGwhPT1iPyEwOiExfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gbihhLnN0YXRlTm9kZSxhLm1lbW9pemVkUHJvcHMsYSl9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe2lmKGEhPT1cbnkpcmV0dXJuITE7aWYoIXgpcmV0dXJuIGQoYSkseD0hMCwhMTt2YXIgYz1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWMmJlwiYm9keVwiIT09YyYmIWUoYyxhLm1lbW9pemVkUHJvcHMpKWZvcihjPXU7YzspYihhLGMpLGM9ayhjKTtkKGEpO3U9eT9rKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfX19XG5mdW5jdGlvbiBqZihhKXtmdW5jdGlvbiBiKGEpe0xiPW1hPSEwO3ZhciBiPWEuc3RhdGVOb2RlO2IuY3VycmVudD09PWE/RChcIjE3N1wiKTp2b2lkIDA7Yi5pc1JlYWR5Rm9yQ29tbWl0PSExO2VkLmN1cnJlbnQ9bnVsbDtpZigxPGEuZWZmZWN0VGFnKWlmKG51bGwhPT1hLmxhc3RFZmZlY3Qpe2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE7dmFyIGM9YS5maXJzdEVmZmVjdH1lbHNlIGM9YTtlbHNlIGM9YS5maXJzdEVmZmVjdDt2ZygpO2ZvcihxPWM7bnVsbCE9PXE7KXt2YXIgZD0hMSxlPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09cTspe3ZhciBmPXEuZWZmZWN0VGFnO2YmMTYmJndnKHEpO2lmKGYmMTI4KXt2YXIgZz1xLmFsdGVybmF0ZTtudWxsIT09ZyYmeGcoZyl9c3dpdGNoKGYmLTI0Mil7Y2FzZSAyOkhlKHEpO3EuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6SGUocSk7cS5lZmZlY3RUYWcmPS0zO0llKHEuYWx0ZXJuYXRlLHEpO2JyZWFrO2Nhc2UgNDpJZShxLmFsdGVybmF0ZSxcbnEpO2JyZWFrO2Nhc2UgODpMYz0hMCx5ZyhxKSxMYz0hMX1xPXEubmV4dEVmZmVjdH19Y2F0Y2goTWMpe2Q9ITAsZT1NY31kJiYobnVsbD09PXE/RChcIjE3OFwiKTp2b2lkIDAsayhxLGUpLG51bGwhPT1xJiYocT1xLm5leHRFZmZlY3QpKX16ZygpO2IuY3VycmVudD1hO2ZvcihxPWM7bnVsbCE9PXE7KXtjPSExO2Q9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1xOyl7dmFyIGg9cS5lZmZlY3RUYWc7aCYzNiYmQWcocS5hbHRlcm5hdGUscSk7aCYxMjgmJkJnKHEpO2lmKGgmNjQpc3dpdGNoKGU9cSxmPXZvaWQgMCxudWxsIT09UCYmKGY9UC5nZXQoZSksUFtcImRlbGV0ZVwiXShlKSxudWxsPT1mJiZudWxsIT09ZS5hbHRlcm5hdGUmJihlPWUuYWx0ZXJuYXRlLGY9UC5nZXQoZSksUFtcImRlbGV0ZVwiXShlKSkpLG51bGw9PWY/RChcIjE4NFwiKTp2b2lkIDAsZS50YWcpe2Nhc2UgMjplLnN0YXRlTm9kZS5jb21wb25lbnREaWRDYXRjaChmLmVycm9yLHtjb21wb25lbnRTdGFjazpmLmNvbXBvbmVudFN0YWNrfSk7XG5icmVhaztjYXNlIDM6bnVsbD09PWJhJiYoYmE9Zi5lcnJvcik7YnJlYWs7ZGVmYXVsdDpEKFwiMTU3XCIpfXZhciBGYT1xLm5leHRFZmZlY3Q7cS5uZXh0RWZmZWN0PW51bGw7cT1GYX19Y2F0Y2goTWMpe2M9ITAsZD1NY31jJiYobnVsbD09PXE/RChcIjE3OFwiKTp2b2lkIDAsayhxLGQpLG51bGwhPT1xJiYocT1xLm5leHRFZmZlY3QpKX1tYT1MYj0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgemUmJnplKGEuc3RhdGVOb2RlKTtmYSYmKGZhLmZvckVhY2goRiksZmE9bnVsbCk7bnVsbCE9PWJhJiYoYT1iYSxiYT1udWxsLHYoYSkpO2I9Yi5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzA9PT1iJiYobmE9UD1udWxsKTtyZXR1cm4gYn1mdW5jdGlvbiBjKGEpe2Zvcig7Oyl7dmFyIGI9b2coYS5hbHRlcm5hdGUsYSxKKSxjPWFbXCJyZXR1cm5cIl0sZD1hLnNpYmxpbmc7dmFyIGU9YTtpZigyMTQ3NDgzNjQ3PT09Snx8MjE0NzQ4MzY0NyE9PWUuZXhwaXJhdGlvblRpbWUpe2lmKDIhPT1lLnRhZyYmMyE9PVxuZS50YWcpdmFyIGY9MDtlbHNlIGY9ZS51cGRhdGVRdWV1ZSxmPW51bGw9PT1mPzA6Zi5leHBpcmF0aW9uVGltZTtmb3IodmFyIGc9ZS5jaGlsZDtudWxsIT09ZzspMCE9PWcuZXhwaXJhdGlvblRpbWUmJigwPT09Znx8Zj5nLmV4cGlyYXRpb25UaW1lKSYmKGY9Zy5leHBpcmF0aW9uVGltZSksZz1nLnNpYmxpbmc7ZS5leHBpcmF0aW9uVGltZT1mfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1jJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKTtpZihudWxsIT09ZClyZXR1cm4gZDtcbmlmKG51bGwhPT1jKWE9YztlbHNle2Euc3RhdGVOb2RlLmlzUmVhZHlGb3JDb21taXQ9ITA7YnJlYWt9fXJldHVybiBudWxsfWZ1bmN0aW9uIGQoYSl7dmFyIGI9dyhhLmFsdGVybmF0ZSxhLEopO251bGw9PT1iJiYoYj1jKGEpKTtlZC5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZShhKXt2YXIgYj1uZyhhLmFsdGVybmF0ZSxhLEopO251bGw9PT1iJiYoYj1jKGEpKTtlZC5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZihhKXtpZihudWxsIT09UCl7aWYoISgwPT09Snx8Sj5hKSlpZihKPD1OYylmb3IoO251bGwhPT1FOylFPWgoRSk/ZShFKTpkKEUpO2Vsc2UgZm9yKDtudWxsIT09RSYmIXAoKTspRT1oKEUpP2UoRSk6ZChFKX1lbHNlIGlmKCEoMD09PUp8fEo+YSkpaWYoSjw9TmMpZm9yKDtudWxsIT09RTspRT1kKEUpO2Vsc2UgZm9yKDtudWxsIT09RSYmIXAoKTspRT1kKEUpfWZ1bmN0aW9uIGcoYSxiKXttYT9EKFwiMjQzXCIpOnZvaWQgMDttYT0hMDthLmlzUmVhZHlGb3JDb21taXQ9XG4hMTtpZihhIT09ZWJ8fGIhPT1KfHxudWxsPT09RSl7Zm9yKDstMTxkZTspY2VbZGVdPW51bGwsZGUtLTtmZT1DO2VlLmN1cnJlbnQ9QztYLmN1cnJlbnQ9ITE7bWcoKTtlYj1hO0o9YjtFPW9lKGViLmN1cnJlbnQsbnVsbCxiKX12YXIgYz0hMSxkPW51bGw7dHJ5e2YoYil9Y2F0Y2goS2Mpe2M9ITAsZD1LY31mb3IoO2M7KXtpZihmYil7YmE9ZDticmVha312YXIgZz1FO2lmKG51bGw9PT1nKWZiPSEwO2Vsc2V7dmFyIGg9ayhnLGQpO251bGw9PT1oP0QoXCIxODNcIik6dm9pZCAwO2lmKCFmYil7dHJ5e2M9aDtkPWI7Zm9yKGg9YztudWxsIT09Zzspe3N3aXRjaChnLnRhZyl7Y2FzZSAyOmplKGcpO2JyZWFrO2Nhc2UgNTpsKGcpO2JyZWFrO2Nhc2UgMzpGZShnKTticmVhaztjYXNlIDQ6RmUoZyl9aWYoZz09PWh8fGcuYWx0ZXJuYXRlPT09aClicmVhaztnPWdbXCJyZXR1cm5cIl19RT1lKGMpO2YoZCl9Y2F0Y2goS2Mpe2M9ITA7ZD1LYztjb250aW51ZX1icmVha319fWI9YmE7ZmI9bWE9ITE7XG5iYT1udWxsO251bGwhPT1iJiZ2KGIpO3JldHVybiBhLmlzUmVhZHlGb3JDb21taXQ/YS5jdXJyZW50LmFsdGVybmF0ZTpudWxsfWZ1bmN0aW9uIGsoYSxiKXt2YXIgYz1lZC5jdXJyZW50PW51bGwsZD0hMSxlPSExLGY9bnVsbDtpZigzPT09YS50YWcpYz1hLHIoYSkmJihmYj0hMCk7ZWxzZSBmb3IodmFyIGc9YVtcInJldHVyblwiXTtudWxsIT09ZyYmbnVsbD09PWM7KXsyPT09Zy50YWc/XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuc3RhdGVOb2RlLmNvbXBvbmVudERpZENhdGNoJiYoZD0hMCxmPWZkKGcpLGM9ZyxlPSEwKTozPT09Zy50YWcmJihjPWcpO2lmKHIoZykpe2lmKExjfHxudWxsIT09ZmEmJihmYS5oYXMoZyl8fG51bGwhPT1nLmFsdGVybmF0ZSYmZmEuaGFzKGcuYWx0ZXJuYXRlKSkpcmV0dXJuIG51bGw7Yz1udWxsO2U9ITF9Zz1nW1wicmV0dXJuXCJdfWlmKG51bGwhPT1jKXtudWxsPT09bmEmJihuYT1uZXcgU2V0KTtuYS5hZGQoYyk7dmFyIGg9XCJcIjtnPWE7ZG97YTpzd2l0Y2goZy50YWcpe2Nhc2UgMDpjYXNlIDE6Y2FzZSAyOmNhc2UgNTp2YXIgaz1cbmcuX2RlYnVnT3duZXIsbD1nLl9kZWJ1Z1NvdXJjZTt2YXIgRmE9ZmQoZyk7dmFyIG49bnVsbDtrJiYobj1mZChrKSk7az1sO0ZhPVwiXFxuICAgIGluIFwiKyhGYXx8XCJVbmtub3duXCIpKyhrP1wiIChhdCBcIitrLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikrXCI6XCIray5saW5lTnVtYmVyK1wiKVwiOm4/XCIgKGNyZWF0ZWQgYnkgXCIrbitcIilcIjpcIlwiKTticmVhayBhO2RlZmF1bHQ6RmE9XCJcIn1oKz1GYTtnPWdbXCJyZXR1cm5cIl19d2hpbGUoZyk7Zz1oO2E9ZmQoYSk7bnVsbD09PVAmJihQPW5ldyBNYXApO2I9e2NvbXBvbmVudE5hbWU6YSxjb21wb25lbnRTdGFjazpnLGVycm9yOmIsZXJyb3JCb3VuZGFyeTpkP2Muc3RhdGVOb2RlOm51bGwsZXJyb3JCb3VuZGFyeUZvdW5kOmQsZXJyb3JCb3VuZGFyeU5hbWU6Zix3aWxsUmV0cnk6ZX07UC5zZXQoYyxiKTt0cnl7Y29uc29sZS5lcnJvcihiLmVycm9yKX1jYXRjaChDZyl7Y29uc29sZS5lcnJvcihDZyl9TGI/KG51bGw9PT1mYSYmKGZhPW5ldyBTZXQpLFxuZmEuYWRkKGMpKTpGKGMpO3JldHVybiBjfW51bGw9PT1iYSYmKGJhPWIpO3JldHVybiBudWxsfWZ1bmN0aW9uIGgoYSl7cmV0dXJuIG51bGwhPT1QJiYoUC5oYXMoYSl8fG51bGwhPT1hLmFsdGVybmF0ZSYmUC5oYXMoYS5hbHRlcm5hdGUpKX1mdW5jdGlvbiByKGEpe3JldHVybiBudWxsIT09bmEmJihuYS5oYXMoYSl8fG51bGwhPT1hLmFsdGVybmF0ZSYmbmEuaGFzKGEuYWx0ZXJuYXRlKSl9ZnVuY3Rpb24gbigpe3JldHVybiAyMCooKChMKCkrMTAwKS8yMHwwKSsxKX1mdW5jdGlvbiB5KGEpe3JldHVybiAwIT09amE/amE6bWE/TGI/MTpKOiFEZ3x8YS5pbnRlcm5hbENvbnRleHRUYWcmMT9uKCk6MX1mdW5jdGlvbiB1KGEsYil7cmV0dXJuIHgoYSxiLCExKX1mdW5jdGlvbiB4KGEsYil7Zm9yKDtudWxsIT09YTspe2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmIpYS5leHBpcmF0aW9uVGltZT1iO251bGwhPT1hLmFsdGVybmF0ZSYmKDA9PT1hLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZXx8XG5hLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT5iKSYmKGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1hW1wicmV0dXJuXCJdKWlmKDM9PT1hLnRhZyl7dmFyIGM9YS5zdGF0ZU5vZGU7IW1hJiZjPT09ZWImJmI8PUomJihFPWViPW51bGwsSj0wKTt2YXIgZD1iO01iPkVnJiZEKFwiMTg1XCIpO2lmKG51bGw9PT1jLm5leHRTY2hlZHVsZWRSb290KWMucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9ZCxudWxsPT09TT8ob2E9TT1jLGMubmV4dFNjaGVkdWxlZFJvb3Q9Yyk6KE09TS5uZXh0U2NoZWR1bGVkUm9vdD1jLE0ubmV4dFNjaGVkdWxlZFJvb3Q9b2EpO2Vsc2V7dmFyIGU9Yy5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZXx8ZDxlKWMucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9ZH1HYXx8KGthP05iJiZ6KGMsMSk6MT09PWQ/SSgxLG51bGwpOmdifHwoZ2I9ITAsSmUoVCkpKX1lbHNlIGJyZWFrO2E9YVtcInJldHVyblwiXX19ZnVuY3Rpb24gRihhKXt4KGEsMSxcbiEwKX1mdW5jdGlvbiBMKCl7cmV0dXJuIE5jPSgoS2UoKS1GZykvMTB8MCkrMn1mdW5jdGlvbiBHKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PU0pZm9yKHZhciBjPU0sZD1vYTtudWxsIT09ZDspe3ZhciBlPWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09TT9EKFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7b2E9TT1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09b2Epb2E9ZT1kLm5leHRTY2hlZHVsZWRSb290LE0ubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09TSl7TT1jO00ubmV4dFNjaGVkdWxlZFJvb3Q9b2E7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtpZigwPT09XG5hfHxlPGEpYT1lLGI9ZDtpZihkPT09TSlicmVhaztjPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1jPXBhO251bGwhPT1jJiZjPT09Yj9NYisrOk1iPTA7cGE9YjtPYj1hfWZ1bmN0aW9uIFQoYSl7SSgwLGEpfWZ1bmN0aW9uIEkoYSxiKXtoYj1iO2ZvcihHKCk7bnVsbCE9PXBhJiYwIT09T2ImJigwPT09YXx8T2I8PWEpJiYhT2M7KXoocGEsT2IpLEcoKTtudWxsIT09aGImJihnYj0hMSk7bnVsbD09PXBhfHxnYnx8KGdiPSEwLEplKFQpKTtoYj1udWxsO09jPSExO01iPTA7aWYoUGIpdGhyb3cgYT1QYyxQYz1udWxsLFBiPSExLGE7fWZ1bmN0aW9uIHooYSxjKXtHYT9EKFwiMjQ1XCIpOnZvaWQgMDtHYT0hMDtpZihjPD1MKCkpe3ZhciBkPWEuZmluaXNoZWRXb3JrO251bGwhPT1kPyhhLmZpbmlzaGVkV29yaz1udWxsLGEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YihkKSk6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1nKGEsYyksbnVsbCE9PWQmJihhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPVxuYihkKSkpfWVsc2UgZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZD8oYS5maW5pc2hlZFdvcms9bnVsbCxhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIoZCkpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9ZyhhLGMpLG51bGwhPT1kJiYocCgpP2EuZmluaXNoZWRXb3JrPWQ6YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iKGQpKSk7R2E9ITF9ZnVuY3Rpb24gcCgpe3JldHVybiBudWxsPT09aGJ8fGhiLnRpbWVSZW1haW5pbmcoKT5HZz8hMTpPYz0hMH1mdW5jdGlvbiB2KGEpe251bGw9PT1wYT9EKFwiMjQ2XCIpOnZvaWQgMDtwYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT0wO1BifHwoUGI9ITAsUGM9YSl9dmFyIHQ9Z2YoYSksS2I9aGYoYSksRmU9dC5wb3BIb3N0Q29udGFpbmVyLGw9dC5wb3BIb3N0Q29udGV4dCxtZz10LnJlc2V0SG9zdENvbnRhaW5lcixHZT1jZihhLHQsS2IsdSx5KSx3PUdlLmJlZ2luV29yayxuZz1HZS5iZWdpbkZhaWxlZFdvcmssb2c9ZGYoYSx0LEtiKS5jb21wbGV0ZVdvcms7XG50PWVmKGEsayk7dmFyIHdnPXQuY29tbWl0UmVzZXRUZXh0Q29udGVudCxIZT10LmNvbW1pdFBsYWNlbWVudCx5Zz10LmNvbW1pdERlbGV0aW9uLEllPXQuY29tbWl0V29yayxBZz10LmNvbW1pdExpZmVDeWNsZXMsQmc9dC5jb21taXRBdHRhY2hSZWYseGc9dC5jb21taXREZXRhY2hSZWYsS2U9YS5ub3csSmU9YS5zY2hlZHVsZURlZmVycmVkQ2FsbGJhY2ssRGc9YS51c2VTeW5jU2NoZWR1bGluZyx2Zz1hLnByZXBhcmVGb3JDb21taXQsemc9YS5yZXNldEFmdGVyQ29tbWl0LEZnPUtlKCksTmM9MixqYT0wLG1hPSExLEU9bnVsbCxlYj1udWxsLEo9MCxxPW51bGwsUD1udWxsLG5hPW51bGwsZmE9bnVsbCxiYT1udWxsLGZiPSExLExiPSExLExjPSExLG9hPW51bGwsTT1udWxsLGdiPSExLEdhPSExLHBhPW51bGwsT2I9MCxPYz0hMSxQYj0hMSxQYz1udWxsLGhiPW51bGwsa2E9ITEsTmI9ITEsRWc9MUUzLE1iPTAsR2c9MTtyZXR1cm57Y29tcHV0ZUFzeW5jRXhwaXJhdGlvbjpuLGNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXI6eSxcbnNjaGVkdWxlV29yazp1LGJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEsYil7dmFyIGM9a2E7a2E9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KGthPWMpfHxHYXx8SSgxLG51bGwpfX0sdW5iYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhKXtpZihrYSYmIU5iKXtOYj0hMDt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e05iPSExfX1yZXR1cm4gYSgpfSxmbHVzaFN5bmM6ZnVuY3Rpb24oYSl7dmFyIGI9a2E7a2E9ITA7dHJ5e2E6e3ZhciBjPWphO2phPTE7dHJ5e3ZhciBkPWEoKTticmVhayBhfWZpbmFsbHl7amE9Y31kPXZvaWQgMH1yZXR1cm4gZH1maW5hbGx5e2thPWIsR2E/RChcIjE4N1wiKTp2b2lkIDAsSSgxLG51bGwpfX0sZGVmZXJyZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe3ZhciBiPWphO2phPW4oKTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e2phPWJ9fX19XG5mdW5jdGlvbiBrZihhKXtmdW5jdGlvbiBiKGEpe2E9a2QoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9dmFyIGM9YS5nZXRQdWJsaWNJbnN0YW5jZTthPWpmKGEpO3ZhciBkPWEuY29tcHV0ZUFzeW5jRXhwaXJhdGlvbixlPWEuY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcixmPWEuc2NoZWR1bGVXb3JrO3JldHVybntjcmVhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgWSgzLG51bGwsMCk7YT17Y3VycmVudDpjLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxyZW1haW5pbmdFeHBpcmF0aW9uVGltZTowLGlzUmVhZHlGb3JDb21taXQ6ITEsZmluaXNoZWRXb3JrOm51bGwsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpiLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3JldHVybiBjLnN0YXRlTm9kZT1hfSx1cGRhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxiLGMscil7dmFyIGc9Yi5jdXJyZW50O2lmKGMpe2M9XG5jLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGg7Yjp7Mj09PWdkKGMpJiYyPT09Yy50YWc/dm9pZCAwOkQoXCIxNzBcIik7Zm9yKGg9YzszIT09aC50YWc7KXtpZihoZShoKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifShoPWhbXCJyZXR1cm5cIl0pP3ZvaWQgMDpEKFwiMTcxXCIpfWg9aC5zdGF0ZU5vZGUuY29udGV4dH1jPWhlKGMpP2xlKGMsaCk6aH1lbHNlIGM9QztudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXI7Yj12b2lkIDA9PT1iP251bGw6YjtyPW51bGwhPWEmJm51bGwhPWEudHlwZSYmbnVsbCE9YS50eXBlLnByb3RvdHlwZSYmITA9PT1hLnR5cGUucHJvdG90eXBlLnVuc3RhYmxlX2lzQXN5bmNSZWFjdENvbXBvbmVudD9kKCk6ZShnKTtEZShnLHtleHBpcmF0aW9uVGltZTpyLHBhcnRpYWxTdGF0ZTp7ZWxlbWVudDphfSxjYWxsYmFjazpiLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxcbm5leHRDYWxsYmFjazpudWxsLG5leHQ6bnVsbH0pO2YoZyxyKX0sYmF0Y2hlZFVwZGF0ZXM6YS5iYXRjaGVkVXBkYXRlcyx1bmJhdGNoZWRVcGRhdGVzOmEudW5iYXRjaGVkVXBkYXRlcyxkZWZlcnJlZFVwZGF0ZXM6YS5kZWZlcnJlZFVwZGF0ZXMsZmx1c2hTeW5jOmEuZmx1c2hTeW5jLGdldFB1YmxpY1Jvb3RJbnN0YW5jZTpmdW5jdGlvbihhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYyhhLmNoaWxkLnN0YXRlTm9kZSk7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fSxmaW5kSG9zdEluc3RhbmNlOmIsZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHM6ZnVuY3Rpb24oYSl7YT1sZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0saW5qZWN0SW50b0RldlRvb2xzOmZ1bmN0aW9uKGEpe3ZhciBjPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIHllKEEoe30sXG5hLHtmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXtyZXR1cm4gYihhKX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGM/YyhhKTpudWxsfX0pKX19fXZhciBsZj1PYmplY3QuZnJlZXplKHtkZWZhdWx0OmtmfSksbWY9bGYmJmtmfHxsZixuZj1tZltcImRlZmF1bHRcIl0/bWZbXCJkZWZhdWx0XCJdOm1mLG9mPVwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cscGY9dm9pZCAwO3BmPW9mP2Z1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfTpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTt2YXIgcWY9dm9pZCAwO1xuaWYobS5jYW5Vc2VET00paWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHJlcXVlc3RJZGxlQ2FsbGJhY2spe3ZhciByZj1udWxsLHNmPSExLHRmPSExLHVmPTAsdmY9MzMsd2Y9MzMseGY7eGY9b2Y/e3RpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdWYtcGVyZm9ybWFuY2Uubm93KCl9fTp7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiB1Zi1EYXRlLm5vdygpfX07dmFyIHlmPVwiX19yZWFjdElkbGVDYWxsYmFjayRcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihhKXthLnNvdXJjZT09PXdpbmRvdyYmYS5kYXRhPT09eWYmJihzZj0hMSxhPXJmLHJmPW51bGwsbnVsbCE9PWEmJmEoeGYpKX0sITEpO3ZhciB6Zj1mdW5jdGlvbihhKXt0Zj0hMTt2YXIgYj1hLXVmK3dmO2I8d2YmJnZmPHdmPyg4PmImJihiPTgpLHdmPWI8dmY/dmY6Yik6dmY9Yjt1Zj1hK3dmO3NmfHwoc2Y9ITAsXG53aW5kb3cucG9zdE1lc3NhZ2UoeWYsXCIqXCIpKX07cWY9ZnVuY3Rpb24oYSl7cmY9YTt0Znx8KHRmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZSh6ZikpO3JldHVybiAwfX1lbHNlIHFmPXJlcXVlc3RJZGxlQ2FsbGJhY2s7ZWxzZSBxZj1mdW5jdGlvbihhKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX19KX0pO3JldHVybiAwfTtcbnZhciBBZj0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sQmY9e30sQ2Y9e307ZnVuY3Rpb24gRGYoYSl7aWYoQ2YuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITA7aWYoQmYuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITE7aWYoQWYudGVzdChhKSlyZXR1cm4gQ2ZbYV09ITA7QmZbYV09ITA7cmV0dXJuITF9XG5mdW5jdGlvbiBFZihhLGIsYyl7dmFyIGQ9dWEoYik7aWYoZCYmdGEoYixjKSl7dmFyIGU9ZC5tdXRhdGlvbk1ldGhvZDtlP2UoYSxjKTpudWxsPT1jfHxkLmhhc0Jvb2xlYW5WYWx1ZSYmIWN8fGQuaGFzTnVtZXJpY1ZhbHVlJiZpc05hTihjKXx8ZC5oYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZSYmMT5jfHxkLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUmJiExPT09Yz9GZihhLGIpOmQubXVzdFVzZVByb3BlcnR5P2FbZC5wcm9wZXJ0eU5hbWVdPWM6KGI9ZC5hdHRyaWJ1dGVOYW1lLChlPWQuYXR0cmlidXRlTmFtZXNwYWNlKT9hLnNldEF0dHJpYnV0ZU5TKGUsYixcIlwiK2MpOmQuaGFzQm9vbGVhblZhbHVlfHxkLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUmJiEwPT09Yz9hLnNldEF0dHJpYnV0ZShiLFwiXCIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSl9ZWxzZSBHZihhLGIsdGEoYixjKT9jOm51bGwpfVxuZnVuY3Rpb24gR2YoYSxiLGMpe0RmKGIpJiYobnVsbD09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpfWZ1bmN0aW9uIEZmKGEsYil7dmFyIGM9dWEoYik7Yz8oYj1jLm11dGF0aW9uTWV0aG9kKT9iKGEsdm9pZCAwKTpjLm11c3RVc2VQcm9wZXJ0eT9hW2MucHJvcGVydHlOYW1lXT1jLmhhc0Jvb2xlYW5WYWx1ZT8hMTpcIlwiOmEucmVtb3ZlQXR0cmlidXRlKGMuYXR0cmlidXRlTmFtZSk6YS5yZW1vdmVBdHRyaWJ1dGUoYil9XG5mdW5jdGlvbiBIZihhLGIpe3ZhciBjPWIudmFsdWUsZD1iLmNoZWNrZWQ7cmV0dXJuIEEoe3R5cGU6dm9pZCAwLHN0ZXA6dm9pZCAwLG1pbjp2b2lkIDAsbWF4OnZvaWQgMH0sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUsY2hlY2tlZDpudWxsIT1kP2Q6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gSWYoYSxiKXt2YXIgYz1iLmRlZmF1bHRWYWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOm51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZCxpbml0aWFsVmFsdWU6bnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19XG5mdW5jdGlvbiBKZihhLGIpe3ZhciBjPWIuY2hlY2tlZDtudWxsIT1jJiZFZihhLFwiY2hlY2tlZFwiLGN8fCExKTtjPWIudmFsdWU7aWYobnVsbCE9YylpZigwPT09YyYmXCJcIj09PWEudmFsdWUpYS52YWx1ZT1cIjBcIjtlbHNlIGlmKFwibnVtYmVyXCI9PT1iLnR5cGUpe2lmKGI9cGFyc2VGbG9hdChhLnZhbHVlKXx8MCxjIT1ifHxjPT1iJiZhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIG51bGw9PWIudmFsdWUmJm51bGwhPWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2IuZGVmYXVsdFZhbHVlKSxudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBLZihhLGIpe3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztjYXNlIFwiY29sb3JcIjpjYXNlIFwiZGF0ZVwiOmNhc2UgXCJkYXRldGltZVwiOmNhc2UgXCJkYXRldGltZS1sb2NhbFwiOmNhc2UgXCJtb250aFwiOmNhc2UgXCJ0aW1lXCI6Y2FzZSBcIndlZWtcIjphLnZhbHVlPVwiXCI7YS52YWx1ZT1hLmRlZmF1bHRWYWx1ZTticmVhaztkZWZhdWx0OmEudmFsdWU9YS52YWx1ZX1iPWEubmFtZTtcIlwiIT09YiYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7XCJcIiE9PWImJihhLm5hbWU9Yil9ZnVuY3Rpb24gTGYoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifVxuZnVuY3Rpb24gTWYoYSxiKXthPUEoe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1MZihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9ZnVuY3Rpb24gTmYoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIE9mKGEsYil7dmFyIGM9Yi52YWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpudWxsIT1jP2M6Yi5kZWZhdWx0VmFsdWUsd2FzTXVsdGlwbGU6ISFiLm11bHRpcGxlfX1mdW5jdGlvbiBQZihhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBRZihhLGIpe3ZhciBjPWIudmFsdWUsZD1jO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz9EKFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6RChcIjkzXCIpLGI9YlswXSksYz1cIlwiK2IpLG51bGw9PWMmJihjPVwiXCIpLGQ9Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6XCJcIitkfX1cbmZ1bmN0aW9uIFJmKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9Yi5kZWZhdWx0VmFsdWUpfWZ1bmN0aW9uIFNmKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBUZj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBVZihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIFZmKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9VZihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBXZj12b2lkIDAsWGY9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09VGYuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7V2Y9V2Z8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7V2YuaW5uZXJIVE1MPVwiXFx4M2NzdmdcXHgzZVwiK2IrXCJcXHgzYy9zdmdcXHgzZVwiO2ZvcihiPVdmLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KSxZZj0vW1wiJyY8Pl0vO1xuZnVuY3Rpb24gWmYoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbm0uY2FuVXNlRE9NJiYoXCJ0ZXh0Q29udGVudFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fHwoWmY9ZnVuY3Rpb24oYSxiKXtpZigzPT09YS5ub2RlVHlwZSlhLm5vZGVWYWx1ZT1iO2Vsc2V7aWYoXCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKWI9XCJcIitiO2Vsc2V7Yj1cIlwiK2I7dmFyIGM9WWYuZXhlYyhiKTtpZihjKXt2YXIgZD1cIlwiLGUsZj0wO2ZvcihlPWMuaW5kZXg7ZTxiLmxlbmd0aDtlKyspe3N3aXRjaChiLmNoYXJDb2RlQXQoZSkpe2Nhc2UgMzQ6Yz1cIlxceDI2cXVvdDtcIjticmVhaztjYXNlIDM4OmM9XCJcXHgyNmFtcDtcIjticmVhaztjYXNlIDM5OmM9XCJcXHgyNiN4Mjc7XCI7YnJlYWs7Y2FzZSA2MDpjPVwiXFx4MjZsdDtcIjticmVhaztjYXNlIDYyOmM9XCJcXHgyNmd0O1wiO2JyZWFrO2RlZmF1bHQ6Y29udGludWV9ZiE9PWUmJihkKz1iLnN1YnN0cmluZyhmLGUpKTtmPWUrMTtkKz1jfWI9ZiE9PWU/ZCtiLnN1YnN0cmluZyhmLGUpOmR9fVhmKGEsYil9fSkpO1xudmFyICRmPVpmLGFnPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LGJnPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhhZykuZm9yRWFjaChmdW5jdGlvbihhKXtiZy5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO2FnW2JdPWFnW2FdfSl9KTtcbmZ1bmN0aW9uIGNnKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fGFnLmhhc093blByb3BlcnR5KGUpJiZhZ1tlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBkZz1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gZWcoYSxiLGMpe2ImJihkZ1thXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0QoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6RChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/RChcIjYyXCIsYygpKTp2b2lkIDApfVxuZnVuY3Rpb24gZmcoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBnZz1UZi5odG1sLGhnPUIudGhhdFJldHVybnMoXCJcIik7XG5mdW5jdGlvbiBpZyhhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1EZChhKTtiPVJhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2MuaGFzT3duUHJvcGVydHkoZSkmJmNbZV18fChcInRvcFdoZWVsXCI9PT1lP3ljKFwid2hlZWxcIik/VShcInRvcFdoZWVsXCIsXCJ3aGVlbFwiLGEpOnljKFwibW91c2V3aGVlbFwiKT9VKFwidG9wV2hlZWxcIixcIm1vdXNld2hlZWxcIixhKTpVKFwidG9wV2hlZWxcIixcIkRPTU1vdXNlU2Nyb2xsXCIsYSk6XCJ0b3BTY3JvbGxcIj09PWU/c2QoXCJ0b3BTY3JvbGxcIixcInNjcm9sbFwiLGEpOlwidG9wRm9jdXNcIj09PWV8fFwidG9wQmx1clwiPT09ZT8oc2QoXCJ0b3BGb2N1c1wiLFwiZm9jdXNcIixhKSxzZChcInRvcEJsdXJcIixcImJsdXJcIixhKSxjLnRvcEJsdXI9ITAsYy50b3BGb2N1cz0hMCk6XCJ0b3BDYW5jZWxcIj09PWU/KHljKFwiY2FuY2VsXCIsITApJiZzZChcInRvcENhbmNlbFwiLFwiY2FuY2VsXCIsYSksYy50b3BDYW5jZWw9XG4hMCk6XCJ0b3BDbG9zZVwiPT09ZT8oeWMoXCJjbG9zZVwiLCEwKSYmc2QoXCJ0b3BDbG9zZVwiLFwiY2xvc2VcIixhKSxjLnRvcENsb3NlPSEwKTp6ZC5oYXNPd25Qcm9wZXJ0eShlKSYmVShlLHpkW2VdLGEpLGNbZV09ITApfX1cbnZhciBqZz17dG9wQWJvcnQ6XCJhYm9ydFwiLHRvcENhblBsYXk6XCJjYW5wbGF5XCIsdG9wQ2FuUGxheVRocm91Z2g6XCJjYW5wbGF5dGhyb3VnaFwiLHRvcER1cmF0aW9uQ2hhbmdlOlwiZHVyYXRpb25jaGFuZ2VcIix0b3BFbXB0aWVkOlwiZW1wdGllZFwiLHRvcEVuY3J5cHRlZDpcImVuY3J5cHRlZFwiLHRvcEVuZGVkOlwiZW5kZWRcIix0b3BFcnJvcjpcImVycm9yXCIsdG9wTG9hZGVkRGF0YTpcImxvYWRlZGRhdGFcIix0b3BMb2FkZWRNZXRhZGF0YTpcImxvYWRlZG1ldGFkYXRhXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsdG9wUGF1c2U6XCJwYXVzZVwiLHRvcFBsYXk6XCJwbGF5XCIsdG9wUGxheWluZzpcInBsYXlpbmdcIix0b3BQcm9ncmVzczpcInByb2dyZXNzXCIsdG9wUmF0ZUNoYW5nZTpcInJhdGVjaGFuZ2VcIix0b3BTZWVrZWQ6XCJzZWVrZWRcIix0b3BTZWVraW5nOlwic2Vla2luZ1wiLHRvcFN0YWxsZWQ6XCJzdGFsbGVkXCIsdG9wU3VzcGVuZDpcInN1c3BlbmRcIix0b3BUaW1lVXBkYXRlOlwidGltZXVwZGF0ZVwiLHRvcFZvbHVtZUNoYW5nZTpcInZvbHVtZWNoYW5nZVwiLFxudG9wV2FpdGluZzpcIndhaXRpbmdcIn07ZnVuY3Rpb24ga2coYSxiLGMsZCl7Yz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtkPT09Z2cmJihkPVVmKGEpKTtkPT09Z2c/XCJzY3JpcHRcIj09PWE/KGE9Yy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiXFx4M2NzY3JpcHRcXHgzZVxceDNjL3NjcmlwdFxceDNlXCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOmE9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzP2MuY3JlYXRlRWxlbWVudChhLHtpczpiLmlzfSk6Yy5jcmVhdGVFbGVtZW50KGEpOmE9Yy5jcmVhdGVFbGVtZW50TlMoZCxhKTtyZXR1cm4gYX1mdW5jdGlvbiBsZyhhLGIpe3JldHVybig5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoYSl9XG5mdW5jdGlvbiBwZyhhLGIsYyxkKXt2YXIgZT1mZyhiLGMpO3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlUoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7dmFyIGY9YzticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZiBpbiBqZylqZy5oYXNPd25Qcm9wZXJ0eShmKSYmVShmLGpnW2ZdLGEpO2Y9YzticmVhaztjYXNlIFwic291cmNlXCI6VShcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6VShcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1UoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6VShcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO1UoXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOlUoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW5wdXRcIjpJZihhLGMpO2Y9SGYoYSxjKTtVKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpO1xuaWcoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPU1mKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOk9mKGEsYyk7Zj1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO1UoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7aWcoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlFmKGEsYyk7Zj1QZihhLGMpO1UoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7aWcoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfWVnKGIsZixoZyk7dmFyIGc9ZixrO2ZvcihrIGluIGcpaWYoZy5oYXNPd25Qcm9wZXJ0eShrKSl7dmFyIGg9Z1trXTtcInN0eWxlXCI9PT1rP2NnKGEsaCxoZyk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09az8oaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1oJiZYZihhLGgpKTpcImNoaWxkcmVuXCI9PT1rP1wic3RyaW5nXCI9PT10eXBlb2YgaD8oXCJ0ZXh0YXJlYVwiIT09Ynx8XCJcIiE9PWgpJiYkZihhLGgpOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmJGYoYSxcblwiXCIraCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWsmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1rJiZcImF1dG9Gb2N1c1wiIT09ayYmKFFhLmhhc093blByb3BlcnR5KGspP251bGwhPWgmJmlnKGQsayk6ZT9HZihhLGssaCk6bnVsbCE9aCYmRWYoYSxrLGgpKX1zd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6QmMoYSk7S2YoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpCYyhhKTtTZihhLGMpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1jLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsYy52YWx1ZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFjLm11bHRpcGxlO2I9Yy52YWx1ZTtudWxsIT1iP05mKGEsISFjLm11bHRpcGxlLGIsITEpOm51bGwhPWMuZGVmYXVsdFZhbHVlJiZOZihhLCEhYy5tdWx0aXBsZSxjLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoYS5vbmNsaWNrPVxuQil9fVxuZnVuY3Rpb24gcWcoYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPUhmKGEsYyk7ZD1IZihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmM9TWYoYSxjKTtkPU1mKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Yz1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9UGYoYSxjKTtkPVBmKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9Qil9ZWcoYixkLGhnKTt2YXIgZyxrO2E9bnVsbDtmb3IoZyBpbiBjKWlmKCFkLmhhc093blByb3BlcnR5KGcpJiZjLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1jW2ddKWlmKFwic3R5bGVcIj09PWcpZm9yKGsgaW4gYj1jW2ddLGIpYi5oYXNPd25Qcm9wZXJ0eShrKSYmKGF8fChhPXt9KSxhW2tdPVxuXCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWcmJlwiY2hpbGRyZW5cIiE9PWcmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1nJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZyYmXCJhdXRvRm9jdXNcIiE9PWcmJihRYS5oYXNPd25Qcm9wZXJ0eShnKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2goZyxudWxsKSk7Zm9yKGcgaW4gZCl7dmFyIGg9ZFtnXTtiPW51bGwhPWM/Y1tnXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShnKSYmaCE9PWImJihudWxsIT1ofHxudWxsIT1iKSlpZihcInN0eWxlXCI9PT1nKWlmKGIpe2ZvcihrIGluIGIpIWIuaGFzT3duUHJvcGVydHkoayl8fGgmJmguaGFzT3duUHJvcGVydHkoayl8fChhfHwoYT17fSksYVtrXT1cIlwiKTtmb3IoayBpbiBoKWguaGFzT3duUHJvcGVydHkoaykmJmJba10hPT1oW2tdJiYoYXx8KGE9e30pLGFba109aFtrXSl9ZWxzZSBhfHwoZnx8KGY9W10pLGYucHVzaChnLGEpKSxhPWg7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PVxuZz8oaD1oP2guX19odG1sOnZvaWQgMCxiPWI/Yi5fX2h0bWw6dm9pZCAwLG51bGwhPWgmJmIhPT1oJiYoZj1mfHxbXSkucHVzaChnLFwiXCIraCkpOlwiY2hpbGRyZW5cIj09PWc/Yj09PWh8fFwic3RyaW5nXCIhPT10eXBlb2YgaCYmXCJudW1iZXJcIiE9PXR5cGVvZiBofHwoZj1mfHxbXSkucHVzaChnLFwiXCIraCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWcmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1nJiYoUWEuaGFzT3duUHJvcGVydHkoZyk/KG51bGwhPWgmJmlnKGUsZyksZnx8Yj09PWh8fChmPVtdKSk6KGY9Znx8W10pLnB1c2goZyxoKSl9YSYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGEpO3JldHVybiBmfVxuZnVuY3Rpb24gcmcoYSxiLGMsZCxlKXtmZyhjLGQpO2Q9ZmcoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBnPWJbZl0saz1iW2YrMV07XCJzdHlsZVwiPT09Zz9jZyhhLGssaGcpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/WGYoYSxrKTpcImNoaWxkcmVuXCI9PT1nPyRmKGEsayk6ZD9udWxsIT1rP0dmKGEsZyxrKTphLnJlbW92ZUF0dHJpYnV0ZShnKTpudWxsIT1rP0VmKGEsZyxrKTpGZihhLGcpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpKZihhLGUpO0NjKGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlJmKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU9dm9pZCAwLGI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/TmYoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPVxuZS5kZWZhdWx0VmFsdWU/TmYoYSwhIWUubXVsdGlwbGUsZS5kZWZhdWx0VmFsdWUsITApOk5mKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1cbmZ1bmN0aW9uIHNnKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6VShcInRvcExvYWRcIixcImxvYWRcIixhKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IodmFyIGYgaW4gamcpamcuaGFzT3duUHJvcGVydHkoZikmJlUoZixqZ1tmXSxhKTticmVhaztjYXNlIFwic291cmNlXCI6VShcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpVKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7VShcInRvcExvYWRcIixcImxvYWRcIixhKTticmVhaztjYXNlIFwiZm9ybVwiOlUoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtVKFwidG9wU3VibWl0XCIsXCJzdWJtaXRcIixhKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOlUoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOklmKGEsYyk7VShcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTtpZyhlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOk9mKGEsYyk7XG5VKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpO2lnKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpRZihhLGMpLFUoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSksaWcoZSxcIm9uQ2hhbmdlXCIpfWVnKGIsYyxoZyk7ZD1udWxsO2Zvcih2YXIgZyBpbiBjKWMuaGFzT3duUHJvcGVydHkoZykmJihmPWNbZ10sXCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGY/YS50ZXh0Q29udGVudCE9PWYmJihkPVtcImNoaWxkcmVuXCIsZl0pOlwibnVtYmVyXCI9PT10eXBlb2YgZiYmYS50ZXh0Q29udGVudCE9PVwiXCIrZiYmKGQ9W1wiY2hpbGRyZW5cIixcIlwiK2ZdKTpRYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9ZiYmaWcoZSxnKSk7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkJjKGEpO0tmKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6QmMoYSk7U2YoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGMub25DbGljayYmXG4oYS5vbmNsaWNrPUIpfXJldHVybiBkfWZ1bmN0aW9uIHRnKGEsYil7cmV0dXJuIGEubm9kZVZhbHVlIT09Yn1cbnZhciB1Zz1PYmplY3QuZnJlZXplKHtjcmVhdGVFbGVtZW50OmtnLGNyZWF0ZVRleHROb2RlOmxnLHNldEluaXRpYWxQcm9wZXJ0aWVzOnBnLGRpZmZQcm9wZXJ0aWVzOnFnLHVwZGF0ZVByb3BlcnRpZXM6cmcsZGlmZkh5ZHJhdGVkUHJvcGVydGllczpzZyxkaWZmSHlkcmF0ZWRUZXh0OnRnLHdhcm5Gb3JVbm1hdGNoZWRUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dDpmdW5jdGlvbigpe30scmVzdG9yZUNvbnRyb2xsZWRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkpmKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1cbmMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWVcXHgzZFwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZVxceDNkXCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9c2IoZCk7ZT92b2lkIDA6RChcIjkwXCIpO0pmKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpSZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmTmYoYSwhIWMubXVsdGlwbGUsYiwhMSl9fX0pO25jLmluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQodWcpO3ZhciBIZz1udWxsLElnPW51bGw7ZnVuY3Rpb24gSmcoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gS2coYSl7YT1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsO3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlfHwhYS5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSl9XG52YXIgWj1uZih7Z2V0Um9vdEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZVR5cGU7c3dpdGNoKGIpe2Nhc2UgOTpjYXNlIDExOmE9KGE9YS5kb2N1bWVudEVsZW1lbnQpP2EubmFtZXNwYWNlVVJJOlZmKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpiPTg9PT1iP2EucGFyZW50Tm9kZTphLGE9Yi5uYW1lc3BhY2VVUkl8fG51bGwsYj1iLnRhZ05hbWUsYT1WZihhLGIpfXJldHVybiBhfSxnZXRDaGlsZEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFZmKGEsYil9LGdldFB1YmxpY0luc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBhfSxwcmVwYXJlRm9yQ29tbWl0OmZ1bmN0aW9uKCl7SGc9cGQ7dmFyIGE9ZGEoKTtpZihHZChhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYj17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7dmFyIGM9d2luZG93LmdldFNlbGVjdGlvbiYmd2luZG93LmdldFNlbGVjdGlvbigpO1xuaWYoYyYmMCE9PWMucmFuZ2VDb3VudCl7Yj1jLmFuY2hvck5vZGU7dmFyIGQ9Yy5hbmNob3JPZmZzZXQsZT1jLmZvY3VzTm9kZTtjPWMuZm9jdXNPZmZzZXQ7dHJ5e2Iubm9kZVR5cGUsZS5ub2RlVHlwZX1jYXRjaCh4KXtiPW51bGw7YnJlYWsgYX12YXIgZj0wLGc9LTEsaz0tMSxoPTAscj0wLG49YSx5PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdTs7KXtuIT09Ynx8MCE9PWQmJjMhPT1uLm5vZGVUeXBlfHwoZz1mK2QpO24hPT1lfHwwIT09YyYmMyE9PW4ubm9kZVR5cGV8fChrPWYrYyk7Mz09PW4ubm9kZVR5cGUmJihmKz1uLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odT1uLmZpcnN0Q2hpbGQpKWJyZWFrO3k9bjtuPXV9Zm9yKDs7KXtpZihuPT09YSlicmVhayBiO3k9PT1iJiYrK2g9PT1kJiYoZz1mKTt5PT09ZSYmKytyPT09YyYmKGs9Zik7aWYobnVsbCE9PSh1PW4ubmV4dFNpYmxpbmcpKWJyZWFrO249eTt5PW4ucGFyZW50Tm9kZX1uPXV9Yj0tMT09PWd8fC0xPT09az9udWxsOlxue3N0YXJ0OmcsZW5kOmt9fWVsc2UgYj1udWxsfWI9Ynx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYj1udWxsO0lnPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmJ9O3FkKCExKX0scmVzZXRBZnRlckNvbW1pdDpmdW5jdGlvbigpe3ZhciBhPUlnLGI9ZGEoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZoYShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKEdkKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYod2luZG93LmdldFNlbGVjdGlvbil7Yj13aW5kb3cuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Y1tFYigpXS5sZW5ndGg7YT1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/YTpNYXRoLm1pbihkLmVuZCxlKTshYi5leHRlbmQmJmE+XG5kJiYoZT1kLGQ9YSxhPWUpO2U9RmQoYyxhKTt2YXIgZj1GZChjLGQpO2lmKGUmJmYmJigxIT09Yi5yYW5nZUNvdW50fHxiLmFuY2hvck5vZGUhPT1lLm5vZGV8fGIuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGIuZm9jdXNOb2RlIT09Zi5ub2RlfHxiLmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpKXt2YXIgZz1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO2cuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KTtiLnJlbW92ZUFsbFJhbmdlcygpO2E+ZD8oYi5hZGRSYW5nZShnKSxiLmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKTooZy5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSxiLmFkZFJhbmdlKGcpKX19Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7aWEoYyk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9XG5hLnRvcH1JZz1udWxsO3FkKEhnKTtIZz1udWxsfSxjcmVhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUpe2E9a2coYSxiLGMsZCk7YVtPXT1lO2FbcGJdPWI7cmV0dXJuIGF9LGFwcGVuZEluaXRpYWxDaGlsZDpmdW5jdGlvbihhLGIpe2EuYXBwZW5kQ2hpbGQoYil9LGZpbmFsaXplSW5pdGlhbENoaWxkcmVuOmZ1bmN0aW9uKGEsYixjLGQpe3BnKGEsYixjLGQpO2E6e3N3aXRjaChiKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmE9ISFjLmF1dG9Gb2N1czticmVhayBhfWE9ITF9cmV0dXJuIGF9LHByZXBhcmVVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gcWcoYSxiLGMsZCxlKX0sc2hvdWxkU2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PVxudHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcInN0cmluZ1wiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfSxzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlOmZ1bmN0aW9uKGEsYil7cmV0dXJuISFiLmhpZGRlbn0sY3JlYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQpe2E9bGcoYSxiKTthW09dPWQ7cmV0dXJuIGF9LG5vdzpwZixtdXRhdGlvbjp7Y29tbWl0TW91bnQ6ZnVuY3Rpb24oYSl7YS5mb2N1cygpfSxjb21taXRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXthW3BiXT1lO3JnKGEsYixjLGQsZSl9LHJlc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSl7YS50ZXh0Q29udGVudD1cIlwifSxjb21taXRUZXh0VXBkYXRlOmZ1bmN0aW9uKGEsYixjKXthLm5vZGVWYWx1ZT1jfSxhcHBlbmRDaGlsZDpmdW5jdGlvbihhLGIpe2EuYXBwZW5kQ2hpbGQoYil9LGFwcGVuZENoaWxkVG9Db250YWluZXI6ZnVuY3Rpb24oYSxcbmIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixhKTphLmFwcGVuZENoaWxkKGIpfSxpbnNlcnRCZWZvcmU6ZnVuY3Rpb24oYSxiLGMpe2EuaW5zZXJ0QmVmb3JlKGIsYyl9LGluc2VydEluQ29udGFpbmVyQmVmb3JlOmZ1bmN0aW9uKGEsYixjKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYyk6YS5pbnNlcnRCZWZvcmUoYixjKX0scmVtb3ZlQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLnJlbW92ZUNoaWxkKGIpfSxyZW1vdmVDaGlsZEZyb21Db250YWluZXI6ZnVuY3Rpb24oYSxiKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik6YS5yZW1vdmVDaGlsZChiKX19LGh5ZHJhdGlvbjp7Y2FuSHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIDEhPT1hLm5vZGVUeXBlfHxiLnRvTG93ZXJDYXNlKCkhPT1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDphfSxjYW5IeWRyYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsXG5iKXtyZXR1cm5cIlwiPT09Ynx8MyE9PWEubm9kZVR5cGU/bnVsbDphfSxnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmc6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX0sZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQ6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxoeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2FbT109ZjthW3BiXT1jO3JldHVybiBzZyhhLGIsYyxlLGQpfSxoeWRyYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXthW09dPWM7cmV0dXJuIHRnKGEsYil9LGRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LFxuZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RIeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVySW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZTpmdW5jdGlvbigpe319LHNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjazpxZix1c2VTeW5jU2NoZWR1bGluZzohMH0pO3JjPVouYmF0Y2hlZFVwZGF0ZXM7XG5mdW5jdGlvbiBMZyhhLGIsYyxkLGUpe0pnKGMpP3ZvaWQgMDpEKFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKVoudXBkYXRlQ29udGFpbmVyKGIsZixhLGUpO2Vsc2V7ZD1kfHxLZyhjKTtpZighZClmb3IoZj12b2lkIDA7Zj1jLmxhc3RDaGlsZDspYy5yZW1vdmVDaGlsZChmKTt2YXIgZz1aLmNyZWF0ZUNvbnRhaW5lcihjLGQpO2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWc7Wi51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7Wi51cGRhdGVDb250YWluZXIoYixnLGEsZSl9KX1yZXR1cm4gWi5nZXRQdWJsaWNSb290SW5zdGFuY2UoZil9ZnVuY3Rpb24gTWcoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtKZyhiKT92b2lkIDA6RChcIjIwMFwiKTtyZXR1cm4gUGUoYSxiLG51bGwsYyl9XG5mdW5jdGlvbiBOZyhhLGIpe3RoaXMuX3JlYWN0Um9vdENvbnRhaW5lcj1aLmNyZWF0ZUNvbnRhaW5lcihhLGIpfU5nLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXtaLnVwZGF0ZUNvbnRhaW5lcihhLHRoaXMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsLGIpfTtOZy5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXtaLnVwZGF0ZUNvbnRhaW5lcihudWxsLHRoaXMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsLGEpfTtcbnZhciBPZz17Y3JlYXRlUG9ydGFsOk1nLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKGIpcmV0dXJuIFouZmluZEhvc3RJbnN0YW5jZShiKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/RChcIjE4OFwiKTpEKFwiMjEzXCIsT2JqZWN0LmtleXMoYSkpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gTGcobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIExnKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/RChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gTGcoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7SmcoYSk/dm9pZCAwOlxuRChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFoudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe0xnKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOk1nLHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOnRjLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpaLmRlZmVycmVkVXBkYXRlcyxmbHVzaFN5bmM6Wi5mbHVzaFN5bmMsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50UGx1Z2luSHViOm5iLEV2ZW50UGx1Z2luUmVnaXN0cnk6VWEsRXZlbnRQcm9wYWdhdG9yczpDYixSZWFjdENvbnRyb2xsZWRDb21wb25lbnQ6cWMsUmVhY3RET01Db21wb25lbnRUcmVlOnRiLFJlYWN0RE9NRXZlbnRMaXN0ZW5lcjp0ZH19O1xuWi5pbmplY3RJbnRvRGV2VG9vbHMoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnFiLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMS4xXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIFBnPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6T2d9KSxRZz1QZyYmT2d8fFBnO21vZHVsZS5leHBvcnRzPVFnW1wiZGVmYXVsdFwiXT9RZ1tcImRlZmF1bHRcIl06UWc7XG5cblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuXG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7XG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGVtcHR5RnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG4vKipcbiAqIFVwc3RyZWFtIHZlcnNpb24gb2YgZXZlbnQgbGlzdGVuZXIuIERvZXMgbm90IHRha2UgaW50byBhY2NvdW50IHNwZWNpZmljXG4gKiBuYXR1cmUgb2YgcGxhdGZvcm0uXG4gKi9cbnZhciBFdmVudExpc3RlbmVyID0ge1xuICAvKipcbiAgICogTGlzdGVuIHRvIERPTSBldmVudHMgZHVyaW5nIHRoZSBidWJibGUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgbGlzdGVuOiBmdW5jdGlvbiBsaXN0ZW4odGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0YXJnZXQuYXR0YWNoRXZlbnQpIHtcbiAgICAgIHRhcmdldC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICB0YXJnZXQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTGlzdGVuIHRvIERPTSBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0YXJnZXQgRE9NIGVsZW1lbnQgdG8gcmVnaXN0ZXIgbGlzdGVuZXIgb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgRXZlbnQgdHlwZSwgZS5nLiAnY2xpY2snIG9yICdtb3VzZW92ZXInLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCBhIGByZW1vdmVgIG1ldGhvZC5cbiAgICovXG4gIGNhcHR1cmU6IGZ1bmN0aW9uIGNhcHR1cmUodGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZmFsc2UpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignQXR0ZW1wdGVkIHRvIGxpc3RlbiB0byBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlIG9uIGEgJyArICdicm93c2VyIHRoYXQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgY2FwdHVyZSBwaGFzZS4gWW91ciBhcHBsaWNhdGlvbiAnICsgJ3dpbGwgbm90IHJlY2VpdmUgc29tZSBldmVudHMuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGVtcHR5RnVuY3Rpb25cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIHJlZ2lzdGVyRGVmYXVsdDogZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0KCkge31cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRMaXN0ZW5lcjtcblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RPTURvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykgLyo/RE9NRWxlbWVudCove1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDtcblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cblxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKHggPT09IHkpIHtcbiAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgIC8vIEFkZGVkIHRoZSBub256ZXJvIHkgY2hlY2sgdG8gbWFrZSBGbG93IGhhcHB5LCBidXQgaXQgaXMgcmVkdW5kYW50XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7XG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG52YXIgaXNUZXh0Tm9kZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBET00gbm9kZSBjb250YWlucyBvciBpcyBhbm90aGVyIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKCdjb250YWlucycgaW4gb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc05vZGU7XG5cbi8qKiovIH0pLFxuLyogMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpc05vZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlO1xuXG4vKioqLyB9KSxcbi8qIDE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTtcblxuLyoqKi8gfSksXG4vKiAxNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cblxuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZSBpbnB1dC90ZXh0YXJlYSB0byBmb2N1c1xuICovXG5cbmZ1bmN0aW9uIGZvY3VzTm9kZShub2RlKSB7XG4gIC8vIElFOCBjYW4gdGhyb3cgXCJDYW4ndCBtb3ZlIGZvY3VzIHRvIHRoZSBjb250cm9sIGJlY2F1c2UgaXQgaXMgaW52aXNpYmxlLFxuICAvLyBub3QgZW5hYmxlZCwgb3Igb2YgYSB0eXBlIHRoYXQgZG9lcyBub3QgYWNjZXB0IHRoZSBmb2N1cy5cIiBmb3IgYWxsIGtpbmRzIG9mXG4gIC8vIHJlYXNvbnMgdGhhdCBhcmUgdG9vIGV4cGVuc2l2ZSBhbmQgZnJhZ2lsZSB0byB0ZXN0LlxuICB0cnkge1xuICAgIG5vZGUuZm9jdXMoKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb2N1c05vZGU7XG5cbi8qKiovIH0pLFxuLyogMTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfc2xpZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcblxudmFyIF9zbGlkZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zbGlkZSk7XG5cbnZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBXaGlybGlnaWcgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoV2hpcmxpZ2lnLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBXaGlybGlnaWcocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2hpcmxpZ2lnKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChXaGlybGlnaWcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihXaGlybGlnaWcpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5ldmVudExpc3RlbmVycyA9IFtdO1xuICAgIF90aGlzLmlzU2Nyb2xsaW5nID0gZmFsc2U7XG5cbiAgICBfdGhpcy5jYW5TZWxmQ29ycmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhX3RoaXMucHJvcHMucHJldmVudEF1dG9Db3JyZWN0ICYmICFfdGhpcy5zdGF0ZS5pc0FuaW1hdGluZyAmJiAhX3RoaXMuaXNTY3JvbGxpbmcgJiYgIV90aGlzLmlzSW50ZXJhY3RpbmcoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2hvdWxkU2VsZkNvcnJlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuc25hcFRvU2xpZGUgJiYgX3RoaXMuY2FuU2VsZkNvcnJlY3QoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlS2V5VXAgPSBmdW5jdGlvbiAobmV4dEtleXMsIHByZXZLZXlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIGtleSA9IF9yZWYua2V5O1xuXG4gICAgICAgIHZhciBpc05leHQgPSAoMCwgX3V0aWxzLmluY2x1ZGVzKShrZXksIG5leHRLZXlzKTtcbiAgICAgICAgdmFyIGlzUHJldiA9ICgwLCBfdXRpbHMuaW5jbHVkZXMpKGtleSwgcHJldktleXMpO1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlzQW5pbWF0aW5nOiB0cnVlIH0pO1xuICAgICAgICBpZiAoaXNOZXh0KSBfdGhpcy5uZXh0KCkuY2F0Y2goX3V0aWxzLm5vb3ApO1xuICAgICAgICBpZiAoaXNQcmV2KSBfdGhpcy5wcmV2KCkuY2F0Y2goX3V0aWxzLm5vb3ApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuICAgIH0oX3RoaXMucHJvcHMubmV4dEtleXMsIF90aGlzLnByb3BzLnByZXZLZXlzKTtcblxuICAgIF90aGlzLmdldFBhcnRpYWxseU9ic2N1cmVkU2xpZGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHdoaXJsaWdpZyA9IF90aGlzLndoaXJsaWdpZztcblxuICAgICAgdmFyIGZpbmRGaXJzdE9ic2N1cmVkQ2hpbGRJbmRleCA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkod2hpcmxpZ2lnLmNoaWxkcmVuKSkuZmluZEluZGV4KGZ1bmN0aW9uIChjaGlsZCwgaSwgY2hpbGRyZW4pIHtcbiAgICAgICAgcmV0dXJuICEoMCwgX3V0aWxzLmlzV2hvbGx5SW5WaWV3KSh3aGlybGlnaWcpKGNoaWxkKSAmJiAoMCwgX3V0aWxzLmlzV2hvbGx5SW5WaWV3KSh3aGlybGlnaWcpKGNoaWxkcmVuW2kgKyAxXSk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGZpcnN0T2JzY3VyZWRDaGlsZEluZGV4ID0gTWF0aC5tYXgoZmluZEZpcnN0T2JzY3VyZWRDaGlsZEluZGV4LCAwKTtcblxuICAgICAgdmFyIGZpbmRMYXN0T2JzY3VyZWRDaGlsZEluZGV4ID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh3aGlybGlnaWcuY2hpbGRyZW4pKS5maW5kSW5kZXgoZnVuY3Rpb24gKGNoaWxkLCBpLCBjaGlsZHJlbikge1xuICAgICAgICByZXR1cm4gISgwLCBfdXRpbHMuaXNXaG9sbHlJblZpZXcpKHdoaXJsaWdpZykoY2hpbGQpICYmICgwLCBfdXRpbHMuaXNXaG9sbHlJblZpZXcpKHdoaXJsaWdpZykoY2hpbGRyZW5baSAtIDFdKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbGFzdE9ic2N1cmVkQ2hpbGRJbmRleCA9IE1hdGgubWF4KGZpbmRMYXN0T2JzY3VyZWRDaGlsZEluZGV4LCAwKSB8fCB3aGlybGlnaWcuY2hpbGRyZW4ubGVuZ3RoIC0gMTtcblxuICAgICAgcmV0dXJuIFtmaXJzdE9ic2N1cmVkQ2hpbGRJbmRleCwgbGFzdE9ic2N1cmVkQ2hpbGRJbmRleF07XG4gICAgfTtcblxuICAgIF90aGlzLmdldE5lYXJlc3RTbGlkZUluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHdoaXJsaWdpZyA9IF90aGlzLndoaXJsaWdpZyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHdoaXJsaWdpZy5jaGlsZHJlbixcbiAgICAgICAgICBzY3JvbGxMZWZ0ID0gX3RoaXMkd2hpcmxpZ2lnLnNjcm9sbExlZnQ7XG5cbiAgICAgIHZhciBvZmZzZXRzID0gW10uc2xpY2UuY2FsbChjaGlsZHJlbikubWFwKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICB2YXIgb2Zmc2V0TGVmdCA9IF9yZWYyLm9mZnNldExlZnQ7XG4gICAgICAgIHJldHVybiBNYXRoLmFicyhvZmZzZXRMZWZ0IC0gc2Nyb2xsTGVmdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvZmZzZXRzLmluZGV4T2YoTWF0aC5taW4uYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KG9mZnNldHMpKSk7XG4gICAgfTtcblxuICAgIF90aGlzLnNldFdoaXJsaWdpZ1JlZiA9IGZ1bmN0aW9uIChyKSB7XG4gICAgICBfdGhpcy53aGlybGlnaWcgPSByO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGFjdGl2ZUluZGV4OiBwcm9wcy5zdGFydEF0LFxuICAgICAgaXNBbmltYXRpbmc6IGZhbHNlLFxuICAgICAgdmlzaWJsZVNsaWRlczogX3RoaXMucHJvcHMudmlzaWJsZVNsaWRlcyB8fCAwLFxuICAgICAgc2xpZGVCeTogX3RoaXMucHJvcHMuc2xpZGVCeSB8fCBfdGhpcy5wcm9wcy52aXNpYmxlU2xpZGVzIHx8IDBcblxuICAgICAgLy8gV2UgY2FuJ3QgZG8gYXJyb3cgZnVuY3Rpb24gcHJvcGVydGllcyBmb3IgdGhlc2Ugc2luY2VcbiAgICAgIC8vIHdlIGFyZSBwYXNzaW5nIHRoZW0gdG8gdGhlIGNvbnN1bWluZyBjb21wb25lbnQgYW5kIHdlXG4gICAgICAvLyByZXF1aXJlIHRoZSBwcm9wZXIgY29udGV4dFxuICAgIH07X3RoaXMubmV4dCA9IF90aGlzLm5leHQuYmluZChfdGhpcyk7XG4gICAgX3RoaXMucHJldiA9IF90aGlzLnByZXYuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuc2xpZGVUbyA9IF90aGlzLnNsaWRlVG8uYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFdoaXJsaWdpZywgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHRoaXMuRE9NTm9kZSA9ICgwLCBfcmVhY3REb20uZmluZERPTU5vZGUpKHRoaXMud2hpcmxpZ2lnKTtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHRoaXMuaXNJbnRlcmFjdGluZyA9ICgwLCBfdXRpbHMuaGFzT25nb2luZ0ludGVyYWN0aW9uKSh0aGlzLkRPTU5vZGUpO1xuXG4gICAgICAvLyBUaGVzZSBhcmUgbm90IGEgcGFydCBvZiBjb21wb25lbnQgc3RhdGUgc2luY2Ugd2UgZG9uJ3Qgd2FudFxuICAgICAgLy8gaW5jdXJlIHRoZSBvdmVyaGVhZCBvZiBjYWxsaW5nIHNldFN0YXRlLiBUaGV5IGFyZSBlaXRoZXIgY2FjaGVkXG4gICAgICAvLyB2YWx1ZXMgb3Igc3RhdGUgb25seSB0aGUgb25TY3JvbGxFbmQgY2FsbGJhY2sgY2FyZXMgYWJvdXQgYW5kXG4gICAgICAvLyBhcmUgbm90IGltcG9ydGFudCB0byB0aGUgcmVuZGVyaW5nIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICB0aGlzLmNoaWxkQ291bnQgPSB0aGlzLndoaXJsaWdpZyAmJiB0aGlzLndoaXJsaWdpZy5jaGlsZHJlbiA/IHRoaXMud2hpcmxpZ2lnLmNoaWxkcmVuLmxlbmd0aCA6IDA7XG5cbiAgICAgIHZhciBzbGlkZUJ5ID0ge1xuICAgICAgICBsZWZ0OiBmdW5jdGlvbiBsZWZ0KCkge1xuICAgICAgICAgIHJldHVybiAtX3RoaXMyLnN0YXRlLnNsaWRlQnk7XG4gICAgICAgIH0sXG4gICAgICAgIHJpZ2h0OiBmdW5jdGlvbiByaWdodCgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLnN0YXRlLnNsaWRlQnk7XG4gICAgICAgIH0sXG4gICAgICAgIHVwOiBmdW5jdGlvbiB1cCgpIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgZG93bjogZnVuY3Rpb24gZG93bigpIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5ldmVudExpc3RlbmVycyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5ldmVudExpc3RlbmVycyksIFsoMCwgX3V0aWxzLm9uU2Nyb2xsU3RhcnQpKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLmlzU2Nyb2xsaW5nID0gdHJ1ZTtcbiAgICAgIH0pLCAoMCwgX3V0aWxzLm9uKSgndG91Y2hzdGFydCcpKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLmlzU2Nyb2xsaW5nID0gdHJ1ZTtcbiAgICAgIH0pKHRoaXMud2hpcmxpZ2lnKSwgKDAsIF91dGlscy5vblNjcm9sbEVuZCkoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKF90aGlzMi5jYW5TZWxmQ29ycmVjdCgpKSB7XG4gICAgICAgICAgaWYgKF90aGlzMi5wcm9wcy5zbmFwVG9TbGlkZSkge1xuICAgICAgICAgICAgX3RoaXMyLnNsaWRlVG8oX3RoaXMyLmdldE5lYXJlc3RTbGlkZUluZGV4KCkpLmNhdGNoKF91dGlscy5ub29wKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMyLnByb3BzLmFmdGVyU2xpZGUoX3RoaXMyLmdldE5lYXJlc3RTbGlkZUluZGV4KCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgeyB0YXJnZXQ6IHRoaXMuRE9NTm9kZSB9KSwgKDAsIF91dGlscy5vbikoJ3RvdWNoZW5kJykoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoX3RoaXMyLmNhblNlbGZDb3JyZWN0KCkpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMuc25hcFRvU2xpZGUgPyBfdGhpczIuc2xpZGVUbyhfdGhpczIuZ2V0TmVhcmVzdFNsaWRlSW5kZXgoKSkuY2F0Y2goX3V0aWxzLm5vb3ApIDogX3RoaXMyLnByb3BzLmFmdGVyU2xpZGUoX3RoaXMyLmdldE5lYXJlc3RTbGlkZUluZGV4KCkpO1xuICAgICAgICB9XG4gICAgICB9KSh0aGlzLndoaXJsaWdpZyksICgwLCBfdXRpbHMub25Td2lwZSkoZnVuY3Rpb24gKGRpcmVjdGlvbikge1xuICAgICAgICBpZiAoIV90aGlzMi5wcm9wcy5wcmV2ZW50U3dpcGUgJiYgX3RoaXMyLnByb3BzLnNuYXBUb1NsaWRlKSB7XG4gICAgICAgICAgX3RoaXMyLnNsaWRlVG8oX3RoaXMyLnN0YXRlLmFjdGl2ZUluZGV4ICsgc2xpZGVCeVtkaXJlY3Rpb25dKCkpLmNhdGNoKF91dGlscy5ub29wKTtcbiAgICAgICAgfVxuICAgICAgfSkodGhpcy53aGlybGlnaWcpXSk7XG5cbiAgICAgIHRoaXMuc2xpZGVUbyh0aGlzLnByb3BzLnN0YXJ0QXQsIHsgaW1tZWRpYXRlOiB0cnVlIH0pLmNhdGNoKF91dGlscy5ub29wKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmIGZuKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhfcmVmMykge1xuICAgICAgdmFyIHNsaWRlQnkgPSBfcmVmMy5zbGlkZUJ5LFxuICAgICAgICAgIHZpc2libGVTbGlkZXMgPSBfcmVmMy52aXNpYmxlU2xpZGVzO1xuXG4gICAgICBpZiAoc2xpZGVCeSAhPT0gdGhpcy5wcm9wcy5zbGlkZUJ5IHx8IHZpc2libGVTbGlkZXMgIT09IHRoaXMucHJvcHMudmlzaWJsZVNsaWRlcykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2xpZGVCeTogc2xpZGVCeSB8fCB2aXNpYmxlU2xpZGVzIHx8IDEgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdGhpcy5jaGlsZENvdW50ID0gdGhpcy53aGlybGlnaWcgJiYgdGhpcy53aGlybGlnaWcuY2hpbGRyZW4gPyB0aGlzLndoaXJsaWdpZy5jaGlsZHJlbi5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAodGhpcy5zaG91bGRTZWxmQ29ycmVjdCgpKSB7XG4gICAgICAgIHZhciBuZWFyZXN0U2xpZGVJbmRleCA9IHRoaXMuZ2V0TmVhcmVzdFNsaWRlSW5kZXgoKTtcbiAgICAgICAgbmVhcmVzdFNsaWRlSW5kZXggIT09IHRoaXMuc3RhdGUuYWN0aXZlSW5kZXggJiYgdGhpcy5zbGlkZVRvKHRoaXMuZ2V0TmVhcmVzdFNsaWRlSW5kZXgoKSkuY2F0Y2goX3V0aWxzLm5vb3ApO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJldlByb3BzLnNsaWRlVG8gIT09IHRoaXMucHJvcHMuc2xpZGVUbykge1xuICAgICAgICB0aGlzLnNsaWRlVG8odGhpcy5wcm9wcy5zbGlkZVRvKS5jYXRjaChfdXRpbHMubm9vcCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcblxuXG4gICAgLy8gaXNBbmltYXRpbmcgc3RhdGUgaXMgdGhlIG9ubHkgaW1wb3J0YW50IHN0YXRlIHZhbHVlIHRvIHRoZSByZW5kZXJpbmcgb2YgdGhpcyBjb21wb25lbnRcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgX3JlZjQpIHtcbiAgICAgIHZhciBpc0FuaW1hdGluZyA9IF9yZWY0LmlzQW5pbWF0aW5nO1xuXG4gICAgICB2YXIgcHJvcFZhbHVlcyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoKDAsIF91dGlscy52YWx1ZXMpKHRoaXMucHJvcHMpKSwgW3RoaXMuc3RhdGUuaXNBbmltYXRpbmddKTtcbiAgICAgIHZhciBuZXh0UHJvcFZhbHVlcyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoKDAsIF91dGlscy52YWx1ZXMpKG5leHRQcm9wcykpLCBbaXNBbmltYXRpbmddKTtcbiAgICAgIHJldHVybiAhbmV4dFByb3BWYWx1ZXMuZXZlcnkoZnVuY3Rpb24gKHZhbCwgaSkge1xuICAgICAgICByZXR1cm4gdmFsID09PSBwcm9wVmFsdWVzW2ldO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbmV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB2YXIgY2hpbGRDb3VudCA9IHRoaXMuY2hpbGRDb3VudCxcbiAgICAgICAgICBwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gc3RhdGUuYWN0aXZlSW5kZXgsXG4gICAgICAgICAgc2xpZGVCeSA9IHN0YXRlLnNsaWRlQnk7XG4gICAgICB2YXIgaW5maW5pdGUgPSBwcm9wcy5pbmZpbml0ZTtcblxuICAgICAgdmFyIGZpcnN0SW5kZXggPSAwO1xuICAgICAgdmFyIGxhc3RJbmRleCA9IGNoaWxkQ291bnQgLSBzbGlkZUJ5O1xuXG4gICAgICBpZiAoIXNsaWRlQnkpIHtcbiAgICAgICAgdmFyIF9nZXRQYXJ0aWFsbHlPYnNjdXJlZCA9IHRoaXMuZ2V0UGFydGlhbGx5T2JzY3VyZWRTbGlkZXMoKSxcbiAgICAgICAgICAgIF9nZXRQYXJ0aWFsbHlPYnNjdXJlZDIgPSBfc2xpY2VkVG9BcnJheShfZ2V0UGFydGlhbGx5T2JzY3VyZWQsIDIpLFxuICAgICAgICAgICAgXyA9IF9nZXRQYXJ0aWFsbHlPYnNjdXJlZDJbMF0sXG4gICAgICAgICAgICBuZXh0U2xpZGUgPSBfZ2V0UGFydGlhbGx5T2JzY3VyZWQyWzFdO1xuXG4gICAgICAgIHZhciBuZXh0SW5maW50ZVNsaWRlID0gbmV4dFNsaWRlID09PSBjaGlsZENvdW50IC0gMSA/IDAgOiBuZXh0U2xpZGU7XG4gICAgICAgIHJldHVybiB0aGlzLnNsaWRlVG8oaW5maW5pdGUgPyBuZXh0SW5maW50ZVNsaWRlIDogbmV4dFNsaWRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5leHRBY3RpdmVDYW5kaWRhdGUgPSBhY3RpdmVJbmRleCArIHNsaWRlQnk7XG4gICAgICB2YXIgbmV4dEFjdGl2ZSA9IE1hdGgubWluKG5leHRBY3RpdmVDYW5kaWRhdGUsIGxhc3RJbmRleCk7XG4gICAgICB2YXIgbmV4dEFjdGl2ZUluZmluaXRlID0gYWN0aXZlSW5kZXggPT09IGxhc3RJbmRleCA/IGZpcnN0SW5kZXggOiBuZXh0QWN0aXZlO1xuICAgICAgcmV0dXJuIHRoaXMuc2xpZGVUbyhpbmZpbml0ZSA/IG5leHRBY3RpdmVJbmZpbml0ZSA6IG5leHRBY3RpdmUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3ByZXYnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcmV2KCkge1xuICAgICAgdmFyIGNoaWxkQ291bnQgPSB0aGlzLmNoaWxkQ291bnQsXG4gICAgICAgICAgc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHN0YXRlLmFjdGl2ZUluZGV4LFxuICAgICAgICAgIHNsaWRlQnkgPSBzdGF0ZS5zbGlkZUJ5O1xuICAgICAgdmFyIGluZmluaXRlID0gcHJvcHMuaW5maW5pdGU7XG5cbiAgICAgIHZhciBmaXJzdEluZGV4ID0gMDtcbiAgICAgIHZhciBsYXN0SW5kZXggPSBjaGlsZENvdW50IC0gc2xpZGVCeTtcblxuICAgICAgaWYgKCFzbGlkZUJ5KSB7XG4gICAgICAgIHZhciBwcmV2U2xpZGUgPSBNYXRoLm1heChhY3RpdmVJbmRleCAtIDEsIGZpcnN0SW5kZXgpO1xuICAgICAgICB2YXIgcHJldkluZmludGVTbGlkZSA9IHByZXZTbGlkZSA9PT0gYWN0aXZlSW5kZXggPyBjaGlsZENvdW50IC0gMSA6IHByZXZTbGlkZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2xpZGVUbyhpbmZpbml0ZSA/IHByZXZJbmZpbnRlU2xpZGUgOiBwcmV2U2xpZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV4dEFjdGl2ZSA9IE1hdGgubWF4KGFjdGl2ZUluZGV4IC0gc2xpZGVCeSwgZmlyc3RJbmRleCk7XG4gICAgICB2YXIgbmV4dEFjdGl2ZUluZmluaXRlID0gYWN0aXZlSW5kZXggPT09IGZpcnN0SW5kZXggPyBsYXN0SW5kZXggOiBuZXh0QWN0aXZlO1xuICAgICAgcmV0dXJuIHRoaXMuc2xpZGVUbyhpbmZpbml0ZSA/IG5leHRBY3RpdmVJbmZpbml0ZSA6IG5leHRBY3RpdmUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NsaWRlVG8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzbGlkZVRvKGluZGV4KSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIF9yZWY1ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgICAgICBfcmVmNSRpbW1lZGlhdGUgPSBfcmVmNS5pbW1lZGlhdGUsXG4gICAgICAgICAgaW1tZWRpYXRlID0gX3JlZjUkaW1tZWRpYXRlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWY1JGltbWVkaWF0ZTtcblxuICAgICAgaWYgKHRoaXMuY2hpbGRDb3VudCA9PT0gMCkgcmV0dXJuIFByb21pc2UucmVqZWN0KCdObyBjaGlsZHJlbiB0byBzbGlkZSB0bycpO1xuICAgICAgaWYgKCF0aGlzLndoaXJsaWdpZykgcmV0dXJuIFByb21pc2UucmVqZWN0KCdUaGUgV2hpcmxpZ2lnIGlzIG5vdCBtb3VudGVkJyk7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhZnRlclNsaWRlID0gX3Byb3BzLmFmdGVyU2xpZGUsXG4gICAgICAgICAgYmVmb3JlU2xpZGUgPSBfcHJvcHMuYmVmb3JlU2xpZGUsXG4gICAgICAgICAgZWFzaW5nID0gX3Byb3BzLmVhc2luZyxcbiAgICAgICAgICBkdXJhdGlvbiA9IF9wcm9wcy5hbmltYXRpb25EdXJhdGlvbixcbiAgICAgICAgICBpbmZpbml0ZSA9IF9wcm9wcy5pbmZpbml0ZSxcbiAgICAgICAgICBwcmV2ZW50U2Nyb2xsID0gX3Byb3BzLnByZXZlbnRTY3JvbGw7XG4gICAgICB2YXIgX3doaXJsaWdpZyA9IHRoaXMud2hpcmxpZ2lnLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3doaXJsaWdpZy5jaGlsZHJlbixcbiAgICAgICAgICBzY3JvbGxMZWZ0ID0gX3doaXJsaWdpZy5zY3JvbGxMZWZ0O1xuXG4gICAgICB2YXIgc2xpZGVJbmRleCA9ICgwLCBfdXRpbHMubm9ybWFsaXplSW5kZXgpKGluZGV4LCB0aGlzLmNoaWxkQ291bnQsIGluZmluaXRlKTtcbiAgICAgIHZhciBzdGFydGluZ0luZGV4ID0gdGhpcy5zdGF0ZS5hY3RpdmVJbmRleDtcbiAgICAgIHZhciBkZWx0YSA9IGNoaWxkcmVuW3NsaWRlSW5kZXhdLm9mZnNldExlZnQgLSBzY3JvbGxMZWZ0O1xuICAgICAgaWYgKHN0YXJ0aW5nSW5kZXggIT09IHNsaWRlSW5kZXgpIHtcbiAgICAgICAgYmVmb3JlU2xpZGUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzQW5pbWF0aW5nOiB0cnVlLCBhY3RpdmVJbmRleDogc2xpZGVJbmRleCB9KTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzLCBfKSB7XG4gICAgICAgIGlmIChpbW1lZGlhdGUpIHtcbiAgICAgICAgICBfdGhpczMud2hpcmxpZ2lnLnNjcm9sbExlZnQgPSBjaGlsZHJlbltzbGlkZUluZGV4XS5vZmZzZXRMZWZ0O1xuICAgICAgICAgIHJldHVybiByZXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgb3JpZ2luYWxPdmVyZmxvd1ggPSBwcmV2ZW50U2Nyb2xsID8gJ2hpZGRlbicgOiAnYXV0byc7XG4gICAgICAgICAgdmFyIHByb3AgPSAnc2Nyb2xsTGVmdCc7XG4gICAgICAgICAgcmV0dXJuIHJlcygoMCwgX3V0aWxzLmFuaW1hdGUpKF90aGlzMy53aGlybGlnaWcsIHsgcHJvcDogcHJvcCwgZGVsdGE6IGRlbHRhLCBlYXNpbmc6IGVhc2luZywgZHVyYXRpb246IGR1cmF0aW9uLCBvcmlnaW5hbE92ZXJmbG93WDogb3JpZ2luYWxPdmVyZmxvd1ggfSkpOyAvLyAuY2F0Y2gobm9vcClcbiAgICAgICAgfVxuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zZXRTdGF0ZSh7IGlzQW5pbWF0aW5nOiBmYWxzZSB9KTtcbiAgICAgICAgaWYgKHN0YXJ0aW5nSW5kZXggIT09IHNsaWRlSW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gYWZ0ZXJTbGlkZShzbGlkZUluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKF8pIHtcbiAgICAgICAgX3RoaXMzLnNldFN0YXRlKHsgaXNBbmltYXRpbmc6IGZhbHNlIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFmdGVyU2xpZGUgPSBfcHJvcHMyLmFmdGVyU2xpZGUsXG4gICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb24gPSBfcHJvcHMyLmFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgICAgIGJlZm9yZVNsaWRlID0gX3Byb3BzMi5iZWZvcmVTbGlkZSxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczIuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzMi5jbGFzc05hbWUsXG4gICAgICAgICAgZWFzaW5nID0gX3Byb3BzMi5lYXNpbmcsXG4gICAgICAgICAgaW5maW5pdGUgPSBfcHJvcHMyLmluZmluaXRlLFxuICAgICAgICAgIGd1dHRlciA9IF9wcm9wczIuZ3V0dGVyLFxuICAgICAgICAgIG5leHRLZXlzID0gX3Byb3BzMi5uZXh0S2V5cyxcbiAgICAgICAgICBwcmV2S2V5cyA9IF9wcm9wczIucHJldktleXMsXG4gICAgICAgICAgcHJldmVudFNjcm9sbCA9IF9wcm9wczIucHJldmVudFNjcm9sbCxcbiAgICAgICAgICBwcmV2ZW50QXV0b0NvcnJlY3QgPSBfcHJvcHMyLnByZXZlbnRBdXRvQ29ycmVjdCxcbiAgICAgICAgICBwcmV2ZW50U3dpcGUgPSBfcHJvcHMyLnByZXZlbnRTd2lwZSxcbiAgICAgICAgICBzbmFwVG9TbGlkZSA9IF9wcm9wczIuc25hcFRvU2xpZGUsXG4gICAgICAgICAgb25TbGlkZUNsaWNrID0gX3Byb3BzMi5vblNsaWRlQ2xpY2ssXG4gICAgICAgICAgc2xpZGVDbGFzcyA9IF9wcm9wczIuc2xpZGVDbGFzcyxcbiAgICAgICAgICBzbGlkZVRvID0gX3Byb3BzMi5zbGlkZVRvLFxuICAgICAgICAgIHNsaWRlQnkgPSBfcHJvcHMyLnNsaWRlQnksXG4gICAgICAgICAgc3RhcnRBdCA9IF9wcm9wczIuc3RhcnRBdCxcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wczIuc3R5bGUsXG4gICAgICAgICAgdmlzaWJsZVNsaWRlcyA9IF9wcm9wczIudmlzaWJsZVNsaWRlcyxcbiAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMyLCBbJ2FmdGVyU2xpZGUnLCAnYW5pbWF0aW9uRHVyYXRpb24nLCAnYmVmb3JlU2xpZGUnLCAnY2hpbGRyZW4nLCAnY2xhc3NOYW1lJywgJ2Vhc2luZycsICdpbmZpbml0ZScsICdndXR0ZXInLCAnbmV4dEtleXMnLCAncHJldktleXMnLCAncHJldmVudFNjcm9sbCcsICdwcmV2ZW50QXV0b0NvcnJlY3QnLCAncHJldmVudFN3aXBlJywgJ3NuYXBUb1NsaWRlJywgJ29uU2xpZGVDbGljaycsICdzbGlkZUNsYXNzJywgJ3NsaWRlVG8nLCAnc2xpZGVCeScsICdzdGFydEF0JywgJ3N0eWxlJywgJ3Zpc2libGVTbGlkZXMnXSk7XG5cbiAgICAgIHZhciBwcmV2ZW50U2Nyb2xsaW5nID0gcHJldmVudFNjcm9sbCA/ICdoaWRkZW4nIDogJ2F1dG8nO1xuICAgICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBmbGV4RmxvdzogJ3JvdyBub3dyYXAnLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgICBvdmVyZmxvd1g6IHByZXZlbnRTY3JvbGxpbmcsXG4gICAgICAgIG1zT3ZlcmZsb3dTdHlsZTogJy1tcy1hdXRvaGlkaW5nLXNjcm9sbGJhcicsIC8vIGNocm9tZSBsaWtlIHNjcm9sbGJhciBleHBlcmllbmNlIGZvciBJRS9FZGdlXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLCAvLyBtYWtlcyAud2hpcmxpZ2lnIGFuIG9mZnNldCBwYXJlbnRcbiAgICAgICAgdHJhbnNpdGlvbjogJ2FsbCAuMjVzIGVhc2UtaW4tcXVpbnQnLFxuICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlLCBzdHlsZXMpLFxuICAgICAgICAgIHJlZjogdGhpcy5zZXRXaGlybGlnaWdSZWYsXG4gICAgICAgICAgdGFiSW5kZXg6ICcwJyxcbiAgICAgICAgICBvbktleVVwOiB0aGlzLmhhbmRsZUtleVVwXG4gICAgICAgIH0sIHByb3BzKSxcbiAgICAgICAgUmVhY3QuQ2hpbGRyZW4ubWFwKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkcmVuKHRoaXMubmV4dCwgdGhpcy5wcmV2KSA6IGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGkpIHtcbiAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIF9zbGlkZTIuZGVmYXVsdCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBzbGlkZUNsYXNzLFxuICAgICAgICAgICAgICBrZXk6ICdzbGlkZS0nICsgaSxcbiAgICAgICAgICAgICAgYmFzaXM6IHZpc2libGVTbGlkZXMgPyAnY2FsYygoMTAwJSAtICgnICsgZ3V0dGVyICsgJyAqICcgKyAodmlzaWJsZVNsaWRlcyAtIDEpICsgJykpIC8gJyArIHZpc2libGVTbGlkZXMgKyAnKScgOiAnYXV0bycsXG4gICAgICAgICAgICAgIGd1dHRlcjogaSA+IDAgPyBndXR0ZXIgOiAnJyxcbiAgICAgICAgICAgICAgb25DbGljazogb25TbGlkZUNsaWNrXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hpbGRcbiAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gV2hpcmxpZ2lnO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5XaGlybGlnaWcuZGVmYXVsdFByb3BzID0ge1xuICBhZnRlclNsaWRlOiBfdXRpbHMubm9vcCxcbiAgYW5pbWF0aW9uRHVyYXRpb246IDUwMCxcbiAgYmVmb3JlU2xpZGU6IF91dGlscy5ub29wLFxuICBndXR0ZXI6ICcxZW0nLFxuICBuZXh0S2V5czogWydBcnJvd1JpZ2h0J10sXG4gIG9uU2xpZGVDbGljazogX3V0aWxzLm5vb3AsXG4gIHByZXZLZXlzOiBbJ0Fycm93TGVmdCddLFxuICBwcmV2ZW50QXV0b0NvcnJlY3Q6IGZhbHNlLFxuICBwcmV2ZW50U2Nyb2xsOiBmYWxzZSxcbiAgcHJldmVudFN3aXBlOiBmYWxzZSxcbiAgc25hcFRvU2xpZGU6IGZhbHNlLFxuICBzdGFydEF0OiAwLFxuICBzdHlsZToge31cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBXaGlybGlnaWc7XG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFNsaWRlID0gZnVuY3Rpb24gU2xpZGUoX3JlZikge1xuICB2YXIgX3JlZiRiYXNpcyA9IF9yZWYuYmFzaXMsXG4gICAgICBiYXNpcyA9IF9yZWYkYmFzaXMgPT09IHVuZGVmaW5lZCA/ICcxMDAlJyA6IF9yZWYkYmFzaXMsXG4gICAgICBfcmVmJGd1dHRlciA9IF9yZWYuZ3V0dGVyLFxuICAgICAgZ3V0dGVyID0gX3JlZiRndXR0ZXIgPT09IHVuZGVmaW5lZCA/ICcxZW0nIDogX3JlZiRndXR0ZXIsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWUsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbJ2Jhc2lzJywgJ2d1dHRlcicsICdjbGFzc05hbWUnLCAnY2hpbGRyZW4nXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZToge1xuICAgICAgICBmbGV4OiAnMCAwIGF1dG8nLFxuICAgICAgICB3aWR0aDogYmFzaXMsXG4gICAgICAgIG1hcmdpbkxlZnQ6IGd1dHRlclxuICAgICAgfVxuICAgIH0sIHByb3BzKSxcbiAgICBjaGlsZHJlblxuICApO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2xpZGU7XG5cbi8qKiovIH0pLFxuLyogMTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9tID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfd2hpcmxpZ2lnID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbnZhciBfd2hpcmxpZ2lnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3doaXJsaWdpZyk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cbnZhciBfbWFya2VkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cbnZhciBfbWFya2VkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcmtlZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBpc0NoZWNrYWJsZSA9IGZ1bmN0aW9uIGlzQ2hlY2thYmxlKHR5cGUpIHtcbiAgcmV0dXJuICgwLCBfdXRpbHMuaW5jbHVkZXMpKHR5cGUsIFsnY2hlY2tib3gnLCAncmFkaW8nXSk7XG59O1xudmFyIGNvZXJjZVRhYmxlID0ge1xuICBudW1iZXI6IE51bWJlcixcbiAgZnVuYzogZnVuY3Rpb24gZnVuYyhmbikge1xuICAgIHJldHVybiBGdW5jdGlvbihmbikoKTtcbiAgfSwgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBjaGVja2JveDogQm9vbGVhbixcbiAgcmFkaW86IEJvb2xlYW5cbn07XG52YXIgY29lcmNlVmFsdWVUb1R5cGUgPSBmdW5jdGlvbiBjb2VyY2VWYWx1ZVRvVHlwZShfcmVmKSB7XG4gIHZhciB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgdmFsdWUgPSBfcmVmLnZhbHVlO1xuXG4gIHZhciBjb2VyY2VyID0gdHlwZSBpbiBjb2VyY2VUYWJsZSA/IGNvZXJjZVRhYmxlW3R5cGVdIDogZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgcmV0dXJuIGlkZW50O1xuICB9O1xuICByZXR1cm4gY29lcmNlcih2YWx1ZSk7XG59O1xuXG52YXIgU2xpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNsaWRlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2xpZGVyKCkge1xuICAgIHZhciBfcmVmMjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2xpZGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYyID0gU2xpZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2xpZGVyKSkuY2FsbC5hcHBseShfcmVmMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgYWZ0ZXJTbGlkZTogX3RoaXMucHJvcHMuYWZ0ZXJTbGlkZSxcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBfdGhpcy5wcm9wcy5hbmltYXRpb25EdXJhdGlvbixcbiAgICAgIGJlZm9yZVNsaWRlOiBfdGhpcy5wcm9wcy5iZWZvcmVTbGlkZSxcbiAgICAgIGNsYXNzTmFtZTogX3RoaXMucHJvcHMuY2xhc3NOYW1lLFxuICAgICAgZWFzaW5nOiBfdGhpcy5wcm9wcy5lYXNpbmcsXG4gICAgICBpbmZpbml0ZTogX3RoaXMucHJvcHMuaW5maW5pdGUsXG4gICAgICBndXR0ZXI6IF90aGlzLnByb3BzLmd1dHRlcixcbiAgICAgIG9uU2xpZGVDbGljazogX3RoaXMucHJvcHMub25TbGlkZUNsaWNrLFxuICAgICAgcHJldmVudFNjcm9sbDogX3RoaXMucHJvcHMucHJldmVudFNjcm9sbCxcbiAgICAgIHNuYXBUb1NsaWRlOiBfdGhpcy5wcm9wcy5zbmFwVG9TbGlkZSxcbiAgICAgIHNsaWRlQnk6IF90aGlzLnByb3BzLnNsaWRlQnksXG4gICAgICBzbGlkZUNsYXNzOiBfdGhpcy5wcm9wcy5zbGlkZUNsYXNzLFxuICAgICAgc2xpZGVUbzogX3RoaXMucHJvcHMuc2xpZGVUbyxcbiAgICAgIHN0YXJ0QXQ6IF90aGlzLnByb3BzLnN0YXJ0QXQsXG4gICAgICB2aXNpYmxlU2xpZGVzOiBfdGhpcy5wcm9wcy52aXNpYmxlU2xpZGVzXG4gICAgfSwgX3RoaXMuaGFuZGxlQWZ0ZXJTbGlkZSA9IGZ1bmN0aW9uIChjdXJyZW50U2xpZGUpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGUgfSk7XG4gICAgfSwgX3RoaXMuc2V0UmVmID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgIF90aGlzW25hbWVdID0gcmVmO1xuICAgICAgfTtcbiAgICB9LCBfdGhpcy5zZXRTdGF0ZUZyb21JbnB1dCA9IGZ1bmN0aW9uIChwcm9wTmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gX3JlZjMudGFyZ2V0O1xuICAgICAgICB2YXIgY2hlY2tlZCA9IHRhcmdldC5jaGVja2VkLFxuICAgICAgICAgICAgdHlwZSA9IHRhcmdldC50eXBlO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKF9kZWZpbmVQcm9wZXJ0eSh7fSwgcHJvcE5hbWUsIGlzQ2hlY2thYmxlKHR5cGUpID8gY2hlY2tlZCA6IGNvZXJjZVZhbHVlVG9UeXBlKHRhcmdldCkpKTtcbiAgICAgIH07XG4gICAgfSwgX3RoaXMuQ29udHJvbCA9IGZ1bmN0aW9uIChfcmVmNCkge1xuICAgICAgdmFyIGxhYmVsID0gX3JlZjQubGFiZWwsXG4gICAgICAgICAgdHlwZSA9IF9yZWY0LnR5cGUsXG4gICAgICAgICAgbmFtZSA9IF9yZWY0Lm5hbWU7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdsYWJlbCcsXG4gICAgICAgIHsgaHRtbEZvcjogbmFtZSwgY2xhc3NOYW1lOiAnb3B0aW9uJyB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdsYWJlbCcgfSxcbiAgICAgICAgICBsYWJlbFxuICAgICAgICApLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG4gICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgIGlkOiBuYW1lLFxuICAgICAgICAgIGNoZWNrZWQ6IGlzQ2hlY2thYmxlKHR5cGUpICYmIF90aGlzLnN0YXRlW25hbWVdLFxuICAgICAgICAgIHZhbHVlOiBpc0NoZWNrYWJsZSh0eXBlKSA/IG5hbWUgOiBfdGhpcy5zdGF0ZVtuYW1lXSxcbiAgICAgICAgICBvbkNoYW5nZTogX3RoaXMuc2V0U3RhdGVGcm9tSW5wdXQobmFtZSlcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2xpZGVyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGFmdGVyU2xpZGU6IG5leHRQcm9wcy5hZnRlclNsaWRlLFxuICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogbmV4dFByb3BzLmFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgICBiZWZvcmVTbGlkZTogbmV4dFByb3BzLmJlZm9yZVNsaWRlLFxuICAgICAgICBjbGFzc05hbWU6IG5leHRQcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGVhc2luZzogbmV4dFByb3BzLmVhc2luZyxcbiAgICAgICAgaW5maW5pdGU6IG5leHRQcm9wcy5pbmZpbml0ZSxcbiAgICAgICAgZ3V0dGVyOiBuZXh0UHJvcHMuZ3V0dGVyLFxuICAgICAgICBvblNsaWRlQ2xpY2s6IG5leHRQcm9wcy5vblNsaWRlQ2xpY2ssXG4gICAgICAgIHByZXZlbnRTY3JvbGw6IG5leHRQcm9wcy5wcmV2ZW50U2Nyb2xsLFxuICAgICAgICBzbmFwVG9TbGlkZTogbmV4dFByb3BzLnNuYXBUb1NsaWRlLFxuICAgICAgICBzbGlkZUJ5OiBuZXh0UHJvcHMuc2xpZGVCeSxcbiAgICAgICAgc2xpZGVDbGFzczogbmV4dFByb3BzLnNsaWRlQ2xhc3MsXG4gICAgICAgIHNsaWRlVG86IG5leHRQcm9wcy5zbGlkZVRvLFxuICAgICAgICBzdGFydEF0OiBuZXh0UHJvcHMuc3RhcnRBdCxcbiAgICAgICAgdmlzaWJsZVNsaWRlczogbmV4dFByb3BzLnZpc2libGVTbGlkZXNcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcGVyc2lzdGVkU3RhdGUgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3JlYWN0LXdoaXJsaWdpZycpO1xuICAgICAgICBpZiAocGVyc2lzdGVkU3RhdGUpIHtcbiAgICAgICAgICB2YXIgc3RhdGUgPSBKU09OLnBhcnNlKHBlcnNpc3RlZFN0YXRlKTtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoXykge31cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3JlYWN0LXdoaXJsaWdpZycsIEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uID0gX3N0YXRlLmFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgICAgIGJlZm9yZVNsaWRlID0gX3N0YXRlLmJlZm9yZVNsaWRlLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF9zdGF0ZS5jbGFzc05hbWUsXG4gICAgICAgICAgZWFzaW5nID0gX3N0YXRlLmVhc2luZyxcbiAgICAgICAgICBpbmZpbml0ZSA9IF9zdGF0ZS5pbmZpbml0ZSxcbiAgICAgICAgICBndXR0ZXIgPSBfc3RhdGUuZ3V0dGVyLFxuICAgICAgICAgIG9uU2xpZGVDbGljayA9IF9zdGF0ZS5vblNsaWRlQ2xpY2ssXG4gICAgICAgICAgcHJldmVudFNjcm9sbCA9IF9zdGF0ZS5wcmV2ZW50U2Nyb2xsLFxuICAgICAgICAgIHNuYXBUb1NsaWRlID0gX3N0YXRlLnNuYXBUb1NsaWRlLFxuICAgICAgICAgIHNsaWRlQnkgPSBfc3RhdGUuc2xpZGVCeSxcbiAgICAgICAgICBzbGlkZUNsYXNzID0gX3N0YXRlLnNsaWRlQ2xhc3MsXG4gICAgICAgICAgc2xpZGVUbyA9IF9zdGF0ZS5zbGlkZVRvLFxuICAgICAgICAgIHN0YXJ0QXQgPSBfc3RhdGUuc3RhcnRBdCxcbiAgICAgICAgICB2aXNpYmxlU2xpZGVzID0gX3N0YXRlLnZpc2libGVTbGlkZXM7XG5cbiAgICAgIHZhciBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi53aGlybGlnaWcubmV4dCgpLmNhdGNoKF91dGlscy5ub29wKTtcbiAgICAgIH07XG4gICAgICB2YXIgcHJldiA9IGZ1bmN0aW9uIHByZXYoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIud2hpcmxpZ2lnLnByZXYoKS5jYXRjaChfdXRpbHMubm9vcCk7XG4gICAgICB9O1xuICAgICAgdmFyIGFmdGVyID0gZnVuY3Rpb24gYWZ0ZXIoaWR4KSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuaGFuZGxlQWZ0ZXJTbGlkZShpZHgpO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIG51bGwsXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnc2xpZGVyJyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX3doaXJsaWdpZzIuZGVmYXVsdCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgYWZ0ZXJTbGlkZTogYWZ0ZXIsXG4gICAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBhbmltYXRpb25EdXJhdGlvbixcbiAgICAgICAgICAgICAgYmVmb3JlU2xpZGU6IGJlZm9yZVNsaWRlLFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgZWFzaW5nOiBlYXNpbmcsXG4gICAgICAgICAgICAgIGluZmluaXRlOiBpbmZpbml0ZSxcbiAgICAgICAgICAgICAgZ3V0dGVyOiBndXR0ZXIsXG4gICAgICAgICAgICAgIG9uU2xpZGVDbGljazogb25TbGlkZUNsaWNrLFxuICAgICAgICAgICAgICBwcmV2ZW50U2Nyb2xsOiBwcmV2ZW50U2Nyb2xsLFxuICAgICAgICAgICAgICBzbmFwVG9TbGlkZTogc25hcFRvU2xpZGUsXG4gICAgICAgICAgICAgIHJlZjogdGhpcy5zZXRSZWYoJ3doaXJsaWdpZycpLFxuICAgICAgICAgICAgICBzbGlkZUJ5OiBzbGlkZUJ5LFxuICAgICAgICAgICAgICBzbGlkZUNsYXNzOiBzbGlkZUNsYXNzLFxuICAgICAgICAgICAgICBzbGlkZVRvOiBzbGlkZVRvLFxuICAgICAgICAgICAgICBzdGFydEF0OiBzdGFydEF0LFxuICAgICAgICAgICAgICB2aXNpYmxlU2xpZGVzOiB2aXNpYmxlU2xpZGVzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hpbGRyZW5cbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NvbnRyb2xzJyB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHsgY2xhc3NOYW1lOiAncHJldkJ1dHRvbicsIG9uQ2xpY2s6IHByZXYgfSksXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgeyBjbGFzc05hbWU6ICduZXh0QnV0dG9uJywgb25DbGljazogbmV4dCB9KVxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdvcHRpb25zJyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdvcHRpb24gY3VycmVudFNsaWRlJyB9LFxuICAgICAgICAgICAgJ0N1cnJlbnQgc2xpZGUgaXMgJyxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuY3VycmVudFNsaWRlXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCh0aGlzLkNvbnRyb2wsIHsgbGFiZWw6ICdhZnRlclNsaWRlJywgdHlwZTogJ2Z1bmMnLCBuYW1lOiAnYWZ0ZXJTbGlkZScgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodGhpcy5Db250cm9sLCB7IGxhYmVsOiAnYW5pbWF0aW9uRHVyYXRpb24nLCB0eXBlOiAnbnVtYmVyJywgbmFtZTogJ2FuaW1hdGlvbkR1cmF0aW9uJyB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCh0aGlzLkNvbnRyb2wsIHsgbGFiZWw6ICdiZWZvcmVTbGlkZScsIHR5cGU6ICdmdW5jJywgbmFtZTogJ2JlZm9yZVNsaWRlJyB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCh0aGlzLkNvbnRyb2wsIHsgbGFiZWw6ICdjbGFzc05hbWUnLCB0eXBlOiAndGV4dCcsIG5hbWU6ICdjbGFzc05hbWUnIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHRoaXMuQ29udHJvbCwgeyBsYWJlbDogJ2Vhc2luZycsIHR5cGU6ICdmdW5jJywgbmFtZTogJ2Vhc2luZycgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodGhpcy5Db250cm9sLCB7IGxhYmVsOiAnaW5maW5pdGUnLCB0eXBlOiAnY2hlY2tib3gnLCBuYW1lOiAnaW5maW5pdGUnIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHRoaXMuQ29udHJvbCwgeyBsYWJlbDogJ2d1dHRlcicsIHR5cGU6ICd0ZXh0JywgbmFtZTogJ2d1dHRlcicgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodGhpcy5Db250cm9sLCB7IGxhYmVsOiAnb25TbGlkZUNsaWNrJywgdHlwZTogJ2Z1bmMnLCBuYW1lOiAnb25TbGlkZUNsaWNrJyB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCh0aGlzLkNvbnRyb2wsIHsgbGFiZWw6ICdwcmV2ZW50U2Nyb2xsJywgdHlwZTogJ2NoZWNrYm94JywgbmFtZTogJ3ByZXZlbnRTY3JvbGwnIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHRoaXMuQ29udHJvbCwgeyBsYWJlbDogJ3NuYXBUb1NsaWRlJywgdHlwZTogJ2NoZWNrYm94JywgbmFtZTogJ3NuYXBUb1NsaWRlJyB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCh0aGlzLkNvbnRyb2wsIHsgbGFiZWw6ICdzbGlkZUJ5JywgdHlwZTogJ251bWJlcicsIG5hbWU6ICdzbGlkZUJ5JyB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCh0aGlzLkNvbnRyb2wsIHsgbGFiZWw6ICdzbGlkZUNsYXNzJywgdHlwZTogJ3RleHQnLCBuYW1lOiAnc2xpZGVDbGFzcycgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodGhpcy5Db250cm9sLCB7IGxhYmVsOiAnc2xpZGVUbycsIHR5cGU6ICdudW1iZXInLCBuYW1lOiAnc2xpZGVUbycgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodGhpcy5Db250cm9sLCB7IGxhYmVsOiAnc3RhcnRBdCcsIHR5cGU6ICdudW1iZXInLCBuYW1lOiAnc3RhcnRBdCcgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodGhpcy5Db250cm9sLCB7IGxhYmVsOiAndmlzaWJsZVNsaWRlcycsIHR5cGU6ICdudW1iZXInLCBuYW1lOiAndmlzaWJsZVNsaWRlcycgfSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2xpZGVyO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuU2xpZGVyLnByb3BUeXBlcyA9IHtcbiAgYWZ0ZXJTbGlkZTogX3Byb3BUeXBlcy5mdW5jLFxuICBhbmltYXRpb25EdXJhdGlvbjogX3Byb3BUeXBlcy5udW1iZXIsXG4gIGJlZm9yZVNsaWRlOiBfcHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmFycmF5LFxuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuc3RyaW5nLFxuICBlYXNpbmc6IF9wcm9wVHlwZXMuZnVuYyxcbiAgZ3V0dGVyOiBfcHJvcFR5cGVzLnN0cmluZyxcbiAgaW5maW5pdGU6IF9wcm9wVHlwZXMuYm9vbCxcbiAgb25TbGlkZUNsaWNrOiBfcHJvcFR5cGVzLmZ1bmMsXG4gIHByZXZlbnRTY3JvbGw6IF9wcm9wVHlwZXMuYm9vbCxcbiAgc2xpZGVCeTogX3Byb3BUeXBlcy5udW1iZXIsXG4gIHNsaWRlQ2xhc3M6IF9wcm9wVHlwZXMuc3RyaW5nLFxuICBzbGlkZVRvOiBfcHJvcFR5cGVzLm51bWJlcixcbiAgc25hcFRvU2xpZGU6IF9wcm9wVHlwZXMuYm9vbCxcbiAgc3RhcnRBdDogX3Byb3BUeXBlcy5udW1iZXIsXG4gIHZpc2libGVTbGlkZXM6IF9wcm9wVHlwZXMubnVtYmVyXG59O1xuU2xpZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYWZ0ZXJTbGlkZTogZnVuY3Rpb24gYWZ0ZXJTbGlkZShuZXdJbmRleCkge1xuICAgIHJldHVybiBjb25zb2xlLmxvZygnc2xpZCB0byBpbmRleCAnICsgbmV3SW5kZXgpO1xuICB9LFxuICBhbmltYXRpb25EdXJhdGlvbjogMzAwLFxuICBiZWZvcmVTbGlkZTogZnVuY3Rpb24gYmVmb3JlU2xpZGUobmV3SW5kZXgpIHtcbiAgICByZXR1cm4gY29uc29sZS5sb2coJ2Fib3V0IHRvIHNsaWRlIHRvIGluZGV4ICcgKyBuZXdJbmRleCk7XG4gIH0sXG4gIGNsYXNzTmFtZTogJ3doaXJsaWdpZycsXG4gIGd1dHRlcjogJzFlbScsXG4gIG9uU2xpZGVDbGljazogZnVuY3Rpb24gb25TbGlkZUNsaWNrKCkge1xuICAgIGNvbnNvbGUubG9nKCdZb3UgY2xpY2tlZCBvbiBhIHNsaWRlIScpO1xuICB9LFxuICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyh0KSB7XG4gICAgcmV0dXJuIHQ7XG4gIH0sXG4gIGluZmluaXRlOiBmYWxzZSxcbiAgcHJldmVudFNjcm9sbDogZmFsc2UsXG4gIHNsaWRlQ2xhc3M6ICdzbGlkZUNsYXNzTmFtZScsXG4gIHNsaWRlQnk6IDAsXG4gIHNsaWRlVG86IDAsXG4gIHNuYXBUb1NsaWRlOiBmYWxzZSxcbiAgc3RhcnRBdDogMCxcbiAgdmlzaWJsZVNsaWRlczogMFxufTtcblxuXG52YXIgc2xpZGVzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShBcnJheSg3KS5maWxsKCkubWFwKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBzcmM6ICdodHRwczovL3BsYWNlYmVhcmQuaXQnLFxuICAgIGhlaWdodDogMzAwLFxuICAgIHdpZHRoOiAzMDAsXG4gICAgam9pbmVyOiAneCdcbiAgfTtcbn0pKSwgW3tcbiAgdGV4dDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2gzJyxcbiAgICBudWxsLFxuICAgIFsnaXQnLCAnbmVlZCcsICdub3QnLCAnb25seScsICdiZScsICdiZWFyZHMhJ10ubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBrZXk6IHQsIGNsYXNzTmFtZTogJ2xpbmUgYWxpZ24tcmlnaHQnIH0sXG4gICAgICAgIHRcbiAgICAgICk7XG4gICAgfSlcbiAgKVxufSwge1xuICBzcmM6ICdodHRwczovL2ZpbGxtdXJyYXkuY29tJyxcbiAgaGVpZ2h0OiAzMDAsXG4gIHdpZHRoOiAzMDAsXG4gIGpvaW5lcjogJy8nXG59LCB7XG4gIHRleHQ6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdoMycsXG4gICAgbnVsbCxcbiAgICBbJ2l0JywgJ2NhbicsICdiZScsICdhbnl0aGluZycsICd5b3UnLCAnd2FudCEnXS5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7IGtleTogdCwgY2xhc3NOYW1lOiAnbGluZSBhbGlnbi1sZWZ0JyB9LFxuICAgICAgICB0XG4gICAgICApO1xuICAgIH0pXG4gIClcbn0sIHsgdGV4dDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2gzJyxcbiAgICBudWxsLFxuICAgICdGZWF0dXJpbmc6J1xuICApIH0sIHsgdGV4dDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ3AnLFxuICAgIG51bGwsXG4gICAgJ0EgbmF0aXZlIHNjcm9sbGluZyBcIndoaXJsaWdpZ1wiJ1xuICApIH0sIHsgdGV4dDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ3AnLFxuICAgIG51bGwsXG4gICAgJ3NuYXAtdG8tc2xpZGUgb3B0aW9uJ1xuICApIH0sIHsgdGV4dDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ3AnLFxuICAgIG51bGwsXG4gICAgJ3NldCB0aGUgbnVtYmVyIG9mIHNsaWRlIHZpc2libGUgYXQgYSB0aW1lJ1xuICApIH0sIHsgdGV4dDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ3AnLFxuICAgIG51bGwsXG4gICAgJ3N0YXJ0IGF0IGFueSBzbGlkZSB5b3Ugd2FudCdcbiAgKSB9LCB7IHRleHQ6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdwJyxcbiAgICBudWxsLFxuICAgICdzbGlkZSBpbmRlY2llcyBhcmUgbm9ybWFsaXplZCB0byBzdGF5IHdpdGhpbiB0aGUgc2xpZGUgY291bnQgcmFuZ2UnXG4gICkgfV0pO1xuXG52YXIgRGVtbyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICBfaW5oZXJpdHMoRGVtbywgX0NvbXBvbmVudDIpO1xuXG4gIGZ1bmN0aW9uIERlbW8oKSB7XG4gICAgdmFyIF9yZWY1O1xuXG4gICAgdmFyIF90ZW1wMiwgX3RoaXMzLCBfcmV0MjtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZW1vKTtcblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQyID0gKF90ZW1wMiA9IChfdGhpczMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZjUgPSBEZW1vLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRGVtbykpLmNhbGwuYXBwbHkoX3JlZjUsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMzKSwgX3RoaXMzLnN0YXRlID0geyBkb2NzOiAnJyB9LCBfdGVtcDIpLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpczMsIF9yZXQyKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEZW1vLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB3aW5kb3cuZmV0Y2goJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9qYW5lL3JlYWN0LXdoaXJsaWdpZy9tYXN0ZXIvUkVBRE1FLm1kJykudGhlbihmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gYS50ZXh0KCk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIF90aGlzNC5zZXRTdGF0ZSh7IGRvY3M6ICgwLCBfbWFya2VkMi5kZWZhdWx0KSh0KSB9KTtcbiAgICAgIH0pLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnd3JhcHBlcicgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiB0aGlzLnN0YXRlLmRvY3MgfSwgY2xhc3NOYW1lOiAnbWQnIH0pLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBTbGlkZXIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBzbGlkZXMubWFwKGZ1bmN0aW9uIChfcmVmNiwgaSkge1xuICAgICAgICAgICAgdmFyIHNyYyA9IF9yZWY2LnNyYyxcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBfcmVmNi5oZWlnaHQsXG4gICAgICAgICAgICAgICAgd2lkdGggPSBfcmVmNi53aWR0aCxcbiAgICAgICAgICAgICAgICBqb2luZXIgPSBfcmVmNi5qb2luZXIsXG4gICAgICAgICAgICAgICAgdGV4dCA9IF9yZWY2LnRleHQ7XG4gICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdmaWd1cmUnLFxuICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ215U2xpZGUnLCBrZXk6IHNyYyArICctJyArIGkgfSxcbiAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2ZpZ2NhcHRpb24nLFxuICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY2FwdGlvbicgfSxcbiAgICAgICAgICAgICAgICAnU2xpZGUgaW5kZXggJyxcbiAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIHNyYyAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW1nJywgeyBhbHQ6ICdQbGFjZSBab21iaWUnLCBzcmM6IHNyYyArICcvJyArIHdpZHRoICsgam9pbmVyICsgaGVpZ2h0ICsgJz8nICsgaSB9KSxcbiAgICAgICAgICAgICAgdGV4dCAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3RleHQnIH0sXG4gICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERlbW87XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG4oMCwgX3JlYWN0RG9tLnJlbmRlcikoX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRGVtbywgbnVsbCksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JykpO1xuXG4vKioqLyB9KSxcbi8qIDE5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKGZhbHNlKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKSgpO1xufVxuXG5cbi8qKiovIH0pLFxuLyogMjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblxuXG52YXIgZW1wdHlGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xudmFyIGludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuXG5cbi8qKiovIH0pLFxuLyogMjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjtcblxuLyoqKi8gfSksXG4vKiAyMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cblxuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAoZmFsc2UpIHtcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcblxuLyoqKi8gfSksXG4vKiAyMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG5cblxuLyoqKi8gfSksXG4vKiAyNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7LyoqXG4gKiBtYXJrZWQgLSBhIG1hcmtkb3duIHBhcnNlclxuICogQ29weXJpZ2h0IChjKSAyMDExLTIwMTQsIENocmlzdG9waGVyIEplZmZyZXkuIChNSVQgTGljZW5zZWQpXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2hqai9tYXJrZWRcbiAqL1xuXG47KGZ1bmN0aW9uKCkge1xuXG4vKipcbiAqIEJsb2NrLUxldmVsIEdyYW1tYXJcbiAqL1xuXG52YXIgYmxvY2sgPSB7XG4gIG5ld2xpbmU6IC9eXFxuKy8sXG4gIGNvZGU6IC9eKCB7NH1bXlxcbl0rXFxuKikrLyxcbiAgZmVuY2VzOiBub29wLFxuICBocjogL14oICpbLSpfXSl7Myx9ICooPzpcXG4rfCQpLyxcbiAgaGVhZGluZzogL14gKigjezEsNn0pICooW15cXG5dKz8pICojKiAqKD86XFxuK3wkKS8sXG4gIG5wdGFibGU6IG5vb3AsXG4gIGxoZWFkaW5nOiAvXihbXlxcbl0rKVxcbiAqKD18LSl7Mix9ICooPzpcXG4rfCQpLyxcbiAgYmxvY2txdW90ZTogL14oICo+W15cXG5dKyhcXG4oPyFkZWYpW15cXG5dKykqXFxuKikrLyxcbiAgbGlzdDogL14oICopKGJ1bGwpIFtcXHNcXFNdKz8oPzpocnxkZWZ8XFxuezIsfSg/ISApKD8hXFwxYnVsbCApXFxuKnxcXHMqJCkvLFxuICBodG1sOiAvXiAqKD86Y29tbWVudCAqKD86XFxufFxccyokKXxjbG9zZWQgKig/OlxcbnsyLH18XFxzKiQpfGNsb3NpbmcgKig/OlxcbnsyLH18XFxzKiQpKS8sXG4gIGRlZjogL14gKlxcWyhbXlxcXV0rKVxcXTogKjw/KFteXFxzPl0rKT4/KD86ICtbXCIoXShbXlxcbl0rKVtcIildKT8gKig/Olxcbit8JCkvLFxuICB0YWJsZTogbm9vcCxcbiAgcGFyYWdyYXBoOiAvXigoPzpbXlxcbl0rXFxuPyg/IWhyfGhlYWRpbmd8bGhlYWRpbmd8YmxvY2txdW90ZXx0YWd8ZGVmKSkrKVxcbiovLFxuICB0ZXh0OiAvXlteXFxuXSsvXG59O1xuXG5ibG9jay5idWxsZXQgPSAvKD86WyorLV18XFxkK1xcLikvO1xuYmxvY2suaXRlbSA9IC9eKCAqKShidWxsKSBbXlxcbl0qKD86XFxuKD8hXFwxYnVsbCApW15cXG5dKikqLztcbmJsb2NrLml0ZW0gPSByZXBsYWNlKGJsb2NrLml0ZW0sICdnbScpXG4gICgvYnVsbC9nLCBibG9jay5idWxsZXQpXG4gICgpO1xuXG5ibG9jay5saXN0ID0gcmVwbGFjZShibG9jay5saXN0KVxuICAoL2J1bGwvZywgYmxvY2suYnVsbGV0KVxuICAoJ2hyJywgJ1xcXFxuKyg/PVxcXFwxPyg/OlstKl9dICopezMsfSg/OlxcXFxuK3wkKSknKVxuICAoJ2RlZicsICdcXFxcbisoPz0nICsgYmxvY2suZGVmLnNvdXJjZSArICcpJylcbiAgKCk7XG5cbmJsb2NrLmJsb2NrcXVvdGUgPSByZXBsYWNlKGJsb2NrLmJsb2NrcXVvdGUpXG4gICgnZGVmJywgYmxvY2suZGVmKVxuICAoKTtcblxuYmxvY2suX3RhZyA9ICcoPyEoPzonXG4gICsgJ2F8ZW18c3Ryb25nfHNtYWxsfHN8Y2l0ZXxxfGRmbnxhYmJyfGRhdGF8dGltZXxjb2RlJ1xuICArICd8dmFyfHNhbXB8a2JkfHN1YnxzdXB8aXxifHV8bWFya3xydWJ5fHJ0fHJwfGJkaXxiZG8nXG4gICsgJ3xzcGFufGJyfHdicnxpbnN8ZGVsfGltZylcXFxcYilcXFxcdysoPyE6L3xbXlxcXFx3XFxcXHNAXSpAKVxcXFxiJztcblxuYmxvY2suaHRtbCA9IHJlcGxhY2UoYmxvY2suaHRtbClcbiAgKCdjb21tZW50JywgLzwhLS1bXFxzXFxTXSo/LS0+LylcbiAgKCdjbG9zZWQnLCAvPCh0YWcpW1xcc1xcU10rPzxcXC9cXDE+LylcbiAgKCdjbG9zaW5nJywgLzx0YWcoPzpcIlteXCJdKlwifCdbXiddKid8W14nXCI+XSkqPz4vKVxuICAoL3RhZy9nLCBibG9jay5fdGFnKVxuICAoKTtcblxuYmxvY2sucGFyYWdyYXBoID0gcmVwbGFjZShibG9jay5wYXJhZ3JhcGgpXG4gICgnaHInLCBibG9jay5ocilcbiAgKCdoZWFkaW5nJywgYmxvY2suaGVhZGluZylcbiAgKCdsaGVhZGluZycsIGJsb2NrLmxoZWFkaW5nKVxuICAoJ2Jsb2NrcXVvdGUnLCBibG9jay5ibG9ja3F1b3RlKVxuICAoJ3RhZycsICc8JyArIGJsb2NrLl90YWcpXG4gICgnZGVmJywgYmxvY2suZGVmKVxuICAoKTtcblxuLyoqXG4gKiBOb3JtYWwgQmxvY2sgR3JhbW1hclxuICovXG5cbmJsb2NrLm5vcm1hbCA9IG1lcmdlKHt9LCBibG9jayk7XG5cbi8qKlxuICogR0ZNIEJsb2NrIEdyYW1tYXJcbiAqL1xuXG5ibG9jay5nZm0gPSBtZXJnZSh7fSwgYmxvY2subm9ybWFsLCB7XG4gIGZlbmNlczogL14gKihgezMsfXx+ezMsfSlbIFxcLl0qKFxcUyspPyAqXFxuKFtcXHNcXFNdKj8pXFxzKlxcMSAqKD86XFxuK3wkKS8sXG4gIHBhcmFncmFwaDogL14vLFxuICBoZWFkaW5nOiAvXiAqKCN7MSw2fSkgKyhbXlxcbl0rPykgKiMqICooPzpcXG4rfCQpL1xufSk7XG5cbmJsb2NrLmdmbS5wYXJhZ3JhcGggPSByZXBsYWNlKGJsb2NrLnBhcmFncmFwaClcbiAgKCcoPyEnLCAnKD8hJ1xuICAgICsgYmxvY2suZ2ZtLmZlbmNlcy5zb3VyY2UucmVwbGFjZSgnXFxcXDEnLCAnXFxcXDInKSArICd8J1xuICAgICsgYmxvY2subGlzdC5zb3VyY2UucmVwbGFjZSgnXFxcXDEnLCAnXFxcXDMnKSArICd8JylcbiAgKCk7XG5cbi8qKlxuICogR0ZNICsgVGFibGVzIEJsb2NrIEdyYW1tYXJcbiAqL1xuXG5ibG9jay50YWJsZXMgPSBtZXJnZSh7fSwgYmxvY2suZ2ZtLCB7XG4gIG5wdGFibGU6IC9eICooXFxTLipcXHwuKilcXG4gKihbLTpdKyAqXFx8Wy18IDpdKilcXG4oKD86LipcXHwuKig/OlxcbnwkKSkqKVxcbiovLFxuICB0YWJsZTogL14gKlxcfCguKylcXG4gKlxcfCggKlstOl0rWy18IDpdKilcXG4oKD86ICpcXHwuKig/OlxcbnwkKSkqKVxcbiovXG59KTtcblxuLyoqXG4gKiBCbG9jayBMZXhlclxuICovXG5cbmZ1bmN0aW9uIExleGVyKG9wdGlvbnMpIHtcbiAgdGhpcy50b2tlbnMgPSBbXTtcbiAgdGhpcy50b2tlbnMubGlua3MgPSB7fTtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBtYXJrZWQuZGVmYXVsdHM7XG4gIHRoaXMucnVsZXMgPSBibG9jay5ub3JtYWw7XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5nZm0pIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRhYmxlcykge1xuICAgICAgdGhpcy5ydWxlcyA9IGJsb2NrLnRhYmxlcztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ydWxlcyA9IGJsb2NrLmdmbTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBFeHBvc2UgQmxvY2sgUnVsZXNcbiAqL1xuXG5MZXhlci5ydWxlcyA9IGJsb2NrO1xuXG4vKipcbiAqIFN0YXRpYyBMZXggTWV0aG9kXG4gKi9cblxuTGV4ZXIubGV4ID0gZnVuY3Rpb24oc3JjLCBvcHRpb25zKSB7XG4gIHZhciBsZXhlciA9IG5ldyBMZXhlcihvcHRpb25zKTtcbiAgcmV0dXJuIGxleGVyLmxleChzcmMpO1xufTtcblxuLyoqXG4gKiBQcmVwcm9jZXNzaW5nXG4gKi9cblxuTGV4ZXIucHJvdG90eXBlLmxleCA9IGZ1bmN0aW9uKHNyYykge1xuICBzcmMgPSBzcmNcbiAgICAucmVwbGFjZSgvXFxyXFxufFxcci9nLCAnXFxuJylcbiAgICAucmVwbGFjZSgvXFx0L2csICcgICAgJylcbiAgICAucmVwbGFjZSgvXFx1MDBhMC9nLCAnICcpXG4gICAgLnJlcGxhY2UoL1xcdTI0MjQvZywgJ1xcbicpO1xuXG4gIHJldHVybiB0aGlzLnRva2VuKHNyYywgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIExleGluZ1xuICovXG5cbkxleGVyLnByb3RvdHlwZS50b2tlbiA9IGZ1bmN0aW9uKHNyYywgdG9wLCBicSkge1xuICB2YXIgc3JjID0gc3JjLnJlcGxhY2UoL14gKyQvZ20sICcnKVxuICAgICwgbmV4dFxuICAgICwgbG9vc2VcbiAgICAsIGNhcFxuICAgICwgYnVsbFxuICAgICwgYlxuICAgICwgaXRlbVxuICAgICwgc3BhY2VcbiAgICAsIGlcbiAgICAsIGw7XG5cbiAgd2hpbGUgKHNyYykge1xuICAgIC8vIG5ld2xpbmVcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5uZXdsaW5lLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGlmIChjYXBbMF0ubGVuZ3RoID4gMSkge1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnc3BhY2UnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvZGVcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5jb2RlLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGNhcCA9IGNhcFswXS5yZXBsYWNlKC9eIHs0fS9nbSwgJycpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdjb2RlJyxcbiAgICAgICAgdGV4dDogIXRoaXMub3B0aW9ucy5wZWRhbnRpY1xuICAgICAgICAgID8gY2FwLnJlcGxhY2UoL1xcbiskLywgJycpXG4gICAgICAgICAgOiBjYXBcbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gZmVuY2VzIChnZm0pXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuZmVuY2VzLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnY29kZScsXG4gICAgICAgIGxhbmc6IGNhcFsyXSxcbiAgICAgICAgdGV4dDogY2FwWzNdIHx8ICcnXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGhlYWRpbmdcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5oZWFkaW5nLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgICAgIGRlcHRoOiBjYXBbMV0ubGVuZ3RoLFxuICAgICAgICB0ZXh0OiBjYXBbMl1cbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdGFibGUgbm8gbGVhZGluZyBwaXBlIChnZm0pXG4gICAgaWYgKHRvcCAmJiAoY2FwID0gdGhpcy5ydWxlcy5ucHRhYmxlLmV4ZWMoc3JjKSkpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG5cbiAgICAgIGl0ZW0gPSB7XG4gICAgICAgIHR5cGU6ICd0YWJsZScsXG4gICAgICAgIGhlYWRlcjogY2FwWzFdLnJlcGxhY2UoL14gKnwgKlxcfCAqJC9nLCAnJykuc3BsaXQoLyAqXFx8ICovKSxcbiAgICAgICAgYWxpZ246IGNhcFsyXS5yZXBsYWNlKC9eICp8XFx8ICokL2csICcnKS5zcGxpdCgvICpcXHwgKi8pLFxuICAgICAgICBjZWxsczogY2FwWzNdLnJlcGxhY2UoL1xcbiQvLCAnJykuc3BsaXQoJ1xcbicpXG4gICAgICB9O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgaXRlbS5hbGlnbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoL14gKi0rOiAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAncmlnaHQnO1xuICAgICAgICB9IGVsc2UgaWYgKC9eICo6LSs6ICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdjZW50ZXInO1xuICAgICAgICB9IGVsc2UgaWYgKC9eICo6LSsgKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ2xlZnQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtLmNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGl0ZW0uY2VsbHNbaV0gPSBpdGVtLmNlbGxzW2ldLnNwbGl0KC8gKlxcfCAqLyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2goaXRlbSk7XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGxoZWFkaW5nXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMubGhlYWRpbmcuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICAgICAgZGVwdGg6IGNhcFsyXSA9PT0gJz0nID8gMSA6IDIsXG4gICAgICAgIHRleHQ6IGNhcFsxXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBoclxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmhyLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnaHInXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGJsb2NrcXVvdGVcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5ibG9ja3F1b3RlLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcblxuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdibG9ja3F1b3RlX3N0YXJ0J1xuICAgICAgfSk7XG5cbiAgICAgIGNhcCA9IGNhcFswXS5yZXBsYWNlKC9eICo+ID8vZ20sICcnKTtcblxuICAgICAgLy8gUGFzcyBgdG9wYCB0byBrZWVwIHRoZSBjdXJyZW50XG4gICAgICAvLyBcInRvcGxldmVsXCIgc3RhdGUuIFRoaXMgaXMgZXhhY3RseVxuICAgICAgLy8gaG93IG1hcmtkb3duLnBsIHdvcmtzLlxuICAgICAgdGhpcy50b2tlbihjYXAsIHRvcCwgdHJ1ZSk7XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnYmxvY2txdW90ZV9lbmQnXG4gICAgICB9KTtcblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gbGlzdFxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmxpc3QuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgYnVsbCA9IGNhcFsyXTtcblxuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdsaXN0X3N0YXJ0JyxcbiAgICAgICAgb3JkZXJlZDogYnVsbC5sZW5ndGggPiAxXG4gICAgICB9KTtcblxuICAgICAgLy8gR2V0IGVhY2ggdG9wLWxldmVsIGl0ZW0uXG4gICAgICBjYXAgPSBjYXBbMF0ubWF0Y2godGhpcy5ydWxlcy5pdGVtKTtcblxuICAgICAgbmV4dCA9IGZhbHNlO1xuICAgICAgbCA9IGNhcC5sZW5ndGg7XG4gICAgICBpID0gMDtcblxuICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaXRlbSA9IGNhcFtpXTtcblxuICAgICAgICAvLyBSZW1vdmUgdGhlIGxpc3QgaXRlbSdzIGJ1bGxldFxuICAgICAgICAvLyBzbyBpdCBpcyBzZWVuIGFzIHRoZSBuZXh0IHRva2VuLlxuICAgICAgICBzcGFjZSA9IGl0ZW0ubGVuZ3RoO1xuICAgICAgICBpdGVtID0gaXRlbS5yZXBsYWNlKC9eICooWyorLV18XFxkK1xcLikgKy8sICcnKTtcblxuICAgICAgICAvLyBPdXRkZW50IHdoYXRldmVyIHRoZVxuICAgICAgICAvLyBsaXN0IGl0ZW0gY29udGFpbnMuIEhhY2t5LlxuICAgICAgICBpZiAofml0ZW0uaW5kZXhPZignXFxuICcpKSB7XG4gICAgICAgICAgc3BhY2UgLT0gaXRlbS5sZW5ndGg7XG4gICAgICAgICAgaXRlbSA9ICF0aGlzLm9wdGlvbnMucGVkYW50aWNcbiAgICAgICAgICAgID8gaXRlbS5yZXBsYWNlKG5ldyBSZWdFeHAoJ14gezEsJyArIHNwYWNlICsgJ30nLCAnZ20nKSwgJycpXG4gICAgICAgICAgICA6IGl0ZW0ucmVwbGFjZSgvXiB7MSw0fS9nbSwgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIG5leHQgbGlzdCBpdGVtIGJlbG9uZ3MgaGVyZS5cbiAgICAgICAgLy8gQmFja3BlZGFsIGlmIGl0IGRvZXMgbm90IGJlbG9uZyBpbiB0aGlzIGxpc3QuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc21hcnRMaXN0cyAmJiBpICE9PSBsIC0gMSkge1xuICAgICAgICAgIGIgPSBibG9jay5idWxsZXQuZXhlYyhjYXBbaSArIDFdKVswXTtcbiAgICAgICAgICBpZiAoYnVsbCAhPT0gYiAmJiAhKGJ1bGwubGVuZ3RoID4gMSAmJiBiLmxlbmd0aCA+IDEpKSB7XG4gICAgICAgICAgICBzcmMgPSBjYXAuc2xpY2UoaSArIDEpLmpvaW4oJ1xcbicpICsgc3JjO1xuICAgICAgICAgICAgaSA9IGwgLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERldGVybWluZSB3aGV0aGVyIGl0ZW0gaXMgbG9vc2Ugb3Igbm90LlxuICAgICAgICAvLyBVc2U6IC8oXnxcXG4pKD8hIClbXlxcbl0rXFxuXFxuKD8hXFxzKiQpL1xuICAgICAgICAvLyBmb3IgZGlzY291bnQgYmVoYXZpb3IuXG4gICAgICAgIGxvb3NlID0gbmV4dCB8fCAvXFxuXFxuKD8hXFxzKiQpLy50ZXN0KGl0ZW0pO1xuICAgICAgICBpZiAoaSAhPT0gbCAtIDEpIHtcbiAgICAgICAgICBuZXh0ID0gaXRlbS5jaGFyQXQoaXRlbS5sZW5ndGggLSAxKSA9PT0gJ1xcbic7XG4gICAgICAgICAgaWYgKCFsb29zZSkgbG9vc2UgPSBuZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgICAgdHlwZTogbG9vc2VcbiAgICAgICAgICAgID8gJ2xvb3NlX2l0ZW1fc3RhcnQnXG4gICAgICAgICAgICA6ICdsaXN0X2l0ZW1fc3RhcnQnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFJlY3Vyc2UuXG4gICAgICAgIHRoaXMudG9rZW4oaXRlbSwgZmFsc2UsIGJxKTtcblxuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnbGlzdF9pdGVtX2VuZCdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnbGlzdF9lbmQnXG4gICAgICB9KTtcblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gaHRtbFxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmh0bWwuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6IHRoaXMub3B0aW9ucy5zYW5pdGl6ZVxuICAgICAgICAgID8gJ3BhcmFncmFwaCdcbiAgICAgICAgICA6ICdodG1sJyxcbiAgICAgICAgcHJlOiAhdGhpcy5vcHRpb25zLnNhbml0aXplclxuICAgICAgICAgICYmIChjYXBbMV0gPT09ICdwcmUnIHx8IGNhcFsxXSA9PT0gJ3NjcmlwdCcgfHwgY2FwWzFdID09PSAnc3R5bGUnKSxcbiAgICAgICAgdGV4dDogY2FwWzBdXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGRlZlxuICAgIGlmICgoIWJxICYmIHRvcCkgJiYgKGNhcCA9IHRoaXMucnVsZXMuZGVmLmV4ZWMoc3JjKSkpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5saW5rc1tjYXBbMV0udG9Mb3dlckNhc2UoKV0gPSB7XG4gICAgICAgIGhyZWY6IGNhcFsyXSxcbiAgICAgICAgdGl0bGU6IGNhcFszXVxuICAgICAgfTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRhYmxlIChnZm0pXG4gICAgaWYgKHRvcCAmJiAoY2FwID0gdGhpcy5ydWxlcy50YWJsZS5leGVjKHNyYykpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuXG4gICAgICBpdGVtID0ge1xuICAgICAgICB0eXBlOiAndGFibGUnLFxuICAgICAgICBoZWFkZXI6IGNhcFsxXS5yZXBsYWNlKC9eICp8ICpcXHwgKiQvZywgJycpLnNwbGl0KC8gKlxcfCAqLyksXG4gICAgICAgIGFsaWduOiBjYXBbMl0ucmVwbGFjZSgvXiAqfFxcfCAqJC9nLCAnJykuc3BsaXQoLyAqXFx8ICovKSxcbiAgICAgICAgY2VsbHM6IGNhcFszXS5yZXBsYWNlKC8oPzogKlxcfCAqKT9cXG4kLywgJycpLnNwbGl0KCdcXG4nKVxuICAgICAgfTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW0uYWxpZ24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKC9eICotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ3JpZ2h0JztcbiAgICAgICAgfSBlbHNlIGlmICgvXiAqOi0rOiAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnY2VudGVyJztcbiAgICAgICAgfSBlbHNlIGlmICgvXiAqOi0rICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdsZWZ0JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtLmFsaWduW2ldID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgaXRlbS5jZWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVtLmNlbGxzW2ldID0gaXRlbS5jZWxsc1tpXVxuICAgICAgICAgIC5yZXBsYWNlKC9eICpcXHwgKnwgKlxcfCAqJC9nLCAnJylcbiAgICAgICAgICAuc3BsaXQoLyAqXFx8ICovKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy50b2tlbnMucHVzaChpdGVtKTtcblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdG9wLWxldmVsIHBhcmFncmFwaFxuICAgIGlmICh0b3AgJiYgKGNhcCA9IHRoaXMucnVsZXMucGFyYWdyYXBoLmV4ZWMoc3JjKSkpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgICAgIHRleHQ6IGNhcFsxXS5jaGFyQXQoY2FwWzFdLmxlbmd0aCAtIDEpID09PSAnXFxuJ1xuICAgICAgICAgID8gY2FwWzFdLnNsaWNlKDAsIC0xKVxuICAgICAgICAgIDogY2FwWzFdXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRleHRcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy50ZXh0LmV4ZWMoc3JjKSkge1xuICAgICAgLy8gVG9wLWxldmVsIHNob3VsZCBuZXZlciByZWFjaCBoZXJlLlxuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIHRleHQ6IGNhcFswXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc3JjKSB7XG4gICAgICB0aHJvdyBuZXdcbiAgICAgICAgRXJyb3IoJ0luZmluaXRlIGxvb3Agb24gYnl0ZTogJyArIHNyYy5jaGFyQ29kZUF0KDApKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcy50b2tlbnM7XG59O1xuXG4vKipcbiAqIElubGluZS1MZXZlbCBHcmFtbWFyXG4gKi9cblxudmFyIGlubGluZSA9IHtcbiAgZXNjYXBlOiAvXlxcXFwoW1xcXFxgKnt9XFxbXFxdKCkjK1xcLS4hXz5dKS8sXG4gIGF1dG9saW5rOiAvXjwoW14gPl0rKEB8OlxcLylbXiA+XSspPi8sXG4gIHVybDogbm9vcCxcbiAgdGFnOiAvXjwhLS1bXFxzXFxTXSo/LS0+fF48XFwvP1xcdysoPzpcIlteXCJdKlwifCdbXiddKid8W14nXCI+XSkqPz4vLFxuICBsaW5rOiAvXiE/XFxbKGluc2lkZSlcXF1cXChocmVmXFwpLyxcbiAgcmVmbGluazogL14hP1xcWyhpbnNpZGUpXFxdXFxzKlxcWyhbXlxcXV0qKVxcXS8sXG4gIG5vbGluazogL14hP1xcWygoPzpcXFtbXlxcXV0qXFxdfFteXFxbXFxdXSkqKVxcXS8sXG4gIHN0cm9uZzogL15fXyhbXFxzXFxTXSs/KV9fKD8hXyl8XlxcKlxcKihbXFxzXFxTXSs/KVxcKlxcKig/IVxcKikvLFxuICBlbTogL15cXGJfKCg/OlteX118X18pKz8pX1xcYnxeXFwqKCg/OlxcKlxcKnxbXFxzXFxTXSkrPylcXCooPyFcXCopLyxcbiAgY29kZTogL14oYCspXFxzKihbXFxzXFxTXSo/W15gXSlcXHMqXFwxKD8hYCkvLFxuICBicjogL14gezIsfVxcbig/IVxccyokKS8sXG4gIGRlbDogbm9vcCxcbiAgdGV4dDogL15bXFxzXFxTXSs/KD89W1xcXFw8IVxcW18qYF18IHsyLH1cXG58JCkvXG59O1xuXG5pbmxpbmUuX2luc2lkZSA9IC8oPzpcXFtbXlxcXV0qXFxdfFteXFxbXFxdXXxcXF0oPz1bXlxcW10qXFxdKSkqLztcbmlubGluZS5faHJlZiA9IC9cXHMqPD8oW1xcc1xcU10qPyk+Pyg/OlxccytbJ1wiXShbXFxzXFxTXSo/KVsnXCJdKT9cXHMqLztcblxuaW5saW5lLmxpbmsgPSByZXBsYWNlKGlubGluZS5saW5rKVxuICAoJ2luc2lkZScsIGlubGluZS5faW5zaWRlKVxuICAoJ2hyZWYnLCBpbmxpbmUuX2hyZWYpXG4gICgpO1xuXG5pbmxpbmUucmVmbGluayA9IHJlcGxhY2UoaW5saW5lLnJlZmxpbmspXG4gICgnaW5zaWRlJywgaW5saW5lLl9pbnNpZGUpXG4gICgpO1xuXG4vKipcbiAqIE5vcm1hbCBJbmxpbmUgR3JhbW1hclxuICovXG5cbmlubGluZS5ub3JtYWwgPSBtZXJnZSh7fSwgaW5saW5lKTtcblxuLyoqXG4gKiBQZWRhbnRpYyBJbmxpbmUgR3JhbW1hclxuICovXG5cbmlubGluZS5wZWRhbnRpYyA9IG1lcmdlKHt9LCBpbmxpbmUubm9ybWFsLCB7XG4gIHN0cm9uZzogL15fXyg/PVxcUykoW1xcc1xcU10qP1xcUylfXyg/IV8pfF5cXCpcXCooPz1cXFMpKFtcXHNcXFNdKj9cXFMpXFwqXFwqKD8hXFwqKS8sXG4gIGVtOiAvXl8oPz1cXFMpKFtcXHNcXFNdKj9cXFMpXyg/IV8pfF5cXCooPz1cXFMpKFtcXHNcXFNdKj9cXFMpXFwqKD8hXFwqKS9cbn0pO1xuXG4vKipcbiAqIEdGTSBJbmxpbmUgR3JhbW1hclxuICovXG5cbmlubGluZS5nZm0gPSBtZXJnZSh7fSwgaW5saW5lLm5vcm1hbCwge1xuICBlc2NhcGU6IHJlcGxhY2UoaW5saW5lLmVzY2FwZSkoJ10pJywgJ358XSknKSgpLFxuICB1cmw6IC9eKGh0dHBzPzpcXC9cXC9bXlxcczxdK1tePC4sOjtcIicpXFxdXFxzXSkvLFxuICBkZWw6IC9efn4oPz1cXFMpKFtcXHNcXFNdKj9cXFMpfn4vLFxuICB0ZXh0OiByZXBsYWNlKGlubGluZS50ZXh0KVxuICAgICgnXXwnLCAnfl18JylcbiAgICAoJ3wnLCAnfGh0dHBzPzovL3wnKVxuICAgICgpXG59KTtcblxuLyoqXG4gKiBHRk0gKyBMaW5lIEJyZWFrcyBJbmxpbmUgR3JhbW1hclxuICovXG5cbmlubGluZS5icmVha3MgPSBtZXJnZSh7fSwgaW5saW5lLmdmbSwge1xuICBicjogcmVwbGFjZShpbmxpbmUuYnIpKCd7Mix9JywgJyonKSgpLFxuICB0ZXh0OiByZXBsYWNlKGlubGluZS5nZm0udGV4dCkoJ3syLH0nLCAnKicpKClcbn0pO1xuXG4vKipcbiAqIElubGluZSBMZXhlciAmIENvbXBpbGVyXG4gKi9cblxuZnVuY3Rpb24gSW5saW5lTGV4ZXIobGlua3MsIG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBtYXJrZWQuZGVmYXVsdHM7XG4gIHRoaXMubGlua3MgPSBsaW5rcztcbiAgdGhpcy5ydWxlcyA9IGlubGluZS5ub3JtYWw7XG4gIHRoaXMucmVuZGVyZXIgPSB0aGlzLm9wdGlvbnMucmVuZGVyZXIgfHwgbmV3IFJlbmRlcmVyO1xuICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgaWYgKCF0aGlzLmxpbmtzKSB7XG4gICAgdGhyb3cgbmV3XG4gICAgICBFcnJvcignVG9rZW5zIGFycmF5IHJlcXVpcmVzIGEgYGxpbmtzYCBwcm9wZXJ0eS4nKTtcbiAgfVxuXG4gIGlmICh0aGlzLm9wdGlvbnMuZ2ZtKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5icmVha3MpIHtcbiAgICAgIHRoaXMucnVsZXMgPSBpbmxpbmUuYnJlYWtzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJ1bGVzID0gaW5saW5lLmdmbTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgdGhpcy5ydWxlcyA9IGlubGluZS5wZWRhbnRpYztcbiAgfVxufVxuXG4vKipcbiAqIEV4cG9zZSBJbmxpbmUgUnVsZXNcbiAqL1xuXG5JbmxpbmVMZXhlci5ydWxlcyA9IGlubGluZTtcblxuLyoqXG4gKiBTdGF0aWMgTGV4aW5nL0NvbXBpbGluZyBNZXRob2RcbiAqL1xuXG5JbmxpbmVMZXhlci5vdXRwdXQgPSBmdW5jdGlvbihzcmMsIGxpbmtzLCBvcHRpb25zKSB7XG4gIHZhciBpbmxpbmUgPSBuZXcgSW5saW5lTGV4ZXIobGlua3MsIG9wdGlvbnMpO1xuICByZXR1cm4gaW5saW5lLm91dHB1dChzcmMpO1xufTtcblxuLyoqXG4gKiBMZXhpbmcvQ29tcGlsaW5nXG4gKi9cblxuSW5saW5lTGV4ZXIucHJvdG90eXBlLm91dHB1dCA9IGZ1bmN0aW9uKHNyYykge1xuICB2YXIgb3V0ID0gJydcbiAgICAsIGxpbmtcbiAgICAsIHRleHRcbiAgICAsIGhyZWZcbiAgICAsIGNhcDtcblxuICB3aGlsZSAoc3JjKSB7XG4gICAgLy8gZXNjYXBlXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuZXNjYXBlLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSBjYXBbMV07XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBhdXRvbGlua1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmF1dG9saW5rLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGlmIChjYXBbMl0gPT09ICdAJykge1xuICAgICAgICB0ZXh0ID0gY2FwWzFdLmNoYXJBdCg2KSA9PT0gJzonXG4gICAgICAgICAgPyB0aGlzLm1hbmdsZShjYXBbMV0uc3Vic3RyaW5nKDcpKVxuICAgICAgICAgIDogdGhpcy5tYW5nbGUoY2FwWzFdKTtcbiAgICAgICAgaHJlZiA9IHRoaXMubWFuZ2xlKCdtYWlsdG86JykgKyB0ZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCA9IGVzY2FwZShjYXBbMV0pO1xuICAgICAgICBocmVmID0gdGV4dDtcbiAgICAgIH1cbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmxpbmsoaHJlZiwgbnVsbCwgdGV4dCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB1cmwgKGdmbSlcbiAgICBpZiAoIXRoaXMuaW5MaW5rICYmIChjYXAgPSB0aGlzLnJ1bGVzLnVybC5leGVjKHNyYykpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGV4dCA9IGVzY2FwZShjYXBbMV0pO1xuICAgICAgaHJlZiA9IHRleHQ7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5saW5rKGhyZWYsIG51bGwsIHRleHQpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdGFnXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMudGFnLmV4ZWMoc3JjKSkge1xuICAgICAgaWYgKCF0aGlzLmluTGluayAmJiAvXjxhIC9pLnRlc3QoY2FwWzBdKSkge1xuICAgICAgICB0aGlzLmluTGluayA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaW5MaW5rICYmIC9ePFxcL2E+L2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgIHRoaXMuaW5MaW5rID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMub3B0aW9ucy5zYW5pdGl6ZVxuICAgICAgICA/IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXJcbiAgICAgICAgICA/IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIoY2FwWzBdKVxuICAgICAgICAgIDogZXNjYXBlKGNhcFswXSlcbiAgICAgICAgOiBjYXBbMF1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGxpbmtcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5saW5rLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMuaW5MaW5rID0gdHJ1ZTtcbiAgICAgIG91dCArPSB0aGlzLm91dHB1dExpbmsoY2FwLCB7XG4gICAgICAgIGhyZWY6IGNhcFsyXSxcbiAgICAgICAgdGl0bGU6IGNhcFszXVxuICAgICAgfSk7XG4gICAgICB0aGlzLmluTGluayA9IGZhbHNlO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gcmVmbGluaywgbm9saW5rXG4gICAgaWYgKChjYXAgPSB0aGlzLnJ1bGVzLnJlZmxpbmsuZXhlYyhzcmMpKVxuICAgICAgICB8fCAoY2FwID0gdGhpcy5ydWxlcy5ub2xpbmsuZXhlYyhzcmMpKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGxpbmsgPSAoY2FwWzJdIHx8IGNhcFsxXSkucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuICAgICAgbGluayA9IHRoaXMubGlua3NbbGluay50b0xvd2VyQ2FzZSgpXTtcbiAgICAgIGlmICghbGluayB8fCAhbGluay5ocmVmKSB7XG4gICAgICAgIG91dCArPSBjYXBbMF0uY2hhckF0KDApO1xuICAgICAgICBzcmMgPSBjYXBbMF0uc3Vic3RyaW5nKDEpICsgc3JjO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5MaW5rID0gdHJ1ZTtcbiAgICAgIG91dCArPSB0aGlzLm91dHB1dExpbmsoY2FwLCBsaW5rKTtcbiAgICAgIHRoaXMuaW5MaW5rID0gZmFsc2U7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBzdHJvbmdcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5zdHJvbmcuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuc3Ryb25nKHRoaXMub3V0cHV0KGNhcFsyXSB8fCBjYXBbMV0pKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGVtXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuZW0uZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuZW0odGhpcy5vdXRwdXQoY2FwWzJdIHx8IGNhcFsxXSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gY29kZVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmNvZGUuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuY29kZXNwYW4oZXNjYXBlKGNhcFsyXSwgdHJ1ZSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gYnJcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5ici5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5icigpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gZGVsIChnZm0pXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuZGVsLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmRlbCh0aGlzLm91dHB1dChjYXBbMV0pKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRleHRcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy50ZXh0LmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLnRleHQoZXNjYXBlKHRoaXMuc21hcnR5cGFudHMoY2FwWzBdKSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHNyYykge1xuICAgICAgdGhyb3cgbmV3XG4gICAgICAgIEVycm9yKCdJbmZpbml0ZSBsb29wIG9uIGJ5dGU6ICcgKyBzcmMuY2hhckNvZGVBdCgwKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ29tcGlsZSBMaW5rXG4gKi9cblxuSW5saW5lTGV4ZXIucHJvdG90eXBlLm91dHB1dExpbmsgPSBmdW5jdGlvbihjYXAsIGxpbmspIHtcbiAgdmFyIGhyZWYgPSBlc2NhcGUobGluay5ocmVmKVxuICAgICwgdGl0bGUgPSBsaW5rLnRpdGxlID8gZXNjYXBlKGxpbmsudGl0bGUpIDogbnVsbDtcblxuICByZXR1cm4gY2FwWzBdLmNoYXJBdCgwKSAhPT0gJyEnXG4gICAgPyB0aGlzLnJlbmRlcmVyLmxpbmsoaHJlZiwgdGl0bGUsIHRoaXMub3V0cHV0KGNhcFsxXSkpXG4gICAgOiB0aGlzLnJlbmRlcmVyLmltYWdlKGhyZWYsIHRpdGxlLCBlc2NhcGUoY2FwWzFdKSk7XG59O1xuXG4vKipcbiAqIFNtYXJ0eXBhbnRzIFRyYW5zZm9ybWF0aW9uc1xuICovXG5cbklubGluZUxleGVyLnByb3RvdHlwZS5zbWFydHlwYW50cyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgaWYgKCF0aGlzLm9wdGlvbnMuc21hcnR5cGFudHMpIHJldHVybiB0ZXh0O1xuICByZXR1cm4gdGV4dFxuICAgIC8vIGVtLWRhc2hlc1xuICAgIC5yZXBsYWNlKC8tLS0vZywgJ1xcdTIwMTQnKVxuICAgIC8vIGVuLWRhc2hlc1xuICAgIC5yZXBsYWNlKC8tLS9nLCAnXFx1MjAxMycpXG4gICAgLy8gb3BlbmluZyBzaW5nbGVzXG4gICAgLnJlcGxhY2UoLyhefFstXFx1MjAxNC8oXFxbe1wiXFxzXSknL2csICckMVxcdTIwMTgnKVxuICAgIC8vIGNsb3Npbmcgc2luZ2xlcyAmIGFwb3N0cm9waGVzXG4gICAgLnJlcGxhY2UoLycvZywgJ1xcdTIwMTknKVxuICAgIC8vIG9wZW5pbmcgZG91Ymxlc1xuICAgIC5yZXBsYWNlKC8oXnxbLVxcdTIwMTQvKFxcW3tcXHUyMDE4XFxzXSlcIi9nLCAnJDFcXHUyMDFjJylcbiAgICAvLyBjbG9zaW5nIGRvdWJsZXNcbiAgICAucmVwbGFjZSgvXCIvZywgJ1xcdTIwMWQnKVxuICAgIC8vIGVsbGlwc2VzXG4gICAgLnJlcGxhY2UoL1xcLnszfS9nLCAnXFx1MjAyNicpO1xufTtcblxuLyoqXG4gKiBNYW5nbGUgTGlua3NcbiAqL1xuXG5JbmxpbmVMZXhlci5wcm90b3R5cGUubWFuZ2xlID0gZnVuY3Rpb24odGV4dCkge1xuICBpZiAoIXRoaXMub3B0aW9ucy5tYW5nbGUpIHJldHVybiB0ZXh0O1xuICB2YXIgb3V0ID0gJydcbiAgICAsIGwgPSB0ZXh0Lmxlbmd0aFxuICAgICwgaSA9IDBcbiAgICAsIGNoO1xuXG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgY2ggPSB0ZXh0LmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKE1hdGgucmFuZG9tKCkgPiAwLjUpIHtcbiAgICAgIGNoID0gJ3gnICsgY2gudG9TdHJpbmcoMTYpO1xuICAgIH1cbiAgICBvdXQgKz0gJyYjJyArIGNoICsgJzsnO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUmVuZGVyZXJcbiAqL1xuXG5mdW5jdGlvbiBSZW5kZXJlcihvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG59XG5cblJlbmRlcmVyLnByb3RvdHlwZS5jb2RlID0gZnVuY3Rpb24oY29kZSwgbGFuZywgZXNjYXBlZCkge1xuICBpZiAodGhpcy5vcHRpb25zLmhpZ2hsaWdodCkge1xuICAgIHZhciBvdXQgPSB0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0KGNvZGUsIGxhbmcpO1xuICAgIGlmIChvdXQgIT0gbnVsbCAmJiBvdXQgIT09IGNvZGUpIHtcbiAgICAgIGVzY2FwZWQgPSB0cnVlO1xuICAgICAgY29kZSA9IG91dDtcbiAgICB9XG4gIH1cblxuICBpZiAoIWxhbmcpIHtcbiAgICByZXR1cm4gJzxwcmU+PGNvZGU+J1xuICAgICAgKyAoZXNjYXBlZCA/IGNvZGUgOiBlc2NhcGUoY29kZSwgdHJ1ZSkpXG4gICAgICArICdcXG48L2NvZGU+PC9wcmU+JztcbiAgfVxuXG4gIHJldHVybiAnPHByZT48Y29kZSBjbGFzcz1cIidcbiAgICArIHRoaXMub3B0aW9ucy5sYW5nUHJlZml4XG4gICAgKyBlc2NhcGUobGFuZywgdHJ1ZSlcbiAgICArICdcIj4nXG4gICAgKyAoZXNjYXBlZCA/IGNvZGUgOiBlc2NhcGUoY29kZSwgdHJ1ZSkpXG4gICAgKyAnXFxuPC9jb2RlPjwvcHJlPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuYmxvY2txdW90ZSA9IGZ1bmN0aW9uKHF1b3RlKSB7XG4gIHJldHVybiAnPGJsb2NrcXVvdGU+XFxuJyArIHF1b3RlICsgJzwvYmxvY2txdW90ZT5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmh0bWwgPSBmdW5jdGlvbihodG1sKSB7XG4gIHJldHVybiBodG1sO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmhlYWRpbmcgPSBmdW5jdGlvbih0ZXh0LCBsZXZlbCwgcmF3KSB7XG4gIHJldHVybiAnPGgnXG4gICAgKyBsZXZlbFxuICAgICsgJyBpZD1cIidcbiAgICArIHRoaXMub3B0aW9ucy5oZWFkZXJQcmVmaXhcbiAgICArIHJhdy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teXFx3XSsvZywgJy0nKVxuICAgICsgJ1wiPidcbiAgICArIHRleHRcbiAgICArICc8L2gnXG4gICAgKyBsZXZlbFxuICAgICsgJz5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmhyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9wdGlvbnMueGh0bWwgPyAnPGhyLz5cXG4nIDogJzxocj5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmxpc3QgPSBmdW5jdGlvbihib2R5LCBvcmRlcmVkKSB7XG4gIHZhciB0eXBlID0gb3JkZXJlZCA/ICdvbCcgOiAndWwnO1xuICByZXR1cm4gJzwnICsgdHlwZSArICc+XFxuJyArIGJvZHkgKyAnPC8nICsgdHlwZSArICc+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5saXN0aXRlbSA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8bGk+JyArIHRleHQgKyAnPC9saT5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLnBhcmFncmFwaCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8cD4nICsgdGV4dCArICc8L3A+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS50YWJsZSA9IGZ1bmN0aW9uKGhlYWRlciwgYm9keSkge1xuICByZXR1cm4gJzx0YWJsZT5cXG4nXG4gICAgKyAnPHRoZWFkPlxcbidcbiAgICArIGhlYWRlclxuICAgICsgJzwvdGhlYWQ+XFxuJ1xuICAgICsgJzx0Ym9keT5cXG4nXG4gICAgKyBib2R5XG4gICAgKyAnPC90Ym9keT5cXG4nXG4gICAgKyAnPC90YWJsZT5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLnRhYmxlcm93ID0gZnVuY3Rpb24oY29udGVudCkge1xuICByZXR1cm4gJzx0cj5cXG4nICsgY29udGVudCArICc8L3RyPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUudGFibGVjZWxsID0gZnVuY3Rpb24oY29udGVudCwgZmxhZ3MpIHtcbiAgdmFyIHR5cGUgPSBmbGFncy5oZWFkZXIgPyAndGgnIDogJ3RkJztcbiAgdmFyIHRhZyA9IGZsYWdzLmFsaWduXG4gICAgPyAnPCcgKyB0eXBlICsgJyBzdHlsZT1cInRleHQtYWxpZ246JyArIGZsYWdzLmFsaWduICsgJ1wiPidcbiAgICA6ICc8JyArIHR5cGUgKyAnPic7XG4gIHJldHVybiB0YWcgKyBjb250ZW50ICsgJzwvJyArIHR5cGUgKyAnPlxcbic7XG59O1xuXG4vLyBzcGFuIGxldmVsIHJlbmRlcmVyXG5SZW5kZXJlci5wcm90b3R5cGUuc3Ryb25nID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gJzxzdHJvbmc+JyArIHRleHQgKyAnPC9zdHJvbmc+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5lbSA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8ZW0+JyArIHRleHQgKyAnPC9lbT4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmNvZGVzcGFuID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gJzxjb2RlPicgKyB0ZXh0ICsgJzwvY29kZT4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmJyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9wdGlvbnMueGh0bWwgPyAnPGJyLz4nIDogJzxicj4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmRlbCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8ZGVsPicgKyB0ZXh0ICsgJzwvZGVsPic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUubGluayA9IGZ1bmN0aW9uKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gIGlmICh0aGlzLm9wdGlvbnMuc2FuaXRpemUpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIHByb3QgPSBkZWNvZGVVUklDb21wb25lbnQodW5lc2NhcGUoaHJlZikpXG4gICAgICAgIC5yZXBsYWNlKC9bXlxcdzpdL2csICcnKVxuICAgICAgICAudG9Mb3dlckNhc2UoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGlmIChwcm90LmluZGV4T2YoJ2phdmFzY3JpcHQ6JykgPT09IDAgfHwgcHJvdC5pbmRleE9mKCd2YnNjcmlwdDonKSA9PT0gMCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuICB2YXIgb3V0ID0gJzxhIGhyZWY9XCInICsgaHJlZiArICdcIic7XG4gIGlmICh0aXRsZSkge1xuICAgIG91dCArPSAnIHRpdGxlPVwiJyArIHRpdGxlICsgJ1wiJztcbiAgfVxuICBvdXQgKz0gJz4nICsgdGV4dCArICc8L2E+JztcbiAgcmV0dXJuIG91dDtcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5pbWFnZSA9IGZ1bmN0aW9uKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gIHZhciBvdXQgPSAnPGltZyBzcmM9XCInICsgaHJlZiArICdcIiBhbHQ9XCInICsgdGV4dCArICdcIic7XG4gIGlmICh0aXRsZSkge1xuICAgIG91dCArPSAnIHRpdGxlPVwiJyArIHRpdGxlICsgJ1wiJztcbiAgfVxuICBvdXQgKz0gdGhpcy5vcHRpb25zLnhodG1sID8gJy8+JyA6ICc+JztcbiAgcmV0dXJuIG91dDtcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gdGV4dDtcbn07XG5cbi8qKlxuICogUGFyc2luZyAmIENvbXBpbGluZ1xuICovXG5cbmZ1bmN0aW9uIFBhcnNlcihvcHRpb25zKSB7XG4gIHRoaXMudG9rZW5zID0gW107XG4gIHRoaXMudG9rZW4gPSBudWxsO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IG1hcmtlZC5kZWZhdWx0cztcbiAgdGhpcy5vcHRpb25zLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyIHx8IG5ldyBSZW5kZXJlcjtcbiAgdGhpcy5yZW5kZXJlciA9IHRoaXMub3B0aW9ucy5yZW5kZXJlcjtcbiAgdGhpcy5yZW5kZXJlci5vcHRpb25zID0gdGhpcy5vcHRpb25zO1xufVxuXG4vKipcbiAqIFN0YXRpYyBQYXJzZSBNZXRob2RcbiAqL1xuXG5QYXJzZXIucGFyc2UgPSBmdW5jdGlvbihzcmMsIG9wdGlvbnMsIHJlbmRlcmVyKSB7XG4gIHZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKG9wdGlvbnMsIHJlbmRlcmVyKTtcbiAgcmV0dXJuIHBhcnNlci5wYXJzZShzcmMpO1xufTtcblxuLyoqXG4gKiBQYXJzZSBMb29wXG4gKi9cblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHNyYykge1xuICB0aGlzLmlubGluZSA9IG5ldyBJbmxpbmVMZXhlcihzcmMubGlua3MsIHRoaXMub3B0aW9ucywgdGhpcy5yZW5kZXJlcik7XG4gIHRoaXMudG9rZW5zID0gc3JjLnJldmVyc2UoKTtcblxuICB2YXIgb3V0ID0gJyc7XG4gIHdoaWxlICh0aGlzLm5leHQoKSkge1xuICAgIG91dCArPSB0aGlzLnRvaygpO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogTmV4dCBUb2tlblxuICovXG5cblBhcnNlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50b2tlbiA9IHRoaXMudG9rZW5zLnBvcCgpO1xufTtcblxuLyoqXG4gKiBQcmV2aWV3IE5leHQgVG9rZW5cbiAqL1xuXG5QYXJzZXIucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudG9rZW5zW3RoaXMudG9rZW5zLmxlbmd0aCAtIDFdIHx8IDA7XG59O1xuXG4vKipcbiAqIFBhcnNlIFRleHQgVG9rZW5zXG4gKi9cblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVRleHQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGJvZHkgPSB0aGlzLnRva2VuLnRleHQ7XG5cbiAgd2hpbGUgKHRoaXMucGVlaygpLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgIGJvZHkgKz0gJ1xcbicgKyB0aGlzLm5leHQoKS50ZXh0O1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuaW5saW5lLm91dHB1dChib2R5KTtcbn07XG5cbi8qKlxuICogUGFyc2UgQ3VycmVudCBUb2tlblxuICovXG5cblBhcnNlci5wcm90b3R5cGUudG9rID0gZnVuY3Rpb24oKSB7XG4gIHN3aXRjaCAodGhpcy50b2tlbi50eXBlKSB7XG4gICAgY2FzZSAnc3BhY2UnOiB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNhc2UgJ2hyJzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuaHIoKTtcbiAgICB9XG4gICAgY2FzZSAnaGVhZGluZyc6IHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmhlYWRpbmcoXG4gICAgICAgIHRoaXMuaW5saW5lLm91dHB1dCh0aGlzLnRva2VuLnRleHQpLFxuICAgICAgICB0aGlzLnRva2VuLmRlcHRoLFxuICAgICAgICB0aGlzLnRva2VuLnRleHQpO1xuICAgIH1cbiAgICBjYXNlICdjb2RlJzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuY29kZSh0aGlzLnRva2VuLnRleHQsXG4gICAgICAgIHRoaXMudG9rZW4ubGFuZyxcbiAgICAgICAgdGhpcy50b2tlbi5lc2NhcGVkKTtcbiAgICB9XG4gICAgY2FzZSAndGFibGUnOiB7XG4gICAgICB2YXIgaGVhZGVyID0gJydcbiAgICAgICAgLCBib2R5ID0gJydcbiAgICAgICAgLCBpXG4gICAgICAgICwgcm93XG4gICAgICAgICwgY2VsbFxuICAgICAgICAsIGZsYWdzXG4gICAgICAgICwgajtcblxuICAgICAgLy8gaGVhZGVyXG4gICAgICBjZWxsID0gJyc7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy50b2tlbi5oZWFkZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZmxhZ3MgPSB7IGhlYWRlcjogdHJ1ZSwgYWxpZ246IHRoaXMudG9rZW4uYWxpZ25baV0gfTtcbiAgICAgICAgY2VsbCArPSB0aGlzLnJlbmRlcmVyLnRhYmxlY2VsbChcbiAgICAgICAgICB0aGlzLmlubGluZS5vdXRwdXQodGhpcy50b2tlbi5oZWFkZXJbaV0pLFxuICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBhbGlnbjogdGhpcy50b2tlbi5hbGlnbltpXSB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBoZWFkZXIgKz0gdGhpcy5yZW5kZXJlci50YWJsZXJvdyhjZWxsKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMudG9rZW4uY2VsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcm93ID0gdGhpcy50b2tlbi5jZWxsc1tpXTtcblxuICAgICAgICBjZWxsID0gJyc7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBjZWxsICs9IHRoaXMucmVuZGVyZXIudGFibGVjZWxsKFxuICAgICAgICAgICAgdGhpcy5pbmxpbmUub3V0cHV0KHJvd1tqXSksXG4gICAgICAgICAgICB7IGhlYWRlcjogZmFsc2UsIGFsaWduOiB0aGlzLnRva2VuLmFsaWduW2pdIH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgYm9keSArPSB0aGlzLnJlbmRlcmVyLnRhYmxlcm93KGNlbGwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIudGFibGUoaGVhZGVyLCBib2R5KTtcbiAgICB9XG4gICAgY2FzZSAnYmxvY2txdW90ZV9zdGFydCc6IHtcbiAgICAgIHZhciBib2R5ID0gJyc7XG5cbiAgICAgIHdoaWxlICh0aGlzLm5leHQoKS50eXBlICE9PSAnYmxvY2txdW90ZV9lbmQnKSB7XG4gICAgICAgIGJvZHkgKz0gdGhpcy50b2soKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuYmxvY2txdW90ZShib2R5KTtcbiAgICB9XG4gICAgY2FzZSAnbGlzdF9zdGFydCc6IHtcbiAgICAgIHZhciBib2R5ID0gJydcbiAgICAgICAgLCBvcmRlcmVkID0gdGhpcy50b2tlbi5vcmRlcmVkO1xuXG4gICAgICB3aGlsZSAodGhpcy5uZXh0KCkudHlwZSAhPT0gJ2xpc3RfZW5kJykge1xuICAgICAgICBib2R5ICs9IHRoaXMudG9rKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmxpc3QoYm9keSwgb3JkZXJlZCk7XG4gICAgfVxuICAgIGNhc2UgJ2xpc3RfaXRlbV9zdGFydCc6IHtcbiAgICAgIHZhciBib2R5ID0gJyc7XG5cbiAgICAgIHdoaWxlICh0aGlzLm5leHQoKS50eXBlICE9PSAnbGlzdF9pdGVtX2VuZCcpIHtcbiAgICAgICAgYm9keSArPSB0aGlzLnRva2VuLnR5cGUgPT09ICd0ZXh0J1xuICAgICAgICAgID8gdGhpcy5wYXJzZVRleHQoKVxuICAgICAgICAgIDogdGhpcy50b2soKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIubGlzdGl0ZW0oYm9keSk7XG4gICAgfVxuICAgIGNhc2UgJ2xvb3NlX2l0ZW1fc3RhcnQnOiB7XG4gICAgICB2YXIgYm9keSA9ICcnO1xuXG4gICAgICB3aGlsZSAodGhpcy5uZXh0KCkudHlwZSAhPT0gJ2xpc3RfaXRlbV9lbmQnKSB7XG4gICAgICAgIGJvZHkgKz0gdGhpcy50b2soKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIubGlzdGl0ZW0oYm9keSk7XG4gICAgfVxuICAgIGNhc2UgJ2h0bWwnOiB7XG4gICAgICB2YXIgaHRtbCA9ICF0aGlzLnRva2VuLnByZSAmJiAhdGhpcy5vcHRpb25zLnBlZGFudGljXG4gICAgICAgID8gdGhpcy5pbmxpbmUub3V0cHV0KHRoaXMudG9rZW4udGV4dClcbiAgICAgICAgOiB0aGlzLnRva2VuLnRleHQ7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5odG1sKGh0bWwpO1xuICAgIH1cbiAgICBjYXNlICdwYXJhZ3JhcGgnOiB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5wYXJhZ3JhcGgodGhpcy5pbmxpbmUub3V0cHV0KHRoaXMudG9rZW4udGV4dCkpO1xuICAgIH1cbiAgICBjYXNlICd0ZXh0Jzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIucGFyYWdyYXBoKHRoaXMucGFyc2VUZXh0KCkpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBIZWxwZXJzXG4gKi9cblxuZnVuY3Rpb24gZXNjYXBlKGh0bWwsIGVuY29kZSkge1xuICByZXR1cm4gaHRtbFxuICAgIC5yZXBsYWNlKCFlbmNvZGUgPyAvJig/ISM/XFx3KzspL2cgOiAvJi9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKVxuICAgIC5yZXBsYWNlKC8nL2csICcmIzM5OycpO1xufVxuXG5mdW5jdGlvbiB1bmVzY2FwZShodG1sKSB7XG5cdC8vIGV4cGxpY2l0bHkgbWF0Y2ggZGVjaW1hbCwgaGV4LCBhbmQgbmFtZWQgSFRNTCBlbnRpdGllcyBcbiAgcmV0dXJuIGh0bWwucmVwbGFjZSgvJigjKD86XFxkKyl8KD86I3hbMC05QS1GYS1mXSspfCg/OlxcdyspKTs/L2csIGZ1bmN0aW9uKF8sIG4pIHtcbiAgICBuID0gbi50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChuID09PSAnY29sb24nKSByZXR1cm4gJzonO1xuICAgIGlmIChuLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICByZXR1cm4gbi5jaGFyQXQoMSkgPT09ICd4J1xuICAgICAgICA/IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobi5zdWJzdHJpbmcoMiksIDE2KSlcbiAgICAgICAgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKCtuLnN1YnN0cmluZygxKSk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2UocmVnZXgsIG9wdCkge1xuICByZWdleCA9IHJlZ2V4LnNvdXJjZTtcbiAgb3B0ID0gb3B0IHx8ICcnO1xuICByZXR1cm4gZnVuY3Rpb24gc2VsZihuYW1lLCB2YWwpIHtcbiAgICBpZiAoIW5hbWUpIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4LCBvcHQpO1xuICAgIHZhbCA9IHZhbC5zb3VyY2UgfHwgdmFsO1xuICAgIHZhbCA9IHZhbC5yZXBsYWNlKC8oXnxbXlxcW10pXFxeL2csICckMScpO1xuICAgIHJlZ2V4ID0gcmVnZXgucmVwbGFjZShuYW1lLCB2YWwpO1xuICAgIHJldHVybiBzZWxmO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbm5vb3AuZXhlYyA9IG5vb3A7XG5cbmZ1bmN0aW9uIG1lcmdlKG9iaikge1xuICB2YXIgaSA9IDFcbiAgICAsIHRhcmdldFxuICAgICwga2V5O1xuXG4gIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdGFyZ2V0ID0gYXJndW1lbnRzW2ldO1xuICAgIGZvciAoa2V5IGluIHRhcmdldCkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSB0YXJnZXRba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5cbi8qKlxuICogTWFya2VkXG4gKi9cblxuZnVuY3Rpb24gbWFya2VkKHNyYywgb3B0LCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgfHwgdHlwZW9mIG9wdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrID0gb3B0O1xuICAgICAgb3B0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBvcHQgPSBtZXJnZSh7fSwgbWFya2VkLmRlZmF1bHRzLCBvcHQgfHwge30pO1xuXG4gICAgdmFyIGhpZ2hsaWdodCA9IG9wdC5oaWdobGlnaHRcbiAgICAgICwgdG9rZW5zXG4gICAgICAsIHBlbmRpbmdcbiAgICAgICwgaSA9IDA7XG5cbiAgICB0cnkge1xuICAgICAgdG9rZW5zID0gTGV4ZXIubGV4KHNyYywgb3B0KVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlKTtcbiAgICB9XG5cbiAgICBwZW5kaW5nID0gdG9rZW5zLmxlbmd0aDtcblxuICAgIHZhciBkb25lID0gZnVuY3Rpb24oZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIG9wdC5oaWdobGlnaHQgPSBoaWdobGlnaHQ7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3V0O1xuXG4gICAgICB0cnkge1xuICAgICAgICBvdXQgPSBQYXJzZXIucGFyc2UodG9rZW5zLCBvcHQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBlcnIgPSBlO1xuICAgICAgfVxuXG4gICAgICBvcHQuaGlnaGxpZ2h0ID0gaGlnaGxpZ2h0O1xuXG4gICAgICByZXR1cm4gZXJyXG4gICAgICAgID8gY2FsbGJhY2soZXJyKVxuICAgICAgICA6IGNhbGxiYWNrKG51bGwsIG91dCk7XG4gICAgfTtcblxuICAgIGlmICghaGlnaGxpZ2h0IHx8IGhpZ2hsaWdodC5sZW5ndGggPCAzKSB7XG4gICAgICByZXR1cm4gZG9uZSgpO1xuICAgIH1cblxuICAgIGRlbGV0ZSBvcHQuaGlnaGxpZ2h0O1xuXG4gICAgaWYgKCFwZW5kaW5nKSByZXR1cm4gZG9uZSgpO1xuXG4gICAgZm9yICg7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIChmdW5jdGlvbih0b2tlbikge1xuICAgICAgICBpZiAodG9rZW4udHlwZSAhPT0gJ2NvZGUnKSB7XG4gICAgICAgICAgcmV0dXJuIC0tcGVuZGluZyB8fCBkb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2hsaWdodCh0b2tlbi50ZXh0LCB0b2tlbi5sYW5nLCBmdW5jdGlvbihlcnIsIGNvZGUpIHtcbiAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgIGlmIChjb2RlID09IG51bGwgfHwgY29kZSA9PT0gdG9rZW4udGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIC0tcGVuZGluZyB8fCBkb25lKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRva2VuLnRleHQgPSBjb2RlO1xuICAgICAgICAgIHRva2VuLmVzY2FwZWQgPSB0cnVlO1xuICAgICAgICAgIC0tcGVuZGluZyB8fCBkb25lKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSkodG9rZW5zW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cbiAgdHJ5IHtcbiAgICBpZiAob3B0KSBvcHQgPSBtZXJnZSh7fSwgbWFya2VkLmRlZmF1bHRzLCBvcHQpO1xuICAgIHJldHVybiBQYXJzZXIucGFyc2UoTGV4ZXIubGV4KHNyYywgb3B0KSwgb3B0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGUubWVzc2FnZSArPSAnXFxuUGxlYXNlIHJlcG9ydCB0aGlzIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGpqL21hcmtlZC4nO1xuICAgIGlmICgob3B0IHx8IG1hcmtlZC5kZWZhdWx0cykuc2lsZW50KSB7XG4gICAgICByZXR1cm4gJzxwPkFuIGVycm9yIG9jY3VyZWQ6PC9wPjxwcmU+J1xuICAgICAgICArIGVzY2FwZShlLm1lc3NhZ2UgKyAnJywgdHJ1ZSlcbiAgICAgICAgKyAnPC9wcmU+JztcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxufVxuXG4vKipcbiAqIE9wdGlvbnNcbiAqL1xuXG5tYXJrZWQub3B0aW9ucyA9XG5tYXJrZWQuc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKG9wdCkge1xuICBtZXJnZShtYXJrZWQuZGVmYXVsdHMsIG9wdCk7XG4gIHJldHVybiBtYXJrZWQ7XG59O1xuXG5tYXJrZWQuZGVmYXVsdHMgPSB7XG4gIGdmbTogdHJ1ZSxcbiAgdGFibGVzOiB0cnVlLFxuICBicmVha3M6IGZhbHNlLFxuICBwZWRhbnRpYzogZmFsc2UsXG4gIHNhbml0aXplOiBmYWxzZSxcbiAgc2FuaXRpemVyOiBudWxsLFxuICBtYW5nbGU6IHRydWUsXG4gIHNtYXJ0TGlzdHM6IGZhbHNlLFxuICBzaWxlbnQ6IGZhbHNlLFxuICBoaWdobGlnaHQ6IG51bGwsXG4gIGxhbmdQcmVmaXg6ICdsYW5nLScsXG4gIHNtYXJ0eXBhbnRzOiBmYWxzZSxcbiAgaGVhZGVyUHJlZml4OiAnJyxcbiAgcmVuZGVyZXI6IG5ldyBSZW5kZXJlcixcbiAgeGh0bWw6IGZhbHNlXG59O1xuXG4vKipcbiAqIEV4cG9zZVxuICovXG5cbm1hcmtlZC5QYXJzZXIgPSBQYXJzZXI7XG5tYXJrZWQucGFyc2VyID0gUGFyc2VyLnBhcnNlO1xuXG5tYXJrZWQuUmVuZGVyZXIgPSBSZW5kZXJlcjtcblxubWFya2VkLkxleGVyID0gTGV4ZXI7XG5tYXJrZWQubGV4ZXIgPSBMZXhlci5sZXg7XG5cbm1hcmtlZC5JbmxpbmVMZXhlciA9IElubGluZUxleGVyO1xubWFya2VkLmlubGluZUxleGVyID0gSW5saW5lTGV4ZXIub3V0cHV0O1xuXG5tYXJrZWQucGFyc2UgPSBtYXJrZWQ7XG5cbmlmICh0cnVlKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gbWFya2VkO1xufSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gbWFya2VkOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMubWFya2VkID0gbWFya2VkO1xufVxuXG59KS5jYWxsKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcyB8fCAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpO1xufSgpKTtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMjUpKSlcblxuLyoqKi8gfSksXG4vKiAyNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XG59IGNhdGNoKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcblx0XHRnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG5cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGRlbW8uanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxOCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgOTJlNTQ4MDhmMzUxOGE1OTg3NGMiLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlPYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvLyBAZmxvd1xuXG4vLyB0aGVyZSBhcmUgYSBmZXcgZml4bWVzIGluIGhlcmUuIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMzE0NlxuXG5leHBvcnQgY29uc3QgaW5jbHVkZXMgPSAodmFsOiBhbnksIGFycjogYW55W10pOiBib29sID0+XG4gIGFyci5pbmNsdWRlcyA/IGFyci5pbmNsdWRlcyh2YWwpIDogISFhcnIuZmlsdGVyKChpdGVtKSA9PiBpdGVtID09PSB2YWwpLmxlbmd0aFxuXG5jb25zdCB3cmFwQXJvdW5kVmFsdWUgPSAodmFsOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyID0+XG4gICgodmFsICUgbWF4KSArIG1heCkgJSBtYXhcblxuY29uc3QgaGFyZEJvdW5kZWRWYWx1ZSA9ICh2YWw6IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIgPT5cbiAgTWF0aC5tYXgoMCwgTWF0aC5taW4obWF4LCB2YWwpKVxuXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplSW5kZXggPSAoaWR4OiBudW1iZXIsIGxlbjogbnVtYmVyLCB3cmFwOiBib29sID0gZmFsc2UpID0+XG4gIHdyYXAgPyB3cmFwQXJvdW5kVmFsdWUoaWR4LCBsZW4pIDogaGFyZEJvdW5kZWRWYWx1ZShpZHgsIGxlbiAtIDEpXG5cbmV4cG9ydCBjb25zdCB2YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8ICgob2JqKSA9PlxuICBPYmplY3Qua2V5cyhvYmopLm1hcCgoa2V5KSA9PiBvYmpba2V5XSkpXG5cbmV4cG9ydCBjb25zdCBtaW5NYXAgPSAoLi4udmFsczogbnVtYmVyW10pID0+XG4gICh2YWw6IG51bWJlcik6IG51bWJlciA9PlxuICAgIE1hdGgubWluKC4uLnZhbHMsIHZhbClcblxuZXhwb3J0IGNvbnN0IG1heE1hcCA9ICguLi52YWxzOiBudW1iZXJbXSkgPT5cbiAgKHZhbDogbnVtYmVyKTogbnVtYmVyID0+XG4gICAgTWF0aC5tYXgoLi4udmFscywgdmFsKVxuXG5leHBvcnQgY29uc3Qgbm9vcCA9ICgpID0+XG4gIHVuZGVmaW5lZFxuXG5leHBvcnQgY29uc3QgZWFzZU91dFF1aW50ID0gKHQ6IG51bWJlcik6IG51bWJlciA9PlxuICAxICsgKC0tdCkgKiB0ICoqIDRcblxuZXhwb3J0IGNvbnN0IG9uID0gKGV2dDogc3RyaW5nLCBvcHRzOiBib29sID0gZmFsc2UpID0+XG4gIChjYjogKFN5bnRoZXRpY1RvdWNoRXZlbnQ8Kj4pID0+IGFueSkgPT5cbiAgICAoZWw6IGFueSk6IGFueSA9PiB7XG4gICAgICBpZiAoZWwgJiYgdHlwZW9mIGVsLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldnQsIGNiLCBvcHRzKVxuICAgICAgICByZXR1cm4gKCkgPT4gZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnQsIGNiKVxuICAgICAgfVxuICAgIH1cblxuZXhwb3J0IGNvbnN0IG9uV2luZG93U2Nyb2xsID0gKGNiOiAoU3ludGhldGljRXZlbnQ8Kj4pID0+IGFueSk6IHZvaWQgPT5cbiAgb24oJ3Njcm9sbCcsIHRydWUpKGNiKSh3aW5kb3cpXG5cbmV4cG9ydCBjb25zdCBvblNjcm9sbCA9IChcbiAgY2I6IChTeW50aGV0aWNFdmVudDwqPikgPT4gdm9pZCxcbiAgeyB0YXJnZXQgPSB3aW5kb3cgfTogeyB0YXJnZXQ6IE9iamVjdCB9ID0ge31cbik6IGFueSA9PlxuICBvbldpbmRvd1Njcm9sbCgoZTogU3ludGhldGljRXZlbnQ8Kj4pID0+ICh0YXJnZXQgPT09IHdpbmRvdyB8fCB0YXJnZXQgPT09IGUudGFyZ2V0KSAmJiBjYihlKSlcblxuZXhwb3J0IGNvbnN0IG9uU2Nyb2xsRW5kID0gKFxuICBjYjogKCkgPT4gdm9pZCxcbiAgeyB3YWl0ID0gMTAwLCB0YXJnZXQgPSB3aW5kb3cgfTogeyB3YWl0PzogbnVtYmVyLCB0YXJnZXQ6IE9iamVjdCB9ID0ge31cbik6IHZvaWQgPT5cbiAgKCh0aW1lb3V0SUQ6IG51bWJlcikgPT5cbiAgICBvblNjcm9sbCgoZXZ0OiBTeW50aGV0aWNFdmVudDwqPikgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJRClcbiAgICAgIHRpbWVvdXRJRCA9IHNldFRpbWVvdXQoKCkgPT4gZXZ0LnRhcmdldCA9PT0gdGFyZ2V0ID8gY2IoKSA6IHVuZGVmaW5lZCwgd2FpdClcbiAgICB9KSkoMClcblxuZXhwb3J0IGNvbnN0IG9uU2Nyb2xsU3RhcnQgPSAoXG4gIGNiOiAoU3ludGhldGljRXZlbnQ8Kj4pID0+IGFueSxcbiAgeyB0YXJnZXQgPSB3aW5kb3cgfTogeyB0YXJnZXQ6IE9iamVjdCB9ID0ge31cbik6ICgpID0+IHZvaWQgPT4ge1xuICBsZXQgc3RhcnRlZCA9IGZhbHNlXG4gIGNvbnN0IG9mZlNjcm9sbEVuZCA9IG9uU2Nyb2xsRW5kKCgpID0+IHsgc3RhcnRlZCA9IGZhbHNlIH0sIHsgdGFyZ2V0IH0pXG4gIGNvbnN0IG9mZlNjcm9sbCA9IG9uU2Nyb2xsKChlKSA9PiB7XG4gICAgaWYgKCFzdGFydGVkKSB7XG4gICAgICBzdGFydGVkID0gdHJ1ZVxuICAgICAgY2IoZSlcbiAgICB9XG4gIH0sIHsgdGFyZ2V0IH0pXG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICBpZiAodHlwZW9mIG9mZlNjcm9sbCA9PT0gJ2Z1bmN0aW9uJykgb2ZmU2Nyb2xsKClcbiAgICBpZiAodHlwZW9mIG9mZlNjcm9sbEVuZCA9PT0gJ2Z1bmN0aW9uJykgb2ZmU2Nyb2xsRW5kKClcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgb25Td2lwZSA9IChjYjogKHN0cmluZykgPT4gdm9pZCkgPT4gKHRhcmdldDogU3ludGhldGljVG91Y2hFdmVudDwqPik6IHZvaWQgPT4ge1xuICBjb25zdCBvZmZUb3VjaFN0YXJ0ID0gb24oJ3RvdWNoc3RhcnQnKSgoeyB0YXJnZXRUb3VjaGVzIH0pID0+IHtcbiAgICBjb25zdCB7IHBhZ2VYOiBzdGFydFgsIHBhZ2VZOiBzdGFydFkgfSA9IHRhcmdldFRvdWNoZXNbMF1cbiAgICBjb25zdCBvZmZUb3VjaEVuZCA9IG9uKCd0b3VjaGVuZCcpKCh7IGNoYW5nZWRUb3VjaGVzIH0pID0+IHtcbiAgICAgIGNvbnN0IHsgcGFnZVg6IGVuZFgsIHBhZ2VZOiBlbmRZIH0gPSBjaGFuZ2VkVG91Y2hlc1swXVxuICAgICAgY29uc3QgeERpZmYgPSBlbmRYIC0gc3RhcnRYXG4gICAgICBjb25zdCBhYnNYRGlmZiA9IE1hdGguYWJzKHhEaWZmKVxuICAgICAgY29uc3QgeURpZmYgPSBlbmRZIC0gc3RhcnRZXG4gICAgICBjb25zdCBhYnNZRGlmZiA9IE1hdGguYWJzKHlEaWZmKVxuICAgICAgaWYgKE1hdGgubWF4KGFic1hEaWZmLCBhYnNZRGlmZikgPiAyMCkge1xuICAgICAgICBjb25zdCBkaXIgPSBhYnNYRGlmZiA+IGFic1lEaWZmID8gKC8qIGggKi8geERpZmYgPCAwID8gJ3JpZ2h0JyA6ICdsZWZ0JykgOiAoLyogdiAqLyB5RGlmZiA8IDAgPyAnZG93bicgOiAndXAnKVxuICAgICAgICBjYihkaXIpXG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG9mZlRvdWNoRW5kID09PSAnZnVuY3Rpb24nKSBvZmZUb3VjaEVuZCgpXG4gICAgfSkodGFyZ2V0KVxuICB9KSh0YXJnZXQpXG5cbiAgcmV0dXJuIG9mZlRvdWNoU3RhcnRcbn1cblxuZXhwb3J0IGNvbnN0IHRyYWNrVG91Y2hlc0ZvckVsZW1lbnQgPSAoZWw6IEVsZW1lbnQpOiAoKSA9PiBudW1iZXIgPT4ge1xuICBsZXQgdG91Y2hJZHMgPSBbXVxuICBvbigndG91Y2hlbmQnKSgoeyB0YXJnZXRUb3VjaGVzIH0pID0+IHsgdG91Y2hJZHMgPSB0YXJnZXRUb3VjaGVzIH0pKGVsKVxuICByZXR1cm4gKCkgPT4gdG91Y2hJZHMubGVuZ3RoXG59XG5cbmV4cG9ydCBjb25zdCB0cmFja09uZ29pbmdNb3VzZUludGVyYWN0aW9uID0gKGVsOiBFbGVtZW50KTogKCkgPT4gYm9vbCA9PiB7XG4gIGxldCBpc0ludGVyYWN0aW5nID0gZmFsc2VcbiAgb24oJ21vdXNlZG93bicpKCgpID0+IHsgaXNJbnRlcmFjdGluZyA9IHRydWUgfSkoZWwpXG4gIG9uKCdtb3VzZXVwJykoKCkgPT4geyBpc0ludGVyYWN0aW5nID0gZmFsc2UgfSkoZG9jdW1lbnQuYm9keSlcbiAgcmV0dXJuICgpID0+IGlzSW50ZXJhY3Rpbmdcbn1cblxuZXhwb3J0IGNvbnN0IGhhc09uZ29pbmdJbnRlcmFjdGlvbiA9IChlbDogRWxlbWVudCk6ICgpID0+IGJvb2wgPT4ge1xuICBjb25zdCBnZXRPbmdvaW5nVG91Y2hDb3VudCA9IHRyYWNrVG91Y2hlc0ZvckVsZW1lbnQoZWwpXG4gIGNvbnN0IGdldE9uZ29pbmdNb3VzZUNsaWNrID0gdHJhY2tPbmdvaW5nTW91c2VJbnRlcmFjdGlvbihlbClcbiAgcmV0dXJuICgpID0+ICEhZ2V0T25nb2luZ1RvdWNoQ291bnQoKSB8fCBnZXRPbmdvaW5nTW91c2VDbGljaygpXG59XG5cbmNvbnN0IGZha2VDaGlsZCA9IHsgZ2V0Qm91bmRpbmdDbGllbnRSZWN0OiAoKSA9PiAoe30pIH1cbmV4cG9ydCBjb25zdCBpc1dob2xseUluVmlldyA9IChwYXJlbnQ6IEVsZW1lbnQpID0+XG4gIChjaGlsZDogRWxlbWVudCB8IHR5cGVvZiBmYWtlQ2hpbGQgPSBmYWtlQ2hpbGQpOiBib29sID0+IHtcbiAgICBjb25zdCB7IGxlZnQ6IGNMZWZ0LCByaWdodDogY1JpZ2h0IH0gPSBjaGlsZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGNvbnN0IHsgbGVmdDogcExlZnQsIHJpZ2h0OiBwUmlnaHQgfSA9IHBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIHJldHVybiAoY0xlZnQgPj0gcExlZnQgJiYgY1JpZ2h0IDw9IHBSaWdodClcbiAgfVxuXG5leHBvcnQgY29uc3QgYW5pbWF0ZSA9IChlbDogRWxlbWVudCwge1xuICBkZWx0YSA9IDAsXG4gIGltbWVkaWF0ZSA9IGZhbHNlLFxuICBkdXJhdGlvbiA9IDUwMCxcbiAgZWFzaW5nID0gZWFzZU91dFF1aW50LFxuICBwcm9wID0gJ3Njcm9sbFRvcCdcbn06IHtcbiAgZGVsdGE6IG51bWJlcixcbiAgaW1tZWRpYXRlPzogYm9vbCxcbiAgZHVyYXRpb246IG51bWJlcixcbiAgZWFzaW5nOiAobnVtYmVyKSA9PiBudW1iZXIsXG4gIHByb3A6IHN0cmluZ1xufSA9IHt9KTogUHJvbWlzZTwqPiA9PlxuICBuZXcgUHJvbWlzZSgocmVzLCByZWopOiB2b2lkID0+IHtcbiAgICBpZiAoIWRlbHRhKSByZXR1cm4gcmVzKClcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgY29uc3QgaW5pdGlhbFZhbCA9IGVsW3Byb3BdXG4gICAgaWYgKGltbWVkaWF0ZSkge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgZWxbcHJvcF0gPSBpbml0aWFsVmFsICsgZGVsdGFcbiAgICAgIHJldHVybiByZXMoKVxuICAgIH1cbiAgICBsZXQgaGFzQmFpbGVkID0gZmFsc2VcbiAgICBjb25zdCBiYWlsID0gKCk6IHZvaWQgPT4ge1xuICAgICAgaGFzQmFpbGVkID0gdHJ1ZVxuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgY29uc3QgcG9zID0gZWxbcHJvcF1cbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBiYWlsKVxuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgZWxbcHJvcF0gPSBwb3NcbiAgICAgIHJldHVybiByZWooJ0FuaW1hdGlvbiBpbnRlcnJ1cHRlZCBieSBpbnRlcmFjdGlvbicpXG4gICAgfVxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBiYWlsKVxuICAgIGxldCBzdGFydFRpbWUgPSBudWxsXG4gICAgY29uc3Qgc3RlcCA9ICh0aW1lc3RhbXA6IG51bWJlcikgPT4ge1xuICAgICAgaWYgKGhhc0JhaWxlZCkgcmV0dXJuXG4gICAgICBpZiAoIXN0YXJ0VGltZSkgc3RhcnRUaW1lID0gdGltZXN0YW1wXG4gICAgICBjb25zdCBwcm9ncmVzc1RpbWUgPSB0aW1lc3RhbXAgLSBzdGFydFRpbWVcbiAgICAgIGNvbnN0IHByb2dyZXNzUmF0aW8gPSBlYXNpbmcocHJvZ3Jlc3NUaW1lIC8gZHVyYXRpb24pXG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBlbFtwcm9wXSA9IGluaXRpYWxWYWwgKyAoZGVsdGEgKiBwcm9ncmVzc1JhdGlvKVxuICAgICAgaWYgKHByb2dyZXNzVGltZSA8IGR1cmF0aW9uKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgZWxbcHJvcF0gPSBpbml0aWFsVmFsICsgZGVsdGEgLy8ganVtcCB0byBlbmQgd2hlbiBhbmltYXRpb24gaXMgY29tcGxldGUuIG5lY2Vzc2FyeSBhdCBsZWFzdCBmb3IgaW1tZWRpYXRlIHNjcm9sbFxuICAgICAgICByZXMoKVxuICAgICAgfVxuICAgIH1cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApXG4gIH0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXRpbHMuanMiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEuMVxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLHA9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIik7XG5mdW5jdGlvbiBxKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZT1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyllKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2I9RXJyb3IoZStcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2IubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIjtiLmZyYW1lc1RvUG9wPTE7dGhyb3cgYjt9XG52YXIgcj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX07ZnVuY3Rpb24gdChhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1uO3RoaXMudXBkYXRlcj1lfHxyfXQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307dC5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP3EoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTt0LnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIHUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9bjt0aGlzLnVwZGF0ZXI9ZXx8cn1mdW5jdGlvbiB2KCl7fXYucHJvdG90eXBlPXQucHJvdG90eXBlO3ZhciB3PXUucHJvdG90eXBlPW5ldyB2O3cuY29uc3RydWN0b3I9dTttKHcsdC5wcm90b3R5cGUpO3cuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7ZnVuY3Rpb24geChhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1uO3RoaXMudXBkYXRlcj1lfHxyfXZhciB5PXgucHJvdG90eXBlPW5ldyB2O3kuY29uc3RydWN0b3I9eDttKHksdC5wcm90b3R5cGUpO3kudW5zdGFibGVfaXNBc3luY1JlYWN0Q29tcG9uZW50PSEwO3kucmVuZGVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW59O1xudmFyIHo9e2N1cnJlbnQ6bnVsbH0sQT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdJiZTeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpfHw2MDEwMyxDPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBEKGEsYixlKXt2YXIgZCxjPXt9LGg9bnVsbCxrPW51bGw7aWYobnVsbCE9Yilmb3IoZCBpbiB2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaD1cIlwiK2Iua2V5KSxiKUEuY2FsbChiLGQpJiYhQy5oYXNPd25Qcm9wZXJ0eShkKSYmKGNbZF09YltkXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWMuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zm9yKHZhciBnPUFycmF5KGYpLGw9MDtsPGY7bCsrKWdbbF09YXJndW1lbnRzW2wrMl07Yy5jaGlsZHJlbj1nfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihkIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1jW2RdJiYoY1tkXT1mW2RdKTtyZXR1cm57JCR0eXBlb2Y6Qix0eXBlOmEsa2V5OmgscmVmOmsscHJvcHM6Yyxfb3duZXI6ei5jdXJyZW50fX1mdW5jdGlvbiBFKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1CfVxudmFyIEY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLEc9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdJiZTeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpfHw2MDEwMyxIPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbFtcImZvclwiXSYmU3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucG9ydGFsXCIpfHw2MDEwNjtmdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiXFx4M2RcIjpcIlxceDNkMFwiLFwiOlwiOlwiXFx4M2QyXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBJPS9cXC8rL2csSj1bXTtcbmZ1bmN0aW9uIEsoYSxiLGUsZCl7aWYoSi5sZW5ndGgpe3ZhciBjPUoucG9wKCk7Yy5yZXN1bHQ9YTtjLmtleVByZWZpeD1iO2MuZnVuYz1lO2MuY29udGV4dD1kO2MuY291bnQ9MDtyZXR1cm4gY31yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzplLGNvbnRleHQ6ZCxjb3VudDowfX1mdW5jdGlvbiBMKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+Si5sZW5ndGgmJkoucHVzaChhKX1cbmZ1bmN0aW9uIE0oYSxiLGUsZCl7dmFyIGM9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWN8fFwiYm9vbGVhblwiPT09YylhPW51bGw7aWYobnVsbD09PWF8fFwic3RyaW5nXCI9PT1jfHxcIm51bWJlclwiPT09Y3x8XCJvYmplY3RcIj09PWMmJmEuJCR0eXBlb2Y9PT1HfHxcIm9iamVjdFwiPT09YyYmYS4kJHR5cGVvZj09PUgpcmV0dXJuIGUoZCxhLFwiXCI9PT1iP1wiLlwiK04oYSwwKTpiKSwxO3ZhciBoPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2M9YVtrXTt2YXIgZj1iK04oYyxrKTtoKz1NKGMsZixlLGQpfWVsc2UgaWYoZj1GJiZhW0ZdfHxhW1wiQEBpdGVyYXRvclwiXSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaz0wOyEoYz1hLm5leHQoKSkuZG9uZTspYz1jLnZhbHVlLGY9YitOKGMsaysrKSxoKz1NKGMsZixlLGQpO2Vsc2VcIm9iamVjdFwiPT09YyYmKGU9XCJcIithLHEoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1cbmU/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZSxcIlwiKSk7cmV0dXJuIGh9ZnVuY3Rpb24gTihhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gTyhhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBQKGEsYixlKXt2YXIgZD1hLnJlc3VsdCxjPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1EoYSxkLGUscC50aGF0UmV0dXJuc0FyZ3VtZW50KTpudWxsIT1hJiYoRShhKSYmKGI9YysoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoSSxcIiRcXHgyNi9cIikrXCIvXCIpK2UsYT17JCR0eXBlb2Y6Qix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9KSxkLnB1c2goYSkpfWZ1bmN0aW9uIFEoYSxiLGUsZCxjKXt2YXIgaD1cIlwiO251bGwhPWUmJihoPShcIlwiK2UpLnJlcGxhY2UoSSxcIiRcXHgyNi9cIikrXCIvXCIpO2I9SyhiLGgsZCxjKTtudWxsPT1hfHxNKGEsXCJcIixQLGIpO0woYil9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdJiZTeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTtcbnZhciBSPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdO1EoYSxkLG51bGwsYixlKTtyZXR1cm4gZH0sZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTtiPUsobnVsbCxudWxsLGIsZSk7bnVsbD09YXx8TShhLFwiXCIsTyxiKTtMKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT8wOk0oYSxcIlwiLHAudGhhdFJldHVybnNOdWxsLG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1EoYSxiLG51bGwscC50aGF0UmV0dXJuc0FyZ3VtZW50KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtFKGEpP3ZvaWQgMDpxKFwiMTQzXCIpO3JldHVybiBhfX0sQ29tcG9uZW50OnQsUHVyZUNvbXBvbmVudDp1LHVuc3RhYmxlX0FzeW5jQ29tcG9uZW50OngsY3JlYXRlRWxlbWVudDpELGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7dmFyIGQ9bSh7fSxhLnByb3BzKSxjPWEua2V5LGg9YS5yZWYsXG5rPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixrPXouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihjPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihnIGluIGIpQS5jYWxsKGIsZykmJiFDLmhhc093blByb3BlcnR5KGcpJiYoZFtnXT12b2lkIDA9PT1iW2ddJiZ2b2lkIDAhPT1mP2ZbZ106YltnXSl9dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zyl7Zj1BcnJheShnKTtmb3IodmFyIGw9MDtsPGc7bCsrKWZbbF09YXJndW1lbnRzW2wrMl07ZC5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpCLHR5cGU6YS50eXBlLGtleTpjLHJlZjpoLHByb3BzOmQsX293bmVyOmt9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPUQuYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpFLFxudmVyc2lvbjpcIjE2LjEuMVwiLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjp6LGFzc2lnbjptfX0sUz1PYmplY3QuZnJlZXplKHtkZWZhdWx0OlJ9KSxUPVMmJlJ8fFM7bW9kdWxlLmV4cG9ydHM9VFtcImRlZmF1bHRcIl0/VFtcImRlZmF1bHRcIl06VDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMS4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxBPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLEI9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIiksY2E9cmVxdWlyZShcImZianMvbGliL0V2ZW50TGlzdGVuZXJcIiksZGE9cmVxdWlyZShcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIiksZWE9cmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSxoYT1yZXF1aXJlKFwiZmJqcy9saWIvY29udGFpbnNOb2RlXCIpLGlhPXJlcXVpcmUoXCJmYmpzL2xpYi9mb2N1c05vZGVcIiksQz1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyljKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2I9RXJyb3IoYytcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2IubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIjtiLmZyYW1lc1RvUG9wPTE7dGhyb3cgYjt9YWE/dm9pZCAwOkQoXCIyMjdcIik7XG52YXIgbGE9e2NoaWxkcmVuOiEwLGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiEwLGRlZmF1bHRWYWx1ZTohMCxkZWZhdWx0Q2hlY2tlZDohMCxpbm5lckhUTUw6ITAsc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nOiEwLHN1cHByZXNzSHlkcmF0aW9uV2FybmluZzohMCxzdHlsZTohMH07ZnVuY3Rpb24gcWEoYSxiKXtyZXR1cm4oYSZiKT09PWJ9XG52YXIgcmE9e01VU1RfVVNFX1BST1BFUlRZOjEsSEFTX0JPT0xFQU5fVkFMVUU6NCxIQVNfTlVNRVJJQ19WQUxVRTo4LEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFOjI0LEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU6MzIsSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFOjY0LGluamVjdERPTVByb3BlcnR5Q29uZmlnOmZ1bmN0aW9uKGEpe3ZhciBiPXJhLGM9YS5Qcm9wZXJ0aWVzfHx7fSxkPWEuRE9NQXR0cmlidXRlTmFtZXNwYWNlc3x8e30sZT1hLkRPTUF0dHJpYnV0ZU5hbWVzfHx7fTthPWEuRE9NTXV0YXRpb25NZXRob2RzfHx7fTtmb3IodmFyIGYgaW4gYyl7c2EuaGFzT3duUHJvcGVydHkoZik/RChcIjQ4XCIsZik6dm9pZCAwO3ZhciBnPWYudG9Mb3dlckNhc2UoKSxrPWNbZl07Zz17YXR0cmlidXRlTmFtZTpnLGF0dHJpYnV0ZU5hbWVzcGFjZTpudWxsLHByb3BlcnR5TmFtZTpmLG11dGF0aW9uTWV0aG9kOm51bGwsbXVzdFVzZVByb3BlcnR5OnFhKGssYi5NVVNUX1VTRV9QUk9QRVJUWSksXG5oYXNCb29sZWFuVmFsdWU6cWEoayxiLkhBU19CT09MRUFOX1ZBTFVFKSxoYXNOdW1lcmljVmFsdWU6cWEoayxiLkhBU19OVU1FUklDX1ZBTFVFKSxoYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZTpxYShrLGIuSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUpLGhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6cWEoayxiLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUpLGhhc1N0cmluZ0Jvb2xlYW5WYWx1ZTpxYShrLGIuSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFKX07MT49Zy5oYXNCb29sZWFuVmFsdWUrZy5oYXNOdW1lcmljVmFsdWUrZy5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlP3ZvaWQgMDpEKFwiNTBcIixmKTtlLmhhc093blByb3BlcnR5KGYpJiYoZy5hdHRyaWJ1dGVOYW1lPWVbZl0pO2QuaGFzT3duUHJvcGVydHkoZikmJihnLmF0dHJpYnV0ZU5hbWVzcGFjZT1kW2ZdKTthLmhhc093blByb3BlcnR5KGYpJiYoZy5tdXRhdGlvbk1ldGhvZD1hW2ZdKTtzYVtmXT1nfX19LHNhPXt9O1xuZnVuY3Rpb24gdGEoYSxiKXtpZihsYS5oYXNPd25Qcm9wZXJ0eShhKXx8MjxhLmxlbmd0aCYmKFwib1wiPT09YVswXXx8XCJPXCI9PT1hWzBdKSYmKFwiblwiPT09YVsxXXx8XCJOXCI9PT1hWzFdKSlyZXR1cm4hMTtpZihudWxsPT09YilyZXR1cm4hMDtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJib29sZWFuXCI6cmV0dXJuIGxhLmhhc093blByb3BlcnR5KGEpP2E9ITA6KGI9dWEoYSkpP2E9Yi5oYXNCb29sZWFuVmFsdWV8fGIuaGFzU3RyaW5nQm9vbGVhblZhbHVlfHxiLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6KGE9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSksYT1cImRhdGEtXCI9PT1hfHxcImFyaWEtXCI9PT1hKSxhO2Nhc2UgXCJ1bmRlZmluZWRcIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJvYmplY3RcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiB1YShhKXtyZXR1cm4gc2EuaGFzT3duUHJvcGVydHkoYSk/c2FbYV06bnVsbH1cbnZhciB2YT1yYSx3YT12YS5NVVNUX1VTRV9QUk9QRVJUWSxIPXZhLkhBU19CT09MRUFOX1ZBTFVFLHhhPXZhLkhBU19OVU1FUklDX1ZBTFVFLHlhPXZhLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLHphPXZhLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUsQWE9dmEuSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFLEJhPXtQcm9wZXJ0aWVzOnthbGxvd0Z1bGxTY3JlZW46SCxhc3luYzpILGF1dG9Gb2N1czpILGF1dG9QbGF5OkgsY2FwdHVyZTp6YSxjaGVja2VkOndhfEgsY29sczp5YSxjb250ZW50RWRpdGFibGU6QWEsY29udHJvbHM6SCxcImRlZmF1bHRcIjpILGRlZmVyOkgsZGlzYWJsZWQ6SCxkb3dubG9hZDp6YSxkcmFnZ2FibGU6QWEsZm9ybU5vVmFsaWRhdGU6SCxoaWRkZW46SCxsb29wOkgsbXVsdGlwbGU6d2F8SCxtdXRlZDp3YXxILG5vVmFsaWRhdGU6SCxvcGVuOkgscGxheXNJbmxpbmU6SCxyZWFkT25seTpILHJlcXVpcmVkOkgscmV2ZXJzZWQ6SCxyb3dzOnlhLHJvd1NwYW46eGEsXG5zY29wZWQ6SCxzZWFtbGVzczpILHNlbGVjdGVkOndhfEgsc2l6ZTp5YSxzdGFydDp4YSxzcGFuOnlhLHNwZWxsQ2hlY2s6QWEsc3R5bGU6MCx0YWJJbmRleDowLGl0ZW1TY29wZTpILGFjY2VwdENoYXJzZXQ6MCxjbGFzc05hbWU6MCxodG1sRm9yOjAsaHR0cEVxdWl2OjAsdmFsdWU6QWF9LERPTUF0dHJpYnV0ZU5hbWVzOnthY2NlcHRDaGFyc2V0OlwiYWNjZXB0LWNoYXJzZXRcIixjbGFzc05hbWU6XCJjbGFzc1wiLGh0bWxGb3I6XCJmb3JcIixodHRwRXF1aXY6XCJodHRwLWVxdWl2XCJ9LERPTU11dGF0aW9uTWV0aG9kczp7dmFsdWU6ZnVuY3Rpb24oYSxiKXtpZihudWxsPT1iKXJldHVybiBhLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO1wibnVtYmVyXCIhPT1hLnR5cGV8fCExPT09YS5oYXNBdHRyaWJ1dGUoXCJ2YWx1ZVwiKT9hLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitiKTphLnZhbGlkaXR5JiYhYS52YWxpZGl0eS5iYWRJbnB1dCYmYS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hJiZcbmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK2IpfX19LENhPXZhLkhBU19TVFJJTkdfQk9PTEVBTl9WQUxVRSxLPXt4bGluazpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIix4bWw6XCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIn0sRGE9e1Byb3BlcnRpZXM6e2F1dG9SZXZlcnNlOkNhLGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQ6Q2EscHJlc2VydmVBbHBoYTpDYX0sRE9NQXR0cmlidXRlTmFtZXM6e2F1dG9SZXZlcnNlOlwiYXV0b1JldmVyc2VcIixleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkOlwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLHByZXNlcnZlQWxwaGE6XCJwcmVzZXJ2ZUFscGhhXCJ9LERPTUF0dHJpYnV0ZU5hbWVzcGFjZXM6e3hsaW5rQWN0dWF0ZTpLLnhsaW5rLHhsaW5rQXJjcm9sZTpLLnhsaW5rLHhsaW5rSHJlZjpLLnhsaW5rLHhsaW5rUm9sZTpLLnhsaW5rLHhsaW5rU2hvdzpLLnhsaW5rLHhsaW5rVGl0bGU6Sy54bGluayx4bGlua1R5cGU6Sy54bGluayxcbnhtbEJhc2U6Sy54bWwseG1sTGFuZzpLLnhtbCx4bWxTcGFjZTpLLnhtbH19LEVhPS9bXFwtXFw6XShbYS16XSkvZztmdW5jdGlvbiBIYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4LWhlaWdodCB4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZSB4bWw6YmFzZSB4bWxuczp4bGluayB4bWw6bGFuZyB4bWw6c3BhY2VcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoRWEsXG5IYSk7RGEuUHJvcGVydGllc1tiXT0wO0RhLkRPTUF0dHJpYnV0ZU5hbWVzW2JdPWF9KTt2YS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhCYSk7dmEuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoRGEpO1xudmFyIE49e19jYXVnaHRFcnJvcjpudWxsLF9oYXNDYXVnaHRFcnJvcjohMSxfcmV0aHJvd0Vycm9yOm51bGwsX2hhc1JldGhyb3dFcnJvcjohMSxpbmplY3Rpb246e2luamVjdEVycm9yVXRpbHM6ZnVuY3Rpb24oYSl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGEuaW52b2tlR3VhcmRlZENhbGxiYWNrP0QoXCIxOTdcIik6dm9pZCAwO0lhPWEuaW52b2tlR3VhcmRlZENhbGxiYWNrfX0saW52b2tlR3VhcmRlZENhbGxiYWNrOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsayxoKXtJYS5hcHBseShOLGFyZ3VtZW50cyl9LGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGssaCl7Ti5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKE4uaGFzQ2F1Z2h0RXJyb3IoKSl7dmFyIHI9Ti5jbGVhckNhdWdodEVycm9yKCk7Ti5faGFzUmV0aHJvd0Vycm9yfHwoTi5faGFzUmV0aHJvd0Vycm9yPSEwLE4uX3JldGhyb3dFcnJvcj1cbnIpfX0scmV0aHJvd0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIEphLmFwcGx5KE4sYXJndW1lbnRzKX0saGFzQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gTi5faGFzQ2F1Z2h0RXJyb3J9LGNsZWFyQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtpZihOLl9oYXNDYXVnaHRFcnJvcil7dmFyIGE9Ti5fY2F1Z2h0RXJyb3I7Ti5fY2F1Z2h0RXJyb3I9bnVsbDtOLl9oYXNDYXVnaHRFcnJvcj0hMTtyZXR1cm4gYX1EKFwiMTk4XCIpfX07ZnVuY3Rpb24gSWEoYSxiLGMsZCxlLGYsZyxrLGgpe04uX2hhc0NhdWdodEVycm9yPSExO04uX2NhdWdodEVycm9yPW51bGw7dmFyIHI9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMscil9Y2F0Y2gobil7Ti5fY2F1Z2h0RXJyb3I9bixOLl9oYXNDYXVnaHRFcnJvcj0hMH19XG5mdW5jdGlvbiBKYSgpe2lmKE4uX2hhc1JldGhyb3dFcnJvcil7dmFyIGE9Ti5fcmV0aHJvd0Vycm9yO04uX3JldGhyb3dFcnJvcj1udWxsO04uX2hhc1JldGhyb3dFcnJvcj0hMTt0aHJvdyBhO319dmFyIEthPW51bGwsTGE9e307XG5mdW5jdGlvbiBNYSgpe2lmKEthKWZvcih2YXIgYSBpbiBMYSl7dmFyIGI9TGFbYV0sYz1LYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOkQoXCI5NlwiLGEpO2lmKCFOYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDpEKFwiOTdcIixhKTtOYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaz1kO09hLmhhc093blByb3BlcnR5KGspP0QoXCI5OVwiLGspOnZvaWQgMDtPYVtrXT1mO3ZhciBoPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoaCl7Zm9yKGUgaW4gaCloLmhhc093blByb3BlcnR5KGUpJiZQYShoW2VdLGcsayk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8oUGEoZi5yZWdpc3RyYXRpb25OYW1lLGcsayksZT0hMCk6ZT0hMTtlP3ZvaWQgMDpEKFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gUGEoYSxiLGMpe1FhW2FdP0QoXCIxMDBcIixhKTp2b2lkIDA7UWFbYV09YjtSYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBOYT1bXSxPYT17fSxRYT17fSxSYT17fTtmdW5jdGlvbiBTYShhKXtLYT9EKFwiMTAxXCIpOnZvaWQgMDtLYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtNYSgpfWZ1bmN0aW9uIFRhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO0xhLmhhc093blByb3BlcnR5KGMpJiZMYVtjXT09PWR8fChMYVtjXT9EKFwiMTAyXCIsYyk6dm9pZCAwLExhW2NdPWQsYj0hMCl9YiYmTWEoKX1cbnZhciBVYT1PYmplY3QuZnJlZXplKHtwbHVnaW5zOk5hLGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczpPYSxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczpRYSxyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOlJhLHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6bnVsbCxpbmplY3RFdmVudFBsdWdpbk9yZGVyOlNhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpUYX0pLFZhPW51bGwsV2E9bnVsbCxYYT1udWxsO2Z1bmN0aW9uIFlhKGEsYixjLGQpe2I9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9WGEoZCk7Ti5pbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IoYixjLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIFphKGEsYil7bnVsbD09Yj9EKFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiAkYShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgYWI9bnVsbDtcbmZ1bmN0aW9uIGJiKGEsYil7aWYoYSl7dmFyIGM9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsZD1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZSsrKVlhKGEsYixjW2VdLGRbZV0pO2Vsc2UgYyYmWWEoYSxiLGMsZCk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gY2IoYSl7cmV0dXJuIGJiKGEsITApfWZ1bmN0aW9uIGRiKGEpe3JldHVybiBiYihhLCExKX12YXIgaWI9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6U2EsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOlRhfTtcbmZ1bmN0aW9uIGpiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9VmEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/RChcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIGtiKGEsYixjLGQpe2Zvcih2YXIgZSxmPTA7ZjxOYS5sZW5ndGg7ZisrKXt2YXIgZz1OYVtmXTtnJiYoZz1nLmV4dHJhY3RFdmVudHMoYSxiLGMsZCkpJiYoZT1aYShlLGcpKX1yZXR1cm4gZX1mdW5jdGlvbiBsYihhKXthJiYoYWI9WmEoYWIsYSkpfWZ1bmN0aW9uIG1iKGEpe3ZhciBiPWFiO2FiPW51bGw7YT8kYShiLGNiKTokYShiLGRiKTthYj9EKFwiOTVcIik6dm9pZCAwO04ucmV0aHJvd0NhdWdodEVycm9yKCl9dmFyIG5iPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjppYixnZXRMaXN0ZW5lcjpqYixleHRyYWN0RXZlbnRzOmtiLGVucXVldWVFdmVudHM6bGIscHJvY2Vzc0V2ZW50UXVldWU6bWJ9KSxvYj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxPPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrb2IscGI9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitvYjtcbmZ1bmN0aW9uIHFiKGEpe2lmKGFbT10pcmV0dXJuIGFbT107Zm9yKHZhciBiPVtdOyFhW09dOylpZihiLnB1c2goYSksYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7dmFyIGM9dm9pZCAwLGQ9YVtPXTtpZig1PT09ZC50YWd8fDY9PT1kLnRhZylyZXR1cm4gZDtmb3IoO2EmJihkPWFbT10pO2E9Yi5wb3AoKSljPWQ7cmV0dXJuIGN9ZnVuY3Rpb24gcmIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO0QoXCIzM1wiKX1mdW5jdGlvbiBzYihhKXtyZXR1cm4gYVtwYl18fG51bGx9XG52YXIgdGI9T2JqZWN0LmZyZWV6ZSh7cHJlY2FjaGVGaWJlck5vZGU6ZnVuY3Rpb24oYSxiKXtiW09dPWF9LGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlOnFiLGdldEluc3RhbmNlRnJvbU5vZGU6ZnVuY3Rpb24oYSl7YT1hW09dO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9LGdldE5vZGVGcm9tSW5zdGFuY2U6cmIsZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTpzYix1cGRhdGVGaWJlclByb3BzOmZ1bmN0aW9uKGEsYil7YVtwYl09Yn19KTtmdW5jdGlvbiBRKGEpe2RvIGE9YVtcInJldHVyblwiXTt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiB1YihhLGIsYyl7Zm9yKHZhciBkPVtdO2E7KWQucHVzaChhKSxhPVEoYSk7Zm9yKGE9ZC5sZW5ndGg7MDxhLS07KWIoZFthXSxcImNhcHR1cmVkXCIsYyk7Zm9yKGE9MDthPGQubGVuZ3RoO2ErKyliKGRbYV0sXCJidWJibGVkXCIsYyl9XG5mdW5jdGlvbiB2YihhLGIsYyl7aWYoYj1qYihhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPVphKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPVphKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIHdiKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMmJnViKGEuX3RhcmdldEluc3QsdmIsYSl9ZnVuY3Rpb24geGIoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7dmFyIGI9YS5fdGFyZ2V0SW5zdDtiPWI/UShiKTpudWxsO3ViKGIsdmIsYSl9fVxuZnVuY3Rpb24geWIoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9amIoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPVphKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPVphKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiB6YihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJnliKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBBYihhKXskYShhLHdiKX1cbmZ1bmN0aW9uIEJiKGEsYixjLGQpe2lmKGMmJmQpYTp7dmFyIGU9Yztmb3IodmFyIGY9ZCxnPTAsaz1lO2s7az1RKGspKWcrKztrPTA7Zm9yKHZhciBoPWY7aDtoPVEoaCkpaysrO2Zvcig7MDxnLWs7KWU9UShlKSxnLS07Zm9yKDswPGstZzspZj1RKGYpLGstLTtmb3IoO2ctLTspe2lmKGU9PT1mfHxlPT09Zi5hbHRlcm5hdGUpYnJlYWsgYTtlPVEoZSk7Zj1RKGYpfWU9bnVsbH1lbHNlIGU9bnVsbDtmPWU7Zm9yKGU9W107YyYmYyE9PWY7KXtnPWMuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09ZilicmVhaztlLnB1c2goYyk7Yz1RKGMpfWZvcihjPVtdO2QmJmQhPT1mOyl7Zz1kLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWYpYnJlYWs7Yy5wdXNoKGQpO2Q9UShkKX1mb3IoZD0wO2Q8ZS5sZW5ndGg7ZCsrKXliKGVbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGE9Yy5sZW5ndGg7MDxhLS07KXliKGNbYV0sXCJjYXB0dXJlZFwiLGIpfVxudmFyIENiPU9iamVjdC5mcmVlemUoe2FjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6QWIsYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6ZnVuY3Rpb24oYSl7JGEoYSx4Yil9LGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczpCYixhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczpmdW5jdGlvbihhKXskYShhLHpiKX19KSxEYj1udWxsO2Z1bmN0aW9uIEViKCl7IURiJiZtLmNhblVzZURPTSYmKERiPVwidGV4dENvbnRlbnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudD9cInRleHRDb250ZW50XCI6XCJpbm5lclRleHRcIik7cmV0dXJuIERifXZhciBSPXtfcm9vdDpudWxsLF9zdGFydFRleHQ6bnVsbCxfZmFsbGJhY2tUZXh0Om51bGx9O1xuZnVuY3Rpb24gRmIoKXtpZihSLl9mYWxsYmFja1RleHQpcmV0dXJuIFIuX2ZhbGxiYWNrVGV4dDt2YXIgYSxiPVIuX3N0YXJ0VGV4dCxjPWIubGVuZ3RoLGQsZT1HYigpLGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7Ui5fZmFsbGJhY2tUZXh0PWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCk7cmV0dXJuIFIuX2ZhbGxiYWNrVGV4dH1mdW5jdGlvbiBHYigpe3JldHVyblwidmFsdWVcImluIFIuX3Jvb3Q/Ui5fcm9vdC52YWx1ZTpSLl9yb290W0ViKCldfVxudmFyIEhiPVwiZGlzcGF0Y2hDb25maWcgX3RhcmdldEluc3QgbmF0aXZlRXZlbnQgaXNEZWZhdWx0UHJldmVudGVkIGlzUHJvcGFnYXRpb25TdG9wcGVkIF9kaXNwYXRjaExpc3RlbmVycyBfZGlzcGF0Y2hJbnN0YW5jZXNcIi5zcGxpdChcIiBcIiksSWI9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OkIudGhhdFJldHVybnNOdWxsLGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5mdW5jdGlvbiBTKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9CLnRoYXRSZXR1cm5zVHJ1ZTpCLnRoYXRSZXR1cm5zRmFsc2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1CLnRoYXRSZXR1cm5zRmFsc2U7cmV0dXJuIHRoaXN9XG5BKFMucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Qi50aGF0UmV0dXJuc1RydWUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Qi50aGF0UmV0dXJuc1RydWUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9Qi50aGF0UmV0dXJuc1RydWV9LGlzUGVyc2lzdGVudDpCLnRoYXRSZXR1cm5zRmFsc2UsXG5kZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDtmb3IoYT0wO2E8SGIubGVuZ3RoO2ErKyl0aGlzW0hiW2FdXT1udWxsfX0pO1MuSW50ZXJmYWNlPUliO1MuYXVnbWVudENsYXNzPWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYygpe31jLnByb3RvdHlwZT10aGlzLnByb3RvdHlwZTt2YXIgZD1uZXcgYztBKGQsYS5wcm90b3R5cGUpO2EucHJvdG90eXBlPWQ7YS5wcm90b3R5cGUuY29uc3RydWN0b3I9YTthLkludGVyZmFjZT1BKHt9LHRoaXMuSW50ZXJmYWNlLGIpO2EuYXVnbWVudENsYXNzPXRoaXMuYXVnbWVudENsYXNzO0piKGEpfTtKYihTKTtmdW5jdGlvbiBRYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIFJiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDpEKFwiMjIzXCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBKYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1RYjthLnJlbGVhc2U9UmJ9ZnVuY3Rpb24gU2IoYSxiLGMsZCl7cmV0dXJuIFMuY2FsbCh0aGlzLGEsYixjLGQpfVMuYXVnbWVudENsYXNzKFNiLHtkYXRhOm51bGx9KTtmdW5jdGlvbiBUYihhLGIsYyxkKXtyZXR1cm4gUy5jYWxsKHRoaXMsYSxiLGMsZCl9Uy5hdWdtZW50Q2xhc3MoVGIse2RhdGE6bnVsbH0pO3ZhciBVYj1bOSwxMywyNywzMl0sVmI9bS5jYW5Vc2VET00mJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LFdiPW51bGw7bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKFdiPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIFhiO1xuaWYoWGI9bS5jYW5Vc2VET00mJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFXYil7dmFyIFliPXdpbmRvdy5vcGVyYTtYYj0hKFwib2JqZWN0XCI9PT10eXBlb2YgWWImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBZYi52ZXJzaW9uJiYxMj49cGFyc2VJbnQoWWIudmVyc2lvbigpLDEwKSl9XG52YXIgWmI9WGIsJGI9bS5jYW5Vc2VET00mJighVmJ8fFdiJiY4PFdiJiYxMT49V2IpLGFjPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGJjPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1widG9wQ29tcG9zaXRpb25FbmRcIixcInRvcEtleVByZXNzXCIsXCJ0b3BUZXh0SW5wdXRcIixcInRvcFBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uRW5kIHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25TdGFydCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvblVwZGF0ZSB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX19LGNjPSExO1xuZnVuY3Rpb24gZGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuLTEhPT1VYi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcInRvcEtleURvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmNhc2UgXCJ0b3BNb3VzZURvd25cIjpjYXNlIFwidG9wQmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGVjKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGZjPSExO2Z1bmN0aW9uIGdjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOnJldHVybiBlYyhiKTtjYXNlIFwidG9wS2V5UHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7Y2M9ITA7cmV0dXJuIGFjO2Nhc2UgXCJ0b3BUZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWFjJiZjYz9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBoYyhhLGIpe2lmKGZjKXJldHVyblwidG9wQ29tcG9zaXRpb25FbmRcIj09PWF8fCFWYiYmZGMoYSxiKT8oYT1GYigpLFIuX3Jvb3Q9bnVsbCxSLl9zdGFydFRleHQ9bnVsbCxSLl9mYWxsYmFja1RleHQ9bnVsbCxmYz0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwidG9wUGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5UHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gJGI/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgaWM9e2V2ZW50VHlwZXM6YmMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZTtpZihWYiliOntzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uU3RhcnRcIjp2YXIgZj1iYy5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6Zj1iYy5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJ0b3BDb21wb3NpdGlvblVwZGF0ZVwiOmY9YmMuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1mPXZvaWQgMH1lbHNlIGZjP2RjKGEsYykmJihmPWJjLmNvbXBvc2l0aW9uRW5kKTpcInRvcEtleURvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGY9YmMuY29tcG9zaXRpb25TdGFydCk7Zj8oJGImJihmY3x8ZiE9PWJjLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PWJjLmNvbXBvc2l0aW9uRW5kJiZmYyYmKGU9RmIoKSk6KFIuX3Jvb3Q9ZCxSLl9zdGFydFRleHQ9R2IoKSxmYz0hMCkpLGY9U2IuZ2V0UG9vbGVkKGYsYixjLGQpLGU/Zi5kYXRhPVxuZTooZT1lYyhjKSxudWxsIT09ZSYmKGYuZGF0YT1lKSksQWIoZiksZT1mKTplPW51bGw7KGE9WmI/Z2MoYSxjKTpoYyhhLGMpKT8oYj1UYi5nZXRQb29sZWQoYmMuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLEFiKGIpKTpiPW51bGw7cmV0dXJuW2UsYl19fSxqYz1udWxsLGtjPW51bGwsbGM9bnVsbDtmdW5jdGlvbiBtYyhhKXtpZihhPVdhKGEpKXtqYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGpjLnJlc3RvcmVDb250cm9sbGVkU3RhdGU/dm9pZCAwOkQoXCIxOTRcIik7dmFyIGI9VmEoYS5zdGF0ZU5vZGUpO2pjLnJlc3RvcmVDb250cm9sbGVkU3RhdGUoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX12YXIgbmM9e2luamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQ6ZnVuY3Rpb24oYSl7amM9YX19O2Z1bmN0aW9uIG9jKGEpe2tjP2xjP2xjLnB1c2goYSk6bGM9W2FdOmtjPWF9XG5mdW5jdGlvbiBwYygpe2lmKGtjKXt2YXIgYT1rYyxiPWxjO2xjPWtjPW51bGw7bWMoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKW1jKGJbYV0pfX12YXIgcWM9T2JqZWN0LmZyZWV6ZSh7aW5qZWN0aW9uOm5jLGVucXVldWVTdGF0ZVJlc3RvcmU6b2MscmVzdG9yZVN0YXRlSWZOZWVkZWQ6cGN9KTtmdW5jdGlvbiByYyhhLGIpe3JldHVybiBhKGIpfXZhciBzYz0hMTtmdW5jdGlvbiB0YyhhLGIpe2lmKHNjKXJldHVybiByYyhhLGIpO3NjPSEwO3RyeXtyZXR1cm4gcmMoYSxiKX1maW5hbGx5e3NjPSExLHBjKCl9fXZhciB1Yz17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtcbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhdWNbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIHdjKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeGM7bS5jYW5Vc2VET00mJih4Yz1kb2N1bWVudC5pbXBsZW1lbnRhdGlvbiYmZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSYmITAhPT1kb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKFwiXCIsXCJcIikpO1xuZnVuY3Rpb24geWMoYSxiKXtpZighbS5jYW5Vc2VET018fGImJiEoXCJhZGRFdmVudExpc3RlbmVyXCJpbiBkb2N1bWVudCkpcmV0dXJuITE7Yj1cIm9uXCIrYTt2YXIgYz1iIGluIGRvY3VtZW50O2N8fChjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYy5zZXRBdHRyaWJ1dGUoYixcInJldHVybjtcIiksYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY1tiXSk7IWMmJnhjJiZcIndoZWVsXCI9PT1hJiYoYz1kb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKFwiRXZlbnRzLndoZWVsXCIsXCIzLjBcIikpO3JldHVybiBjfWZ1bmN0aW9uIHpjKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBBYyhhKXt2YXIgYj16YyhhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldClyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGUsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBjLmdldC5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Yy5zZXQuY2FsbCh0aGlzLGEpfX0pLHtnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPW51bGw7ZGVsZXRlIGFbYl19fX1cbmZ1bmN0aW9uIEJjKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1BYyhhKSl9ZnVuY3Rpb24gQ2MoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPXpjKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9dmFyIERjPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENoYW5nZSB0b3BDbGljayB0b3BGb2N1cyB0b3BJbnB1dCB0b3BLZXlEb3duIHRvcEtleVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O1xuZnVuY3Rpb24gRWMoYSxiLGMpe2E9Uy5nZXRQb29sZWQoRGMuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtvYyhjKTtBYihhKTtyZXR1cm4gYX12YXIgRmM9bnVsbCxHYz1udWxsO2Z1bmN0aW9uIEhjKGEpe2xiKGEpO21iKCExKX1mdW5jdGlvbiBJYyhhKXt2YXIgYj1yYihhKTtpZihDYyhiKSlyZXR1cm4gYX1mdW5jdGlvbiBKYyhhLGIpe2lmKFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBRYz0hMTttLmNhblVzZURPTSYmKFFjPXljKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIFJjKCl7RmMmJihGYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixTYyksR2M9RmM9bnVsbCl9ZnVuY3Rpb24gU2MoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkljKEdjKSYmKGE9RWMoR2MsYSx3YyhhKSksdGMoSGMsYSkpfVxuZnVuY3Rpb24gVGMoYSxiLGMpe1widG9wRm9jdXNcIj09PWE/KFJjKCksRmM9YixHYz1jLEZjLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFNjKSk6XCJ0b3BCbHVyXCI9PT1hJiZSYygpfWZ1bmN0aW9uIFVjKGEpe2lmKFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI9PT1hfHxcInRvcEtleVVwXCI9PT1hfHxcInRvcEtleURvd25cIj09PWEpcmV0dXJuIEljKEdjKX1mdW5jdGlvbiBWYyhhLGIpe2lmKFwidG9wQ2xpY2tcIj09PWEpcmV0dXJuIEljKGIpfWZ1bmN0aW9uIFdjKGEsYil7aWYoXCJ0b3BJbnB1dFwiPT09YXx8XCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIEljKGIpfVxudmFyIFhjPXtldmVudFR5cGVzOkRjLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6UWMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP3JiKGIpOndpbmRvdyxmPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09Znx8XCJpbnB1dFwiPT09ZiYmXCJmaWxlXCI9PT1lLnR5cGUpdmFyIGc9SmM7ZWxzZSBpZih2YyhlKSlpZihRYylnPVdjO2Vsc2V7Zz1VYzt2YXIgaz1UY31lbHNlIGY9ZS5ub2RlTmFtZSwhZnx8XCJpbnB1dFwiIT09Zi50b0xvd2VyQ2FzZSgpfHxcImNoZWNrYm94XCIhPT1lLnR5cGUmJlwicmFkaW9cIiE9PWUudHlwZXx8KGc9VmMpO2lmKGcmJihnPWcoYSxiKSkpcmV0dXJuIEVjKGcsYyxkKTtrJiZrKGEsZSxiKTtcInRvcEJsdXJcIj09PWEmJm51bGwhPWImJihhPWIuX3dyYXBwZXJTdGF0ZXx8ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiYoYT1cIlwiK2UudmFsdWUsZS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSE9PVxuYSYmZS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLGEpKX19O2Z1bmN0aW9uIFljKGEsYixjLGQpe3JldHVybiBTLmNhbGwodGhpcyxhLGIsYyxkKX1TLmF1Z21lbnRDbGFzcyhZYyx7dmlldzpudWxsLGRldGFpbDpudWxsfSk7dmFyIFpjPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiAkYyhhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPVpjW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gYWQoKXtyZXR1cm4gJGN9ZnVuY3Rpb24gYmQoYSxiLGMsZCl7cmV0dXJuIFMuY2FsbCh0aGlzLGEsYixjLGQpfVxuWWMuYXVnbWVudENsYXNzKGJkLHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOmFkLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfX0pO1xudmFyIGNkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX19LGRkPXtldmVudFR5cGVzOmNkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoXCJ0b3BNb3VzZU92ZXJcIj09PWEmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHxcInRvcE1vdXNlT3V0XCIhPT1hJiZcInRvcE1vdXNlT3ZlclwiIT09YSlyZXR1cm4gbnVsbDt2YXIgZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztcInRvcE1vdXNlT3V0XCI9PT1hPyhhPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9xYihiKTpudWxsKTphPW51bGw7aWYoYT09PVxuYilyZXR1cm4gbnVsbDt2YXIgZj1udWxsPT1hP2U6cmIoYSk7ZT1udWxsPT1iP2U6cmIoYik7dmFyIGc9YmQuZ2V0UG9vbGVkKGNkLm1vdXNlTGVhdmUsYSxjLGQpO2cudHlwZT1cIm1vdXNlbGVhdmVcIjtnLnRhcmdldD1mO2cucmVsYXRlZFRhcmdldD1lO2M9YmQuZ2V0UG9vbGVkKGNkLm1vdXNlRW50ZXIsYixjLGQpO2MudHlwZT1cIm1vdXNlZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1mO0JiKGcsYyxhLGIpO3JldHVybltnLGNdfX0sZWQ9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXI7ZnVuY3Rpb24gZmQoYSl7YT1hLnR5cGU7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOm51bGx9XG5mdW5jdGlvbiBnZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7YltcInJldHVyblwiXTspYj1iW1wicmV0dXJuXCJdO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2JbXCJyZXR1cm5cIl07KWlmKGI9YltcInJldHVyblwiXSwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIGhkKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PWdkKGEpOiExfWZ1bmN0aW9uIGlkKGEpezIhPT1nZChhKT9EKFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIGpkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPWdkKGEpLDM9PT1iP0QoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Y1tcInJldHVyblwiXSxmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09YylyZXR1cm4gaWQoZSksYTtpZihnPT09ZClyZXR1cm4gaWQoZSksYjtnPWcuc2libGluZ31EKFwiMTg4XCIpfWlmKGNbXCJyZXR1cm5cIl0hPT1kW1wicmV0dXJuXCJdKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaz1lLmNoaWxkO2s7KXtpZihrPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGs9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9az1rLnNpYmxpbmd9aWYoIWcpe2ZvcihrPWYuY2hpbGQ7azspe2lmKGs9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaz09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31rPWsuc2libGluZ31nP1xudm9pZCAwOkQoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD9EKFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/RChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBrZChhKXthPWpkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gbGQoYSl7YT1qZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkJiY0IT09Yi50YWcpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfXZhciBtZD1bXTtcbmZ1bmN0aW9uIG5kKGEpe3ZhciBiPWEudGFyZ2V0SW5zdDtkb3tpZighYil7YS5hbmNlc3RvcnMucHVzaChiKTticmVha312YXIgYztmb3IoYz1iO2NbXCJyZXR1cm5cIl07KWM9Y1tcInJldHVyblwiXTtjPTMhPT1jLnRhZz9udWxsOmMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPXFiKGMpfXdoaWxlKGIpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKWI9YS5hbmNlc3RvcnNbY10sb2QoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LHdjKGEubmF0aXZlRXZlbnQpKX12YXIgcGQ9ITAsb2Q9dm9pZCAwO2Z1bmN0aW9uIHFkKGEpe3BkPSEhYX1mdW5jdGlvbiBVKGEsYixjKXtyZXR1cm4gYz9jYS5saXN0ZW4oYyxiLHJkLmJpbmQobnVsbCxhKSk6bnVsbH1mdW5jdGlvbiBzZChhLGIsYyl7cmV0dXJuIGM/Y2EuY2FwdHVyZShjLGIscmQuYmluZChudWxsLGEpKTpudWxsfVxuZnVuY3Rpb24gcmQoYSxiKXtpZihwZCl7dmFyIGM9d2MoYik7Yz1xYihjKTtudWxsPT09Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBjLnRhZ3x8Mj09PWdkKGMpfHwoYz1udWxsKTtpZihtZC5sZW5ndGgpe3ZhciBkPW1kLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e3RjKG5kLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+bWQubGVuZ3RoJiZtZC5wdXNoKGEpfX19XG52YXIgdGQ9T2JqZWN0LmZyZWV6ZSh7Z2V0IF9lbmFibGVkKCl7cmV0dXJuIHBkfSxnZXQgX2hhbmRsZVRvcExldmVsKCl7cmV0dXJuIG9kfSxzZXRIYW5kbGVUb3BMZXZlbDpmdW5jdGlvbihhKXtvZD1hfSxzZXRFbmFibGVkOnFkLGlzRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiBwZH0sdHJhcEJ1YmJsZWRFdmVudDpVLHRyYXBDYXB0dXJlZEV2ZW50OnNkLGRpc3BhdGNoRXZlbnQ6cmR9KTtmdW5jdGlvbiB1ZChhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO2NbXCJtc1wiK2FdPVwiTVNcIitiO2NbXCJPXCIrYV09XCJvXCIrYi50b0xvd2VyQ2FzZSgpO3JldHVybiBjfVxudmFyIHZkPXthbmltYXRpb25lbmQ6dWQoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246dWQoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDp1ZChcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDp1ZChcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LHdkPXt9LHhkPXt9O20uY2FuVXNlRE9NJiYoeGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgdmQuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgdmQuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgdmQuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgdmQudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtcbmZ1bmN0aW9uIHlkKGEpe2lmKHdkW2FdKXJldHVybiB3ZFthXTtpZighdmRbYV0pcmV0dXJuIGE7dmFyIGI9dmRbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4geGQpcmV0dXJuIHdkW2FdPWJbY107cmV0dXJuXCJcIn1cbnZhciB6ZD17dG9wQWJvcnQ6XCJhYm9ydFwiLHRvcEFuaW1hdGlvbkVuZDp5ZChcImFuaW1hdGlvbmVuZFwiKXx8XCJhbmltYXRpb25lbmRcIix0b3BBbmltYXRpb25JdGVyYXRpb246eWQoXCJhbmltYXRpb25pdGVyYXRpb25cIil8fFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIsdG9wQW5pbWF0aW9uU3RhcnQ6eWQoXCJhbmltYXRpb25zdGFydFwiKXx8XCJhbmltYXRpb25zdGFydFwiLHRvcEJsdXI6XCJibHVyXCIsdG9wQ2FuY2VsOlwiY2FuY2VsXCIsdG9wQ2FuUGxheTpcImNhbnBsYXlcIix0b3BDYW5QbGF5VGhyb3VnaDpcImNhbnBsYXl0aHJvdWdoXCIsdG9wQ2hhbmdlOlwiY2hhbmdlXCIsdG9wQ2xpY2s6XCJjbGlja1wiLHRvcENsb3NlOlwiY2xvc2VcIix0b3BDb21wb3NpdGlvbkVuZDpcImNvbXBvc2l0aW9uZW5kXCIsdG9wQ29tcG9zaXRpb25TdGFydDpcImNvbXBvc2l0aW9uc3RhcnRcIix0b3BDb21wb3NpdGlvblVwZGF0ZTpcImNvbXBvc2l0aW9udXBkYXRlXCIsdG9wQ29udGV4dE1lbnU6XCJjb250ZXh0bWVudVwiLHRvcENvcHk6XCJjb3B5XCIsXG50b3BDdXQ6XCJjdXRcIix0b3BEb3VibGVDbGljazpcImRibGNsaWNrXCIsdG9wRHJhZzpcImRyYWdcIix0b3BEcmFnRW5kOlwiZHJhZ2VuZFwiLHRvcERyYWdFbnRlcjpcImRyYWdlbnRlclwiLHRvcERyYWdFeGl0OlwiZHJhZ2V4aXRcIix0b3BEcmFnTGVhdmU6XCJkcmFnbGVhdmVcIix0b3BEcmFnT3ZlcjpcImRyYWdvdmVyXCIsdG9wRHJhZ1N0YXJ0OlwiZHJhZ3N0YXJ0XCIsdG9wRHJvcDpcImRyb3BcIix0b3BEdXJhdGlvbkNoYW5nZTpcImR1cmF0aW9uY2hhbmdlXCIsdG9wRW1wdGllZDpcImVtcHRpZWRcIix0b3BFbmNyeXB0ZWQ6XCJlbmNyeXB0ZWRcIix0b3BFbmRlZDpcImVuZGVkXCIsdG9wRXJyb3I6XCJlcnJvclwiLHRvcEZvY3VzOlwiZm9jdXNcIix0b3BJbnB1dDpcImlucHV0XCIsdG9wS2V5RG93bjpcImtleWRvd25cIix0b3BLZXlQcmVzczpcImtleXByZXNzXCIsdG9wS2V5VXA6XCJrZXl1cFwiLHRvcExvYWRlZERhdGE6XCJsb2FkZWRkYXRhXCIsdG9wTG9hZDpcImxvYWRcIix0b3BMb2FkZWRNZXRhZGF0YTpcImxvYWRlZG1ldGFkYXRhXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsXG50b3BNb3VzZURvd246XCJtb3VzZWRvd25cIix0b3BNb3VzZU1vdmU6XCJtb3VzZW1vdmVcIix0b3BNb3VzZU91dDpcIm1vdXNlb3V0XCIsdG9wTW91c2VPdmVyOlwibW91c2VvdmVyXCIsdG9wTW91c2VVcDpcIm1vdXNldXBcIix0b3BQYXN0ZTpcInBhc3RlXCIsdG9wUGF1c2U6XCJwYXVzZVwiLHRvcFBsYXk6XCJwbGF5XCIsdG9wUGxheWluZzpcInBsYXlpbmdcIix0b3BQcm9ncmVzczpcInByb2dyZXNzXCIsdG9wUmF0ZUNoYW5nZTpcInJhdGVjaGFuZ2VcIix0b3BTY3JvbGw6XCJzY3JvbGxcIix0b3BTZWVrZWQ6XCJzZWVrZWRcIix0b3BTZWVraW5nOlwic2Vla2luZ1wiLHRvcFNlbGVjdGlvbkNoYW5nZTpcInNlbGVjdGlvbmNoYW5nZVwiLHRvcFN0YWxsZWQ6XCJzdGFsbGVkXCIsdG9wU3VzcGVuZDpcInN1c3BlbmRcIix0b3BUZXh0SW5wdXQ6XCJ0ZXh0SW5wdXRcIix0b3BUaW1lVXBkYXRlOlwidGltZXVwZGF0ZVwiLHRvcFRvZ2dsZTpcInRvZ2dsZVwiLHRvcFRvdWNoQ2FuY2VsOlwidG91Y2hjYW5jZWxcIix0b3BUb3VjaEVuZDpcInRvdWNoZW5kXCIsdG9wVG91Y2hNb3ZlOlwidG91Y2htb3ZlXCIsXG50b3BUb3VjaFN0YXJ0OlwidG91Y2hzdGFydFwiLHRvcFRyYW5zaXRpb25FbmQ6eWQoXCJ0cmFuc2l0aW9uZW5kXCIpfHxcInRyYW5zaXRpb25lbmRcIix0b3BWb2x1bWVDaGFuZ2U6XCJ2b2x1bWVjaGFuZ2VcIix0b3BXYWl0aW5nOlwid2FpdGluZ1wiLHRvcFdoZWVsOlwid2hlZWxcIn0sQWQ9e30sQmQ9MCxDZD1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7ZnVuY3Rpb24gRGQoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsQ2QpfHwoYVtDZF09QmQrKyxBZFthW0NkXV09e30pO3JldHVybiBBZFthW0NkXV19ZnVuY3Rpb24gRWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gRmQoYSxiKXt2YXIgYz1FZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1FZChjKX19ZnVuY3Rpb24gR2QoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmXCJ0ZXh0XCI9PT1hLnR5cGV8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIEhkPW0uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsSWQ9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29udGV4dE1lbnUgdG9wRm9jdXMgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BNb3VzZURvd24gdG9wTW91c2VVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxKZD1udWxsLEtkPW51bGwsTGQ9bnVsbCxNZD0hMTtcbmZ1bmN0aW9uIE5kKGEsYil7aWYoTWR8fG51bGw9PUpkfHxKZCE9PWRhKCkpcmV0dXJuIG51bGw7dmFyIGM9SmQ7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmR2QoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OndpbmRvdy5nZXRTZWxlY3Rpb24/KGM9d2luZG93LmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pOmM9dm9pZCAwO3JldHVybiBMZCYmZWEoTGQsYyk/bnVsbDooTGQ9YyxhPVMuZ2V0UG9vbGVkKElkLnNlbGVjdCxLZCxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PUpkLEFiKGEpLGEpfVxudmFyIE9kPXtldmVudFR5cGVzOklkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPURkKGUpO2Y9UmEub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBrPWZbZ107aWYoIWUuaGFzT3duUHJvcGVydHkoayl8fCFlW2tdKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9yYihiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BGb2N1c1wiOmlmKHZjKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKUpkPWUsS2Q9YixMZD1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6TGQ9S2Q9SmQ9bnVsbDticmVhaztjYXNlIFwidG9wTW91c2VEb3duXCI6TWQ9ITA7YnJlYWs7Y2FzZSBcInRvcENvbnRleHRNZW51XCI6Y2FzZSBcInRvcE1vdXNlVXBcIjpyZXR1cm4gTWQ9ITEsTmQoYyxkKTtjYXNlIFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI6aWYoSGQpYnJlYWs7XG5jYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOnJldHVybiBOZChjLGQpfXJldHVybiBudWxsfX07ZnVuY3Rpb24gUGQoYSxiLGMsZCl7cmV0dXJuIFMuY2FsbCh0aGlzLGEsYixjLGQpfVMuYXVnbWVudENsYXNzKFBkLHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KTtmdW5jdGlvbiBRZChhLGIsYyxkKXtyZXR1cm4gUy5jYWxsKHRoaXMsYSxiLGMsZCl9Uy5hdWdtZW50Q2xhc3MoUWQse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KTtmdW5jdGlvbiBSZChhLGIsYyxkKXtyZXR1cm4gUy5jYWxsKHRoaXMsYSxiLGMsZCl9WWMuYXVnbWVudENsYXNzKFJkLHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtcbmZ1bmN0aW9uIFNkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIFRkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxVZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn07ZnVuY3Rpb24gVmQoYSxiLGMsZCl7cmV0dXJuIFMuY2FsbCh0aGlzLGEsYixjLGQpfVxuWWMuYXVnbWVudENsYXNzKFZkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPVRkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPVNkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9VZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6YWQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP1NkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/U2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KTtmdW5jdGlvbiBXZChhLGIsYyxkKXtyZXR1cm4gUy5jYWxsKHRoaXMsYSxiLGMsZCl9YmQuYXVnbWVudENsYXNzKFdkLHtkYXRhVHJhbnNmZXI6bnVsbH0pO2Z1bmN0aW9uIFhkKGEsYixjLGQpe3JldHVybiBTLmNhbGwodGhpcyxhLGIsYyxkKX1ZYy5hdWdtZW50Q2xhc3MoWGQse3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTphZH0pO2Z1bmN0aW9uIFlkKGEsYixjLGQpe3JldHVybiBTLmNhbGwodGhpcyxhLGIsYyxkKX1TLmF1Z21lbnRDbGFzcyhZZCx7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KTtcbmZ1bmN0aW9uIFpkKGEsYixjLGQpe3JldHVybiBTLmNhbGwodGhpcyxhLGIsYyxkKX1iZC5hdWdtZW50Q2xhc3MoWmQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSk7dmFyICRkPXt9LGFlPXt9O1xuXCJhYm9ydCBhbmltYXRpb25FbmQgYW5pbWF0aW9uSXRlcmF0aW9uIGFuaW1hdGlvblN0YXJ0IGJsdXIgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZG91YmxlQ2xpY2sgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZm9jdXMgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCBzY3JvbGwgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvZ2dsZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaE1vdmUgdG91Y2hTdGFydCB0cmFuc2l0aW9uRW5kIHZvbHVtZUNoYW5nZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXS50b1VwcGVyQ2FzZSgpK1xuYS5zbGljZSgxKSxjPVwib25cIitiO2I9XCJ0b3BcIitiO2M9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmMsY2FwdHVyZWQ6YytcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltiXX07JGRbYV09YzthZVtiXT1jfSk7XG52YXIgYmU9e2V2ZW50VHlwZXM6JGQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hZVthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMD09PVNkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6YT1WZDticmVhaztjYXNlIFwidG9wQmx1clwiOmNhc2UgXCJ0b3BGb2N1c1wiOmE9UmQ7YnJlYWs7Y2FzZSBcInRvcENsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJ0b3BEb3VibGVDbGlja1wiOmNhc2UgXCJ0b3BNb3VzZURvd25cIjpjYXNlIFwidG9wTW91c2VNb3ZlXCI6Y2FzZSBcInRvcE1vdXNlVXBcIjpjYXNlIFwidG9wTW91c2VPdXRcIjpjYXNlIFwidG9wTW91c2VPdmVyXCI6Y2FzZSBcInRvcENvbnRleHRNZW51XCI6YT1iZDticmVhaztjYXNlIFwidG9wRHJhZ1wiOmNhc2UgXCJ0b3BEcmFnRW5kXCI6Y2FzZSBcInRvcERyYWdFbnRlclwiOmNhc2UgXCJ0b3BEcmFnRXhpdFwiOmNhc2UgXCJ0b3BEcmFnTGVhdmVcIjpjYXNlIFwidG9wRHJhZ092ZXJcIjpjYXNlIFwidG9wRHJhZ1N0YXJ0XCI6Y2FzZSBcInRvcERyb3BcIjphPVxuV2Q7YnJlYWs7Y2FzZSBcInRvcFRvdWNoQ2FuY2VsXCI6Y2FzZSBcInRvcFRvdWNoRW5kXCI6Y2FzZSBcInRvcFRvdWNoTW92ZVwiOmNhc2UgXCJ0b3BUb3VjaFN0YXJ0XCI6YT1YZDticmVhaztjYXNlIFwidG9wQW5pbWF0aW9uRW5kXCI6Y2FzZSBcInRvcEFuaW1hdGlvbkl0ZXJhdGlvblwiOmNhc2UgXCJ0b3BBbmltYXRpb25TdGFydFwiOmE9UGQ7YnJlYWs7Y2FzZSBcInRvcFRyYW5zaXRpb25FbmRcIjphPVlkO2JyZWFrO2Nhc2UgXCJ0b3BTY3JvbGxcIjphPVljO2JyZWFrO2Nhc2UgXCJ0b3BXaGVlbFwiOmE9WmQ7YnJlYWs7Y2FzZSBcInRvcENvcHlcIjpjYXNlIFwidG9wQ3V0XCI6Y2FzZSBcInRvcFBhc3RlXCI6YT1RZDticmVhaztkZWZhdWx0OmE9U31iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO0FiKGIpO3JldHVybiBifX07b2Q9ZnVuY3Rpb24oYSxiLGMsZCl7YT1rYihhLGIsYyxkKTtsYihhKTttYighMSl9O2liLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBUYXBFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7XG5WYT10Yi5nZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlO1dhPXRiLmdldEluc3RhbmNlRnJvbU5vZGU7WGE9dGIuZ2V0Tm9kZUZyb21JbnN0YW5jZTtpYi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOmJlLEVudGVyTGVhdmVFdmVudFBsdWdpbjpkZCxDaGFuZ2VFdmVudFBsdWdpbjpYYyxTZWxlY3RFdmVudFBsdWdpbjpPZCxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOmljfSk7dmFyIGNlPVtdLGRlPS0xO2Z1bmN0aW9uIFYoYSl7MD5kZXx8KGEuY3VycmVudD1jZVtkZV0sY2VbZGVdPW51bGwsZGUtLSl9ZnVuY3Rpb24gVyhhLGIpe2RlKys7Y2VbZGVdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn1uZXcgU2V0O3ZhciBlZT17Y3VycmVudDpDfSxYPXtjdXJyZW50OiExfSxmZT1DO2Z1bmN0aW9uIGdlKGEpe3JldHVybiBoZShhKT9mZTplZS5jdXJyZW50fVxuZnVuY3Rpb24gaWUoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBDO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIGhlKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jaGlsZENvbnRleHRUeXBlc31mdW5jdGlvbiBqZShhKXtoZShhKSYmKFYoWCxhKSxWKGVlLGEpKX1cbmZ1bmN0aW9uIGtlKGEsYixjKXtudWxsIT1lZS5jdXJzb3I/RChcIjE2OFwiKTp2b2lkIDA7VyhlZSxiLGEpO1coWCxjLGEpfWZ1bmN0aW9uIGxlKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGUsZD1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBiO2M9Yy5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gYyllIGluIGQ/dm9pZCAwOkQoXCIxMDhcIixmZChhKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIEEoe30sYixjKX1mdW5jdGlvbiBtZShhKXtpZighaGUoYSkpcmV0dXJuITE7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxDO2ZlPWVlLmN1cnJlbnQ7VyhlZSxiLGEpO1coWCxYLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiBuZShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2M/dm9pZCAwOkQoXCIxNjlcIik7aWYoYil7dmFyIGQ9bGUoYSxmZSk7Yy5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1kO1YoWCxhKTtWKGVlLGEpO1coZWUsZCxhKX1lbHNlIFYoWCxhKTtXKFgsYixhKX1cbmZ1bmN0aW9uIFkoYSxiLGMpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yjt0aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzW1wicmV0dXJuXCJdPW51bGw7dGhpcy5pbmRleD0wO3RoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz10aGlzLnBlbmRpbmdQcm9wcz10aGlzLnJlZj1udWxsO3RoaXMuaW50ZXJuYWxDb250ZXh0VGFnPWM7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1cbmZ1bmN0aW9uIG9lKGEsYixjKXt2YXIgZD1hLmFsdGVybmF0ZTtudWxsPT09ZD8oZD1uZXcgWShhLnRhZyxhLmtleSxhLmludGVybmFsQ29udGV4dFRhZyksZC50eXBlPWEudHlwZSxkLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxkLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWQpOihkLmVmZmVjdFRhZz0wLGQubmV4dEVmZmVjdD1udWxsLGQuZmlyc3RFZmZlY3Q9bnVsbCxkLmxhc3RFZmZlY3Q9bnVsbCk7ZC5leHBpcmF0aW9uVGltZT1jO2QucGVuZGluZ1Byb3BzPWI7ZC5jaGlsZD1hLmNoaWxkO2QubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7ZC5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7ZC5zaWJsaW5nPWEuc2libGluZztkLmluZGV4PWEuaW5kZXg7ZC5yZWY9YS5yZWY7cmV0dXJuIGR9XG5mdW5jdGlvbiBwZShhLGIsYyl7dmFyIGQ9dm9pZCAwLGU9YS50eXBlLGY9YS5rZXk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/KGQ9ZS5wcm90b3R5cGUmJmUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ/bmV3IFkoMixmLGIpOm5ldyBZKDAsZixiKSxkLnR5cGU9ZSxkLnBlbmRpbmdQcm9wcz1hLnByb3BzKTpcInN0cmluZ1wiPT09dHlwZW9mIGU/KGQ9bmV3IFkoNSxmLGIpLGQudHlwZT1lLGQucGVuZGluZ1Byb3BzPWEucHJvcHMpOlwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwibnVtYmVyXCI9PT10eXBlb2YgZS50YWc/KGQ9ZSxkLnBlbmRpbmdQcm9wcz1hLnByb3BzKTpEKFwiMTMwXCIsbnVsbD09ZT9lOnR5cGVvZiBlLFwiXCIpO2QuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gZH1mdW5jdGlvbiBxZShhLGIsYyxkKXtiPW5ldyBZKDEwLGQsYik7Yi5wZW5kaW5nUHJvcHM9YTtiLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGJ9XG5mdW5jdGlvbiByZShhLGIsYyl7Yj1uZXcgWSg2LG51bGwsYik7Yi5wZW5kaW5nUHJvcHM9YTtiLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGJ9ZnVuY3Rpb24gc2UoYSxiLGMpe2I9bmV3IFkoNyxhLmtleSxiKTtiLnR5cGU9YS5oYW5kbGVyO2IucGVuZGluZ1Byb3BzPWE7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIHRlKGEsYixjKXthPW5ldyBZKDksbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gdWUoYSxiLGMpe2I9bmV3IFkoNCxhLmtleSxiKTtiLnBlbmRpbmdQcm9wcz1hLmNoaWxkcmVufHxbXTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifXZhciB2ZT1udWxsLHdlPW51bGw7XG5mdW5jdGlvbiB4ZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fWZ1bmN0aW9uIHllKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO3ZlPXhlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTt3ZT14ZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfWZ1bmN0aW9uIHplKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiB2ZSYmdmUoYSl9ZnVuY3Rpb24gQWUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIHdlJiZ3ZShhKX1cbmZ1bmN0aW9uIEJlKGEpe3JldHVybntiYXNlU3RhdGU6YSxleHBpcmF0aW9uVGltZTowLGZpcnN0Om51bGwsbGFzdDpudWxsLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExLGlzSW5pdGlhbGl6ZWQ6ITF9fWZ1bmN0aW9uIENlKGEsYil7bnVsbD09PWEubGFzdD9hLmZpcnN0PWEubGFzdD1iOihhLmxhc3QubmV4dD1iLGEubGFzdD1iKTtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iLmV4cGlyYXRpb25UaW1lKWEuZXhwaXJhdGlvblRpbWU9Yi5leHBpcmF0aW9uVGltZX1cbmZ1bmN0aW9uIERlKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLnVwZGF0ZVF1ZXVlO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPUJlKG51bGwpKTtudWxsIT09Yz8oYT1jLnVwZGF0ZVF1ZXVlLG51bGw9PT1hJiYoYT1jLnVwZGF0ZVF1ZXVlPUJlKG51bGwpKSk6YT1udWxsO2E9YSE9PWQ/YTpudWxsO251bGw9PT1hP0NlKGQsYik6bnVsbD09PWQubGFzdHx8bnVsbD09PWEubGFzdD8oQ2UoZCxiKSxDZShhLGIpKTooQ2UoZCxiKSxhLmxhc3Q9Yil9ZnVuY3Rpb24gRWUoYSxiLGMsZCl7YT1hLnBhcnRpYWxTdGF0ZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoYixjLGQpOmF9XG5mdW5jdGlvbiBMZShhLGIsYyxkLGUsZil7bnVsbCE9PWEmJmEudXBkYXRlUXVldWU9PT1jJiYoYz1iLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6Yy5iYXNlU3RhdGUsZXhwaXJhdGlvblRpbWU6Yy5leHBpcmF0aW9uVGltZSxmaXJzdDpjLmZpcnN0LGxhc3Q6Yy5sYXN0LGlzSW5pdGlhbGl6ZWQ6Yy5pc0luaXRpYWxpemVkLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExfSk7Yy5leHBpcmF0aW9uVGltZT0wO2MuaXNJbml0aWFsaXplZD9hPWMuYmFzZVN0YXRlOihhPWMuYmFzZVN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxjLmlzSW5pdGlhbGl6ZWQ9ITApO2Zvcih2YXIgZz0hMCxrPWMuZmlyc3QsaD0hMTtudWxsIT09azspe3ZhciByPWsuZXhwaXJhdGlvblRpbWU7aWYocj5mKXt2YXIgbj1jLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1ufHxuPnIpYy5leHBpcmF0aW9uVGltZT1yO2h8fChoPSEwLGMuYmFzZVN0YXRlPWEpfWVsc2V7aHx8KGMuZmlyc3Q9ay5uZXh0LG51bGw9PT1cbmMuZmlyc3QmJihjLmxhc3Q9bnVsbCkpO2lmKGsuaXNSZXBsYWNlKWE9RWUoayxkLGEsZSksZz0hMDtlbHNlIGlmKHI9RWUoayxkLGEsZSkpYT1nP0Eoe30sYSxyKTpBKGEsciksZz0hMTtrLmlzRm9yY2VkJiYoYy5oYXNGb3JjZVVwZGF0ZT0hMCk7bnVsbCE9PWsuY2FsbGJhY2smJihyPWMuY2FsbGJhY2tMaXN0LG51bGw9PT1yJiYocj1jLmNhbGxiYWNrTGlzdD1bXSksci5wdXNoKGspKX1rPWsubmV4dH1udWxsIT09Yy5jYWxsYmFja0xpc3Q/Yi5lZmZlY3RUYWd8PTMyOm51bGwhPT1jLmZpcnN0fHxjLmhhc0ZvcmNlVXBkYXRlfHwoYi51cGRhdGVRdWV1ZT1udWxsKTtofHwoYy5iYXNlU3RhdGU9YSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBNZShhLGIpe3ZhciBjPWEuY2FsbGJhY2tMaXN0O2lmKG51bGwhPT1jKWZvcihhLmNhbGxiYWNrTGlzdD1udWxsLGE9MDthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXSxlPWQuY2FsbGJhY2s7ZC5jYWxsYmFjaz1udWxsO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBlP0QoXCIxOTFcIixlKTp2b2lkIDA7ZS5jYWxsKGIpfX1cbmZ1bmN0aW9uIE5lKGEsYixjLGQpe2Z1bmN0aW9uIGUoYSxiKXtiLnVwZGF0ZXI9ZjthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hfXZhciBmPXtpc01vdW50ZWQ6aGQsZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGMsZCxlKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBnPWIoYyk7RGUoYyx7ZXhwaXJhdGlvblRpbWU6ZyxwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxuZXh0Q2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9KTthKGMsZyl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYyxkLGUpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2U9dm9pZCAwPT09ZT9udWxsOmU7dmFyIGY9YihjKTtEZShjLHtleHBpcmF0aW9uVGltZTpmLHBhcnRpYWxTdGF0ZTpkLGNhbGxiYWNrOmUsaXNSZXBsYWNlOiEwLGlzRm9yY2VkOiExLG5leHRDYWxsYmFjazpudWxsLG5leHQ6bnVsbH0pO1xuYShjLGYpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYyxkKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBlPWIoYyk7RGUoYyx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6bnVsbCxjYWxsYmFjazpkLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMCxuZXh0Q2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9KTthKGMsZSl9fTtyZXR1cm57YWRvcHRDbGFzc0luc3RhbmNlOmUsY29uc3RydWN0Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPWdlKGEpLGY9Mj09PWEudGFnJiZudWxsIT1hLnR5cGUuY29udGV4dFR5cGVzLGc9Zj9pZShhLGQpOkM7Yj1uZXcgYyhiLGcpO2UoYSxiKTtmJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZCxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWcpO3JldHVybiBifSxtb3VudENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxcbmIpe3ZhciBjPWEuYWx0ZXJuYXRlLGQ9YS5zdGF0ZU5vZGUsZT1kLnN0YXRlfHxudWxsLGc9YS5wZW5kaW5nUHJvcHM7Zz92b2lkIDA6RChcIjE1OFwiKTt2YXIgaz1nZShhKTtkLnByb3BzPWc7ZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGU9ZTtkLnJlZnM9QztkLmNvbnRleHQ9aWUoYSxrKTtudWxsIT1hLnR5cGUmJm51bGwhPWEudHlwZS5wcm90b3R5cGUmJiEwPT09YS50eXBlLnByb3RvdHlwZS51bnN0YWJsZV9pc0FzeW5jUmVhY3RDb21wb25lbnQmJihhLmludGVybmFsQ29udGV4dFRhZ3w9MSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50JiYoZT1kLnN0YXRlLGQuY29tcG9uZW50V2lsbE1vdW50KCksZSE9PWQuc3RhdGUmJmYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShkLGQuc3RhdGUsbnVsbCksZT1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1lJiYoZC5zdGF0ZT1MZShjLGEsZSxkLGcsYikpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD1cbjQpfSx1cGRhdGVDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYixlKXt2YXIgZz1iLnN0YXRlTm9kZTtnLnByb3BzPWIubWVtb2l6ZWRQcm9wcztnLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTt2YXIgaz1iLm1lbW9pemVkUHJvcHMsaD1iLnBlbmRpbmdQcm9wcztofHwoaD1rLG51bGw9PWg/RChcIjE1OVwiKTp2b2lkIDApO3ZhciB1PWcuY29udGV4dCx4PWdlKGIpO3g9aWUoYix4KTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxrPT09aCYmdT09PXh8fCh1PWcuc3RhdGUsZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGgseCksZy5zdGF0ZSE9PXUmJmYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShnLGcuc3RhdGUsbnVsbCkpO3U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWIudXBkYXRlUXVldWU/TGUoYSxiLGIudXBkYXRlUXVldWUsZyxoLGUpOnU7aWYoIShrIT09aHx8dSE9PWV8fFguY3VycmVudHx8bnVsbCE9PWIudXBkYXRlUXVldWUmJmIudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpKXJldHVyblwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxrPT09YS5tZW1vaXplZFByb3BzJiZ1PT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLCExO3ZhciBGPWg7aWYobnVsbD09PWt8fG51bGwhPT1iLnVwZGF0ZVF1ZXVlJiZiLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKUY9ITA7ZWxzZXt2YXIgTD1iLnN0YXRlTm9kZSxHPWIudHlwZTtGPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBMLnNob3VsZENvbXBvbmVudFVwZGF0ZT9MLnNob3VsZENvbXBvbmVudFVwZGF0ZShGLGUseCk6Ry5wcm90b3R5cGUmJkcucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFlYShrLEYpfHwhZWEodSxlKTohMH1GPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoaCxlLHgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5rPT09YS5tZW1vaXplZFByb3BzJiZ1PT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLGMoYixoKSxkKGIsZSkpO2cucHJvcHM9aDtnLnN0YXRlPWU7Zy5jb250ZXh0PXg7cmV0dXJuIEZ9fX12YXIgT2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdJiZTeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIil8fDYwMTA2O2Z1bmN0aW9uIFBlKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6T2Usa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319dmFyIFFlPUFycmF5LmlzQXJyYXksUmU9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLFNlLFRlLFVlLFZlO1xuXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdPyhTZT1TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpLFRlPVN5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIiksVWU9U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucmV0dXJuXCIpLFZlPVN5bWJvbFtcImZvclwiXShcInJlYWN0LmZyYWdtZW50XCIpKTooU2U9NjAxMDMsVGU9NjAxMDQsVWU9NjAxMDUsVmU9NjAxMDcpO2Z1bmN0aW9uIFdlKGEpe2lmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1SZSYmYVtSZV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFhlKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbCE9PWMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXtpZihiLl9vd25lcil7Yj1iLl9vd25lcjt2YXIgZD12b2lkIDA7YiYmKDIhPT1iLnRhZz9EKFwiMTEwXCIpOnZvaWQgMCxkPWIuc3RhdGVOb2RlKTtkP3ZvaWQgMDpEKFwiMTQ3XCIsYyk7dmFyIGU9XCJcIitjO2lmKG51bGwhPT1hJiZudWxsIT09YS5yZWYmJmEucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBhLnJlZjthPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcz09PUM/ZC5yZWZzPXt9OmQucmVmcztudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2EuX3N0cmluZ1JlZj1lO3JldHVybiBhfVwic3RyaW5nXCIhPT10eXBlb2YgYz9EKFwiMTQ4XCIpOnZvaWQgMDtiLl9vd25lcj92b2lkIDA6RChcIjE0OVwiLGMpfXJldHVybiBjfVxuZnVuY3Rpb24gWWUoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJkQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIFplKGEsYil7ZnVuY3Rpb24gYyhjLGQpe2lmKGIpe2lmKCFhKXtpZihudWxsPT09ZC5hbHRlcm5hdGUpcmV0dXJuO2Q9ZC5hbHRlcm5hdGV9dmFyIHA9Yy5sYXN0RWZmZWN0O251bGwhPT1wPyhwLm5leHRFZmZlY3Q9ZCxjLmxhc3RFZmZlY3Q9ZCk6Yy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9ZDtkLm5leHRFZmZlY3Q9bnVsbDtkLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBkKGEsZCl7aWYoIWIpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYyhhLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGUoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtpZihhKXJldHVybiBiPW9lKGIsYyxkKSxiLmluZGV4PTAsYi5zaWJsaW5nPW51bGwsYjtiLmV4cGlyYXRpb25UaW1lPWQ7Yi5lZmZlY3RUYWc9MDtiLmluZGV4PVxuMDtiLnNpYmxpbmc9bnVsbDtiLnBlbmRpbmdQcm9wcz1jO3JldHVybiBifWZ1bmN0aW9uIGcoYSxjLGQpe2EuaW5kZXg9ZDtpZighYilyZXR1cm4gYztkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhhLmVmZmVjdFRhZz0yLGMpOmQ7YS5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBrKGEpe2ImJm51bGw9PT1hLmFsdGVybmF0ZSYmKGEuZWZmZWN0VGFnPTIpO3JldHVybiBhfWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1yZShjLGEuaW50ZXJuYWxDb250ZXh0VGFnLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZihiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIHIoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIudHlwZT09PWMudHlwZSlyZXR1cm4gZD1mKGIsYy5wcm9wcyxkKSxkLnJlZj1YZShiLGMpLGRbXCJyZXR1cm5cIl09YSxkO2Q9cGUoYyxhLmludGVybmFsQ29udGV4dFRhZyxkKTtcbmQucmVmPVhlKGIsYyk7ZFtcInJldHVyblwiXT1hO3JldHVybiBkfWZ1bmN0aW9uIG4oYSxiLGMsZCl7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1zZShjLGEuaW50ZXJuYWxDb250ZXh0VGFnLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZihiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIHkoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDkhPT1iLnRhZylyZXR1cm4gYj10ZShjLGEuaW50ZXJuYWxDb250ZXh0VGFnLGQpLGIudHlwZT1jLnZhbHVlLGJbXCJyZXR1cm5cIl09YSxiO2I9ZihiLG51bGwsZCk7Yi50eXBlPWMudmFsdWU7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIHUoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPXVlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsXG5kKSxiW1wicmV0dXJuXCJdPWEsYjtiPWYoYixjLmNoaWxkcmVufHxbXSxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24geChhLGIsYyxkLGUpe2lmKG51bGw9PT1ifHwxMCE9PWIudGFnKXJldHVybiBiPXFlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsZCxlKSxiW1wicmV0dXJuXCJdPWEsYjtiPWYoYixjLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBGKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1yZShcIlwiK2IsYS5pbnRlcm5hbENvbnRleHRUYWcsYyksYltcInJldHVyblwiXT1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgU2U6aWYoYi50eXBlPT09VmUpcmV0dXJuIGI9cWUoYi5wcm9wcy5jaGlsZHJlbixhLmludGVybmFsQ29udGV4dFRhZyxjLGIua2V5KSxiW1wicmV0dXJuXCJdPWEsYjtjPXBlKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsYyk7XG5jLnJlZj1YZShudWxsLGIpO2NbXCJyZXR1cm5cIl09YTtyZXR1cm4gYztjYXNlIFRlOnJldHVybiBiPXNlKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsYyksYltcInJldHVyblwiXT1hLGI7Y2FzZSBVZTpyZXR1cm4gYz10ZShiLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMpLGMudHlwZT1iLnZhbHVlLGNbXCJyZXR1cm5cIl09YSxjO2Nhc2UgT2U6cmV0dXJuIGI9dWUoYixhLmludGVybmFsQ29udGV4dFRhZyxjKSxiW1wicmV0dXJuXCJdPWEsYn1pZihRZShiKXx8V2UoYikpcmV0dXJuIGI9cWUoYixhLmludGVybmFsQ29udGV4dFRhZyxjLG51bGwpLGJbXCJyZXR1cm5cIl09YSxiO1llKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBTZTpyZXR1cm4gYy5rZXk9PT1cbmU/Yy50eXBlPT09VmU/eChhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOnIoYSxiLGMsZCk6bnVsbDtjYXNlIFRlOnJldHVybiBjLmtleT09PWU/bihhLGIsYyxkKTpudWxsO2Nhc2UgVWU6cmV0dXJuIG51bGw9PT1lP3koYSxiLGMsZCk6bnVsbDtjYXNlIE9lOnJldHVybiBjLmtleT09PWU/dShhLGIsYyxkKTpudWxsfWlmKFFlKGMpfHxXZShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDp4KGEsYixjLGQsbnVsbCk7WWUoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBHKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFNlOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1WZT94KGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOlxucihiLGEsZCxlKTtjYXNlIFRlOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxuKGIsYSxkLGUpO2Nhc2UgVWU6cmV0dXJuIGE9YS5nZXQoYyl8fG51bGwseShiLGEsZCxlKTtjYXNlIE9lOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCx1KGIsYSxkLGUpfWlmKFFlKGQpfHxXZShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCx4KGIsYSxkLGUsbnVsbCk7WWUoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBUKGEsZix2LGspe2Zvcih2YXIgcD1udWxsLHo9bnVsbCxsPWYsaD1mPTAsdD1udWxsO251bGwhPT1sJiZoPHYubGVuZ3RoO2grKyl7bC5pbmRleD5oPyh0PWwsbD1udWxsKTp0PWwuc2libGluZzt2YXIgdz1MKGEsbCx2W2hdLGspO2lmKG51bGw9PT13KXtudWxsPT09bCYmKGw9dCk7YnJlYWt9YiYmbCYmbnVsbD09PXcuYWx0ZXJuYXRlJiZjKGEsbCk7Zj1nKHcsZixoKTtudWxsPT09ej9wPXc6ei5zaWJsaW5nPXc7ej13O1xubD10fWlmKGg9PT12Lmxlbmd0aClyZXR1cm4gZChhLGwpLHA7aWYobnVsbD09PWwpe2Zvcig7aDx2Lmxlbmd0aDtoKyspaWYobD1GKGEsdltoXSxrKSlmPWcobCxmLGgpLG51bGw9PT16P3A9bDp6LnNpYmxpbmc9bCx6PWw7cmV0dXJuIHB9Zm9yKGw9ZShhLGwpO2g8di5sZW5ndGg7aCsrKWlmKHQ9RyhsLGEsaCx2W2hdLGspKXtpZihiJiZudWxsIT09dC5hbHRlcm5hdGUpbFtcImRlbGV0ZVwiXShudWxsPT09dC5rZXk/aDp0LmtleSk7Zj1nKHQsZixoKTtudWxsPT09ej9wPXQ6ei5zaWJsaW5nPXQ7ej10fWImJmwuZm9yRWFjaChmdW5jdGlvbihiKXtyZXR1cm4gYyhhLGIpfSk7cmV0dXJuIHB9ZnVuY3Rpb24gSShhLGYsdixrKXt2YXIgcD1XZSh2KTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgcD9EKFwiMTUwXCIpOnZvaWQgMDt2PXAuY2FsbCh2KTtudWxsPT12P0QoXCIxNTFcIik6dm9pZCAwO2Zvcih2YXIgaD1wPW51bGwsbD1mLHo9Zj0wLHQ9bnVsbCx3PXYubmV4dCgpO251bGwhPT1sJiYhdy5kb25lO3orKyxcbnc9di5uZXh0KCkpe2wuaW5kZXg+ej8odD1sLGw9bnVsbCk6dD1sLnNpYmxpbmc7dmFyIG49TChhLGwsdy52YWx1ZSxrKTtpZihudWxsPT09bil7bHx8KGw9dCk7YnJlYWt9YiYmbCYmbnVsbD09PW4uYWx0ZXJuYXRlJiZjKGEsbCk7Zj1nKG4sZix6KTtudWxsPT09aD9wPW46aC5zaWJsaW5nPW47aD1uO2w9dH1pZih3LmRvbmUpcmV0dXJuIGQoYSxsKSxwO2lmKG51bGw9PT1sKXtmb3IoOyF3LmRvbmU7eisrLHc9di5uZXh0KCkpdz1GKGEsdy52YWx1ZSxrKSxudWxsIT09dyYmKGY9Zyh3LGYseiksbnVsbD09PWg/cD13Omguc2libGluZz13LGg9dyk7cmV0dXJuIHB9Zm9yKGw9ZShhLGwpOyF3LmRvbmU7eisrLHc9di5uZXh0KCkpaWYodz1HKGwsYSx6LHcudmFsdWUsayksbnVsbCE9PXcpe2lmKGImJm51bGwhPT13LmFsdGVybmF0ZSlsW1wiZGVsZXRlXCJdKG51bGw9PT13LmtleT96Oncua2V5KTtmPWcodyxmLHopO251bGw9PT1oP3A9dzpoLnNpYmxpbmc9dztoPXd9YiYmbC5mb3JFYWNoKGZ1bmN0aW9uKGIpe3JldHVybiBjKGEsXG5iKX0pO3JldHVybiBwfXJldHVybiBmdW5jdGlvbihhLGIsZSxnKXt2YXIgaD1cIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lO2lmKGgpc3dpdGNoKGUuJCR0eXBlb2Ype2Nhc2UgU2U6YTp7dmFyIHY9ZS5rZXk7Zm9yKGg9YjtudWxsIT09aDspe2lmKGgua2V5PT09dilpZigxMD09PWgudGFnP2UudHlwZT09PVZlOmgudHlwZT09PWUudHlwZSl7ZChhLGguc2libGluZyk7Yj1mKGgsZS50eXBlPT09VmU/ZS5wcm9wcy5jaGlsZHJlbjplLnByb3BzLGcpO2IucmVmPVhlKGgsZSk7YltcInJldHVyblwiXT1hO2E9YjticmVhayBhfWVsc2V7ZChhLGgpO2JyZWFrfWVsc2UgYyhhLGgpO2g9aC5zaWJsaW5nfWUudHlwZT09PVZlPyhlPXFlKGUucHJvcHMuY2hpbGRyZW4sYS5pbnRlcm5hbENvbnRleHRUYWcsZyxlLmtleSksZVtcInJldHVyblwiXT1hLGE9ZSk6KGc9cGUoZSxhLmludGVybmFsQ29udGV4dFRhZyxnKSxnLnJlZj1YZShiLGUpLGdbXCJyZXR1cm5cIl09YSxhPWcpfXJldHVybiBrKGEpO1xuY2FzZSBUZTphOntmb3IoaD1lLmtleTtudWxsIT09Yjspe2lmKGIua2V5PT09aClpZig3PT09Yi50YWcpe2QoYSxiLnNpYmxpbmcpO2U9ZihiLGUsZyk7ZVtcInJldHVyblwiXT1hO2E9ZTticmVhayBhfWVsc2V7ZChhLGIpO2JyZWFrfWVsc2UgYyhhLGIpO2I9Yi5zaWJsaW5nfWU9c2UoZSxhLmludGVybmFsQ29udGV4dFRhZyxnKTtlW1wicmV0dXJuXCJdPWE7YT1lfXJldHVybiBrKGEpO2Nhc2UgVWU6YTp7aWYobnVsbCE9PWIpaWYoOT09PWIudGFnKXtkKGEsYi5zaWJsaW5nKTtiPWYoYixudWxsLGcpO2IudHlwZT1lLnZhbHVlO2JbXCJyZXR1cm5cIl09YTthPWI7YnJlYWsgYX1lbHNlIGQoYSxiKTtiPXRlKGUsYS5pbnRlcm5hbENvbnRleHRUYWcsZyk7Yi50eXBlPWUudmFsdWU7YltcInJldHVyblwiXT1hO2E9Yn1yZXR1cm4gayhhKTtjYXNlIE9lOmE6e2ZvcihoPWUua2V5O251bGwhPT1iOyl7aWYoYi5rZXk9PT1oKWlmKDQ9PT1iLnRhZyYmYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWUuY29udGFpbmVySW5mbyYmXG5iLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWUuaW1wbGVtZW50YXRpb24pe2QoYSxiLnNpYmxpbmcpO2U9ZihiLGUuY2hpbGRyZW58fFtdLGcpO2VbXCJyZXR1cm5cIl09YTthPWU7YnJlYWsgYX1lbHNle2QoYSxiKTticmVha31lbHNlIGMoYSxiKTtiPWIuc2libGluZ31lPXVlKGUsYS5pbnRlcm5hbENvbnRleHRUYWcsZyk7ZVtcInJldHVyblwiXT1hO2E9ZX1yZXR1cm4gayhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGV8fFwibnVtYmVyXCI9PT10eXBlb2YgZSlyZXR1cm4gZT1cIlwiK2UsbnVsbCE9PWImJjY9PT1iLnRhZz8oZChhLGIuc2libGluZyksZT1mKGIsZSxnKSk6KGQoYSxiKSxlPXJlKGUsYS5pbnRlcm5hbENvbnRleHRUYWcsZykpLGVbXCJyZXR1cm5cIl09YSxhPWUsayhhKTtpZihRZShlKSlyZXR1cm4gVChhLGIsZSxnKTtpZihXZShlKSlyZXR1cm4gSShhLGIsZSxnKTtoJiZZZShhLGUpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZSlzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDE6ZT1cbmEudHlwZSxEKFwiMTUyXCIsZS5kaXNwbGF5TmFtZXx8ZS5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gZChhLGIpfX12YXIgJGU9WmUoITAsITApLGFmPVplKCExLCEwKSxiZj1aZSghMSwhMSk7XG5mdW5jdGlvbiBjZihhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSxiLGMpe2coYSxiLGMsYi5leHBpcmF0aW9uVGltZSl9ZnVuY3Rpb24gZyhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP2JmKGIsYi5jaGlsZCxjLGQpOmEuY2hpbGQ9PT1iLmNoaWxkPyRlKGIsYi5jaGlsZCxjLGQpOmFmKGIsYi5jaGlsZCxjLGQpfWZ1bmN0aW9uIGsoYSxiKXt2YXIgYz1iLnJlZjtudWxsPT09Y3x8YSYmYS5yZWY9PT1jfHwoYi5lZmZlY3RUYWd8PTEyOCl9ZnVuY3Rpb24gaChhLGIsYyxkKXtrKGEsYik7aWYoIWMpcmV0dXJuIGQmJm5lKGIsITEpLG4oYSxiKTtjPWIuc3RhdGVOb2RlO2VkLmN1cnJlbnQ9Yjt2YXIgZT1jLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO2YoYSxiLGUpO2IubWVtb2l6ZWRTdGF0ZT1jLnN0YXRlO2IubWVtb2l6ZWRQcm9wcz1jLnByb3BzO2QmJm5lKGIsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHIoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9rZShhLFxuYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJmtlKGEsYi5jb250ZXh0LCExKTtHKGEsYi5jb250YWluZXJJbmZvKX1mdW5jdGlvbiBuKGEsYil7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP0QoXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7dmFyIGM9b2UoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGNbXCJyZXR1cm5cIl09YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1vZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGNbXCJyZXR1cm5cIl09YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiB5KGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDM6cihiKTticmVhaztjYXNlIDI6bWUoYik7YnJlYWs7Y2FzZSA0OkcoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKX1yZXR1cm4gbnVsbH12YXIgdT1cbmEuc2hvdWxkU2V0VGV4dENvbnRlbnQseD1hLnVzZVN5bmNTY2hlZHVsaW5nLEY9YS5zaG91bGREZXByaW9yaXRpemVTdWJ0cmVlLEw9Yi5wdXNoSG9zdENvbnRleHQsRz1iLnB1c2hIb3N0Q29udGFpbmVyLFQ9Yy5lbnRlckh5ZHJhdGlvblN0YXRlLEk9Yy5yZXNldEh5ZHJhdGlvblN0YXRlLHo9Yy50cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTthPU5lKGQsZSxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRQcm9wcz1ifSxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRTdGF0ZT1ifSk7dmFyIHA9YS5hZG9wdENsYXNzSW5zdGFuY2Usdj1hLmNvbnN0cnVjdENsYXNzSW5zdGFuY2UsdD1hLm1vdW50Q2xhc3NJbnN0YW5jZSxLYj1hLnVwZGF0ZUNsYXNzSW5zdGFuY2U7cmV0dXJue2JlZ2luV29yazpmdW5jdGlvbihhLGIsYyl7aWYoMD09PWIuZXhwaXJhdGlvblRpbWV8fGIuZXhwaXJhdGlvblRpbWU+YylyZXR1cm4geShhLGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAwOm51bGwhPT1hP1xuRChcIjE1NVwiKTp2b2lkIDA7dmFyIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZz1nZShiKTtnPWllKGIsZyk7ZD1kKGUsZyk7Yi5lZmZlY3RUYWd8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQucmVuZGVyPyhiLnRhZz0yLGU9bWUoYikscChiLGQpLHQoYixjKSxiPWgoYSxiLCEwLGUpKTooYi50YWc9MSxmKGEsYixkKSxiLm1lbW9pemVkUHJvcHM9ZSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgMTphOntlPWIudHlwZTtjPWIucGVuZGluZ1Byb3BzO2Q9Yi5tZW1vaXplZFByb3BzO2lmKFguY3VycmVudCludWxsPT09YyYmKGM9ZCk7ZWxzZSBpZihudWxsPT09Y3x8ZD09PWMpe2I9bihhLGIpO2JyZWFrIGF9ZD1nZShiKTtkPWllKGIsZCk7ZT1lKGMsZCk7Yi5lZmZlY3RUYWd8PTE7ZihhLGIsZSk7Yi5tZW1vaXplZFByb3BzPWM7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgMjpyZXR1cm4gZT1tZShiKSxkPXZvaWQgMCxudWxsPT09XG5hP2Iuc3RhdGVOb2RlP0QoXCIxNTNcIik6KHYoYixiLnBlbmRpbmdQcm9wcyksdChiLGMpLGQ9ITApOmQ9S2IoYSxiLGMpLGgoYSxiLGQsZSk7Y2FzZSAzOnJldHVybiByKGIpLGU9Yi51cGRhdGVRdWV1ZSxudWxsIT09ZT8oZD1iLm1lbW9pemVkU3RhdGUsZT1MZShhLGIsZSxudWxsLG51bGwsYyksZD09PWU/KEkoKSxiPW4oYSxiKSk6KGQ9ZS5lbGVtZW50LGc9Yi5zdGF0ZU5vZGUsKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmcuaHlkcmF0ZSYmVChiKT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1iZihiLGIuY2hpbGQsZCxjKSk6KEkoKSxmKGEsYixkKSksYi5tZW1vaXplZFN0YXRlPWUsYj1iLmNoaWxkKSk6KEkoKSxiPW4oYSxiKSksYjtjYXNlIDU6TChiKTtudWxsPT09YSYmeihiKTtlPWIudHlwZTt2YXIgbD1iLm1lbW9pemVkUHJvcHM7ZD1iLnBlbmRpbmdQcm9wcztudWxsPT09ZCYmKGQ9bCxudWxsPT09ZD9EKFwiMTU0XCIpOnZvaWQgMCk7Zz1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6XG5udWxsO1guY3VycmVudHx8bnVsbCE9PWQmJmwhPT1kPyhsPWQuY2hpbGRyZW4sdShlLGQpP2w9bnVsbDpnJiZ1KGUsZykmJihiLmVmZmVjdFRhZ3w9MTYpLGsoYSxiKSwyMTQ3NDgzNjQ3IT09YyYmIXgmJkYoZSxkKT8oYi5leHBpcmF0aW9uVGltZT0yMTQ3NDgzNjQ3LGI9bnVsbCk6KGYoYSxiLGwpLGIubWVtb2l6ZWRQcm9wcz1kLGI9Yi5jaGlsZCkpOmI9bihhLGIpO3JldHVybiBiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJnooYiksYT1iLnBlbmRpbmdQcm9wcyxudWxsPT09YSYmKGE9Yi5tZW1vaXplZFByb3BzKSxiLm1lbW9pemVkUHJvcHM9YSxudWxsO2Nhc2UgODpiLnRhZz03O2Nhc2UgNzplPWIucGVuZGluZ1Byb3BzO2lmKFguY3VycmVudCludWxsPT09ZSYmKGU9YSYmYS5tZW1vaXplZFByb3BzLG51bGw9PT1lP0QoXCIxNTRcIik6dm9pZCAwKTtlbHNlIGlmKG51bGw9PT1lfHxiLm1lbW9pemVkUHJvcHM9PT1lKWU9Yi5tZW1vaXplZFByb3BzO2Q9ZS5jaGlsZHJlbjtiLnN0YXRlTm9kZT1cbm51bGw9PT1hP2JmKGIsYi5zdGF0ZU5vZGUsZCxjKTphLmNoaWxkPT09Yi5jaGlsZD8kZShiLGIuc3RhdGVOb2RlLGQsYyk6YWYoYixiLnN0YXRlTm9kZSxkLGMpO2IubWVtb2l6ZWRQcm9wcz1lO3JldHVybiBiLnN0YXRlTm9kZTtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSA0OmE6e0coYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtlPWIucGVuZGluZ1Byb3BzO2lmKFguY3VycmVudCludWxsPT09ZSYmKGU9YSYmYS5tZW1vaXplZFByb3BzLG51bGw9PWU/RChcIjE1NFwiKTp2b2lkIDApO2Vsc2UgaWYobnVsbD09PWV8fGIubWVtb2l6ZWRQcm9wcz09PWUpe2I9bihhLGIpO2JyZWFrIGF9bnVsbD09PWE/Yi5jaGlsZD1hZihiLGIuY2hpbGQsZSxjKTpmKGEsYixlKTtiLm1lbW9pemVkUHJvcHM9ZTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSAxMDphOntjPWIucGVuZGluZ1Byb3BzO2lmKFguY3VycmVudCludWxsPT09YyYmKGM9Yi5tZW1vaXplZFByb3BzKTtlbHNlIGlmKG51bGw9PT1jfHxcbmIubWVtb2l6ZWRQcm9wcz09PWMpe2I9bihhLGIpO2JyZWFrIGF9ZihhLGIsYyk7Yi5tZW1vaXplZFByb3BzPWM7Yj1iLmNoaWxkfXJldHVybiBiO2RlZmF1bHQ6RChcIjE1NlwiKX19LGJlZ2luRmFpbGVkV29yazpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIudGFnKXtjYXNlIDI6bWUoYik7YnJlYWs7Y2FzZSAzOnIoYik7YnJlYWs7ZGVmYXVsdDpEKFwiMTU3XCIpfWIuZWZmZWN0VGFnfD02NDtudWxsPT09YT9iLmNoaWxkPW51bGw6Yi5jaGlsZCE9PWEuY2hpbGQmJihiLmNoaWxkPWEuY2hpbGQpO2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpcmV0dXJuIHkoYSxiKTtiLmZpcnN0RWZmZWN0PW51bGw7Yi5sYXN0RWZmZWN0PW51bGw7ZyhhLGIsbnVsbCxjKTsyPT09Yi50YWcmJihhPWIuc3RhdGVOb2RlLGIubWVtb2l6ZWRQcm9wcz1hLnByb3BzLGIubWVtb2l6ZWRTdGF0ZT1hLnN0YXRlKTtyZXR1cm4gYi5jaGlsZH19fVxuZnVuY3Rpb24gZGYoYSxiLGMpe2Z1bmN0aW9uIGQoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGU9YS5jcmVhdGVJbnN0YW5jZSxmPWEuY3JlYXRlVGV4dEluc3RhbmNlLGc9YS5hcHBlbmRJbml0aWFsQ2hpbGQsaz1hLmZpbmFsaXplSW5pdGlhbENoaWxkcmVuLGg9YS5wcmVwYXJlVXBkYXRlLHI9YS5wZXJzaXN0ZW5jZSxuPWIuZ2V0Um9vdEhvc3RDb250YWluZXIseT1iLnBvcEhvc3RDb250ZXh0LHU9Yi5nZXRIb3N0Q29udGV4dCx4PWIucG9wSG9zdENvbnRhaW5lcixGPWMucHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSxMPWMucHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UsRz1jLnBvcEh5ZHJhdGlvblN0YXRlLFQ9dm9pZCAwLEk9dm9pZCAwLHo9dm9pZCAwO2EubXV0YXRpb24/KFQ9ZnVuY3Rpb24oKXt9LEk9ZnVuY3Rpb24oYSxiLGMpeyhiLnVwZGF0ZVF1ZXVlPWMpJiZkKGIpfSx6PWZ1bmN0aW9uKGEsYixjLGUpe2MhPT1lJiZkKGIpfSk6cj9EKFwiMjM1XCIpOkQoXCIyMzZcIik7XG5yZXR1cm57Y29tcGxldGVXb3JrOmZ1bmN0aW9uKGEsYixjKXt2YXIgcD1iLnBlbmRpbmdQcm9wcztpZihudWxsPT09cClwPWIubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDIxNDc0ODM2NDchPT1iLmV4cGlyYXRpb25UaW1lfHwyMTQ3NDgzNjQ3PT09YyliLnBlbmRpbmdQcm9wcz1udWxsO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBudWxsO2Nhc2UgMjpyZXR1cm4gamUoYiksbnVsbDtjYXNlIDM6eChiKTtWKFgsYik7VihlZSxiKTtwPWIuc3RhdGVOb2RlO3AucGVuZGluZ0NvbnRleHQmJihwLmNvbnRleHQ9cC5wZW5kaW5nQ29udGV4dCxwLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClHKGIpLGIuZWZmZWN0VGFnJj0tMztUKGIpO3JldHVybiBudWxsO2Nhc2UgNTp5KGIpO2M9bigpO3ZhciB2PWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBsPWEubWVtb2l6ZWRQcm9wcyx0PWIuc3RhdGVOb2RlLHI9dSgpO3Q9XG5oKHQsdixsLHAsYyxyKTtJKGEsYix0LHYsbCxwLGMpO2EucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNle2lmKCFwKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXUoKTtpZihHKGIpKUYoYixjLGEpJiZkKGIpO2Vsc2V7YT1lKHYscCxjLGEsYik7YTpmb3IobD1iLmNoaWxkO251bGwhPT1sOyl7aWYoNT09PWwudGFnfHw2PT09bC50YWcpZyhhLGwuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1sLnRhZyYmbnVsbCE9PWwuY2hpbGQpe2wuY2hpbGRbXCJyZXR1cm5cIl09bDtsPWwuY2hpbGQ7Y29udGludWV9aWYobD09PWIpYnJlYWs7Zm9yKDtudWxsPT09bC5zaWJsaW5nOyl7aWYobnVsbD09PWxbXCJyZXR1cm5cIl18fGxbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7bD1sW1wicmV0dXJuXCJdfWwuc2libGluZ1tcInJldHVyblwiXT1sW1wicmV0dXJuXCJdO2w9bC5zaWJsaW5nfWsoYSx2LHAsYykmJmQoYik7Yi5zdGF0ZU5vZGU9YX1udWxsIT09Yi5yZWYmJlxuKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSl6KGEsYixhLm1lbW9pemVkUHJvcHMscCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIHApcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9bigpO2M9dSgpO0coYik/TChiKSYmZChiKTpiLnN0YXRlTm9kZT1mKHAsYSxjLGIpfXJldHVybiBudWxsO2Nhc2UgNzoocD1iLm1lbW9pemVkUHJvcHMpP3ZvaWQgMDpEKFwiMTY1XCIpO2IudGFnPTg7dj1bXTthOmZvcigobD1iLnN0YXRlTm9kZSkmJihsW1wicmV0dXJuXCJdPWIpO251bGwhPT1sOyl7aWYoNT09PWwudGFnfHw2PT09bC50YWd8fDQ9PT1sLnRhZylEKFwiMjQ3XCIpO2Vsc2UgaWYoOT09PWwudGFnKXYucHVzaChsLnR5cGUpO2Vsc2UgaWYobnVsbCE9PWwuY2hpbGQpe2wuY2hpbGRbXCJyZXR1cm5cIl09bDtsPWwuY2hpbGQ7Y29udGludWV9Zm9yKDtudWxsPT09bC5zaWJsaW5nOyl7aWYobnVsbD09PVxubFtcInJldHVyblwiXXx8bFtcInJldHVyblwiXT09PWIpYnJlYWsgYTtsPWxbXCJyZXR1cm5cIl19bC5zaWJsaW5nW1wicmV0dXJuXCJdPWxbXCJyZXR1cm5cIl07bD1sLnNpYmxpbmd9bD1wLmhhbmRsZXI7cD1sKHAucHJvcHMsdik7Yi5jaGlsZD0kZShiLG51bGwhPT1hP2EuY2hpbGQ6bnVsbCxwLGMpO3JldHVybiBiLmNoaWxkO2Nhc2UgODpyZXR1cm4gYi50YWc9NyxudWxsO2Nhc2UgOTpyZXR1cm4gbnVsbDtjYXNlIDEwOnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4geChiKSxUKGIpLG51bGw7Y2FzZSAwOkQoXCIxNjdcIik7ZGVmYXVsdDpEKFwiMTU2XCIpfX19fVxuZnVuY3Rpb24gZWYoYSxiKXtmdW5jdGlvbiBjKGEpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKXRyeXtjKG51bGwpfWNhdGNoKHYpe2IoYSx2KX19ZnVuY3Rpb24gZChhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQWUmJkFlKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAyOmMoYSk7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2QucHJvcHM9YS5tZW1vaXplZFByb3BzLGQuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGQuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh2KXtiKGEsdil9YnJlYWs7Y2FzZSA1OmMoYSk7YnJlYWs7Y2FzZSA3OmUoYS5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgNDpoJiZnKGEpfX1mdW5jdGlvbiBlKGEpe2Zvcih2YXIgYj1hOzspaWYoZChiKSxudWxsPT09Yi5jaGlsZHx8aCYmND09PWIudGFnKXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8XG5iW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfWVsc2UgYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZH1mdW5jdGlvbiBmKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfWZ1bmN0aW9uIGcoYSl7Zm9yKHZhciBiPWEsYz0hMSxmPXZvaWQgMCxnPXZvaWQgMDs7KXtpZighYyl7Yz1iW1wicmV0dXJuXCJdO2E6Zm9yKDs7KXtudWxsPT09Yz9EKFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpmPWMuc3RhdGVOb2RlO2c9ITE7YnJlYWsgYTtjYXNlIDM6Zj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYTtjYXNlIDQ6Zj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyllKGIpLGc/SShmLGIuc3RhdGVOb2RlKTpUKGYsYi5zdGF0ZU5vZGUpO1xuZWxzZSBpZig0PT09Yi50YWc/Zj1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOmQoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGRbXCJyZXR1cm5cIl09YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl07ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXZhciBrPWEuZ2V0UHVibGljSW5zdGFuY2UsaD1hLm11dGF0aW9uO2E9YS5wZXJzaXN0ZW5jZTtofHwoYT9EKFwiMjM1XCIpOkQoXCIyMzZcIikpO3ZhciByPWguY29tbWl0TW91bnQsbj1oLmNvbW1pdFVwZGF0ZSx5PWgucmVzZXRUZXh0Q29udGVudCx1PWguY29tbWl0VGV4dFVwZGF0ZSx4PWguYXBwZW5kQ2hpbGQsRj1oLmFwcGVuZENoaWxkVG9Db250YWluZXIsTD1oLmluc2VydEJlZm9yZSxHPWguaW5zZXJ0SW5Db250YWluZXJCZWZvcmUsXG5UPWgucmVtb3ZlQ2hpbGQsST1oLnJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjtyZXR1cm57Y29tbWl0UmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXt5KGEuc3RhdGVOb2RlKX0sY29tbWl0UGxhY2VtZW50OmZ1bmN0aW9uKGEpe2E6e2Zvcih2YXIgYj1hW1wicmV0dXJuXCJdO251bGwhPT1iOyl7aWYoZihiKSl7dmFyIGM9YjticmVhayBhfWI9YltcInJldHVyblwiXX1EKFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6RChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKHkoYiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWNbXCJyZXR1cm5cIl18fGYoY1tcInJldHVyblwiXSkpe2M9XG5udWxsO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWMuc2libGluZ1tcInJldHVyblwiXT1jW1wicmV0dXJuXCJdO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkW1wicmV0dXJuXCJdPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpYz9kP0coYixlLnN0YXRlTm9kZSxjKTpMKGIsZS5zdGF0ZU5vZGUsYyk6ZD9GKGIsZS5zdGF0ZU5vZGUpOngoYixlLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkW1wicmV0dXJuXCJdPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lW1wicmV0dXJuXCJdfHxlW1wicmV0dXJuXCJdPT09XG5hKXJldHVybjtlPWVbXCJyZXR1cm5cIl19ZS5zaWJsaW5nW1wicmV0dXJuXCJdPWVbXCJyZXR1cm5cIl07ZT1lLnNpYmxpbmd9fSxjb21taXREZWxldGlvbjpmdW5jdGlvbihhKXtnKGEpO2FbXCJyZXR1cm5cIl09bnVsbDthLmNoaWxkPW51bGw7YS5hbHRlcm5hdGUmJihhLmFsdGVybmF0ZS5jaGlsZD1udWxsLGEuYWx0ZXJuYXRlW1wicmV0dXJuXCJdPW51bGwpfSxjb21taXRXb3JrOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZuKGMsZixlLGEsZCxiKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjJcIik6dm9pZCAwO2M9Yi5tZW1vaXplZFByb3BzO3UoYi5zdGF0ZU5vZGUsbnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOlxuYyxjKTticmVhaztjYXNlIDM6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0TGlmZUN5Y2xlczpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOnZhciBjPWIuc3RhdGVOb2RlO2lmKGIuZWZmZWN0VGFnJjQpaWYobnVsbD09PWEpYy5wcm9wcz1iLm1lbW9pemVkUHJvcHMsYy5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsYy5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9YS5tZW1vaXplZFByb3BzO2E9YS5tZW1vaXplZFN0YXRlO2MucHJvcHM9Yi5tZW1vaXplZFByb3BzO2Muc3RhdGU9Yi5tZW1vaXplZFN0YXRlO2MuY29tcG9uZW50RGlkVXBkYXRlKGQsYSl9Yj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZNZShiLGMpO2JyZWFrO2Nhc2UgMzpjPWIudXBkYXRlUXVldWU7bnVsbCE9PWMmJk1lKGMsbnVsbCE9PWIuY2hpbGQ/Yi5jaGlsZC5zdGF0ZU5vZGU6bnVsbCk7YnJlYWs7Y2FzZSA1OmM9Yi5zdGF0ZU5vZGU7bnVsbD09PWEmJmIuZWZmZWN0VGFnJjQmJnIoYyxcbmIudHlwZSxiLm1lbW9pemVkUHJvcHMsYik7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRBdHRhY2hSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmIoayhjKSk7YnJlYWs7ZGVmYXVsdDpiKGMpfX19LGNvbW1pdERldGFjaFJlZjpmdW5jdGlvbihhKXthPWEucmVmO251bGwhPT1hJiZhKG51bGwpfX19dmFyIGZmPXt9O1xuZnVuY3Rpb24gZ2YoYSl7ZnVuY3Rpb24gYihhKXthPT09ZmY/RChcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9dmFyIGM9YS5nZXRDaGlsZEhvc3RDb250ZXh0LGQ9YS5nZXRSb290SG9zdENvbnRleHQsZT17Y3VycmVudDpmZn0sZj17Y3VycmVudDpmZn0sZz17Y3VycmVudDpmZn07cmV0dXJue2dldEhvc3RDb250ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGIoZS5jdXJyZW50KX0sZ2V0Um9vdEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtyZXR1cm4gYihnLmN1cnJlbnQpfSxwb3BIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEpe1YoZSxhKTtWKGYsYSk7VihnLGEpfSxwb3BIb3N0Q29udGV4dDpmdW5jdGlvbihhKXtmLmN1cnJlbnQ9PT1hJiYoVihlLGEpLFYoZixhKSl9LHB1c2hIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEsYil7VyhnLGIsYSk7Yj1kKGIpO1coZixhLGEpO1coZSxiLGEpfSxwdXNoSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGQ9YihnLmN1cnJlbnQpLGs9YihlLmN1cnJlbnQpO1xuZD1jKGssYS50eXBlLGQpO2shPT1kJiYoVyhmLGEsYSksVyhlLGQsYSkpfSxyZXNldEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtlLmN1cnJlbnQ9ZmY7Zy5jdXJyZW50PWZmfX19XG5mdW5jdGlvbiBoZihhKXtmdW5jdGlvbiBiKGEsYil7dmFyIGM9bmV3IFkoNSxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2NbXCJyZXR1cm5cIl09YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gYyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBiPWYoYixhLnR5cGUsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9ZyhiLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZChhKXtmb3IoYT1hW1wicmV0dXJuXCJdO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hW1wicmV0dXJuXCJdO3k9YX12YXIgZT1hLnNob3VsZFNldFRleHRDb250ZW50O1xuYT1hLmh5ZHJhdGlvbjtpZighYSlyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7fSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbigpe0QoXCIxNzVcIil9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7RChcIjE3NlwiKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX19O3ZhciBmPWEuY2FuSHlkcmF0ZUluc3RhbmNlLGc9YS5jYW5IeWRyYXRlVGV4dEluc3RhbmNlLGs9YS5nZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcsaD1hLmdldEZpcnN0SHlkcmF0YWJsZUNoaWxkLHI9YS5oeWRyYXRlSW5zdGFuY2Usbj1hLmh5ZHJhdGVUZXh0SW5zdGFuY2UseT1udWxsLHU9bnVsbCx4PSExO3JldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe3U9XG5oKGEuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3k9YTtyZXR1cm4geD0hMH0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3U9eT1udWxsO3g9ITF9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKGEpe2lmKHgpe3ZhciBkPXU7aWYoZCl7aWYoIWMoYSxkKSl7ZD1rKGQpO2lmKCFkfHwhYyhhLGQpKXthLmVmZmVjdFRhZ3w9Mjt4PSExO3k9YTtyZXR1cm59Yih5LHUpfXk9YTt1PWgoZCl9ZWxzZSBhLmVmZmVjdFRhZ3w9Mix4PSExLHk9YX19LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2I9cihhLnN0YXRlTm9kZSxhLnR5cGUsYS5tZW1vaXplZFByb3BzLGIsYyxhKTthLnVwZGF0ZVF1ZXVlPWI7cmV0dXJuIG51bGwhPT1iPyEwOiExfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gbihhLnN0YXRlTm9kZSxhLm1lbW9pemVkUHJvcHMsYSl9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe2lmKGEhPT1cbnkpcmV0dXJuITE7aWYoIXgpcmV0dXJuIGQoYSkseD0hMCwhMTt2YXIgYz1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWMmJlwiYm9keVwiIT09YyYmIWUoYyxhLm1lbW9pemVkUHJvcHMpKWZvcihjPXU7YzspYihhLGMpLGM9ayhjKTtkKGEpO3U9eT9rKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfX19XG5mdW5jdGlvbiBqZihhKXtmdW5jdGlvbiBiKGEpe0xiPW1hPSEwO3ZhciBiPWEuc3RhdGVOb2RlO2IuY3VycmVudD09PWE/RChcIjE3N1wiKTp2b2lkIDA7Yi5pc1JlYWR5Rm9yQ29tbWl0PSExO2VkLmN1cnJlbnQ9bnVsbDtpZigxPGEuZWZmZWN0VGFnKWlmKG51bGwhPT1hLmxhc3RFZmZlY3Qpe2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE7dmFyIGM9YS5maXJzdEVmZmVjdH1lbHNlIGM9YTtlbHNlIGM9YS5maXJzdEVmZmVjdDt2ZygpO2ZvcihxPWM7bnVsbCE9PXE7KXt2YXIgZD0hMSxlPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09cTspe3ZhciBmPXEuZWZmZWN0VGFnO2YmMTYmJndnKHEpO2lmKGYmMTI4KXt2YXIgZz1xLmFsdGVybmF0ZTtudWxsIT09ZyYmeGcoZyl9c3dpdGNoKGYmLTI0Mil7Y2FzZSAyOkhlKHEpO3EuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6SGUocSk7cS5lZmZlY3RUYWcmPS0zO0llKHEuYWx0ZXJuYXRlLHEpO2JyZWFrO2Nhc2UgNDpJZShxLmFsdGVybmF0ZSxcbnEpO2JyZWFrO2Nhc2UgODpMYz0hMCx5ZyhxKSxMYz0hMX1xPXEubmV4dEVmZmVjdH19Y2F0Y2goTWMpe2Q9ITAsZT1NY31kJiYobnVsbD09PXE/RChcIjE3OFwiKTp2b2lkIDAsayhxLGUpLG51bGwhPT1xJiYocT1xLm5leHRFZmZlY3QpKX16ZygpO2IuY3VycmVudD1hO2ZvcihxPWM7bnVsbCE9PXE7KXtjPSExO2Q9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1xOyl7dmFyIGg9cS5lZmZlY3RUYWc7aCYzNiYmQWcocS5hbHRlcm5hdGUscSk7aCYxMjgmJkJnKHEpO2lmKGgmNjQpc3dpdGNoKGU9cSxmPXZvaWQgMCxudWxsIT09UCYmKGY9UC5nZXQoZSksUFtcImRlbGV0ZVwiXShlKSxudWxsPT1mJiZudWxsIT09ZS5hbHRlcm5hdGUmJihlPWUuYWx0ZXJuYXRlLGY9UC5nZXQoZSksUFtcImRlbGV0ZVwiXShlKSkpLG51bGw9PWY/RChcIjE4NFwiKTp2b2lkIDAsZS50YWcpe2Nhc2UgMjplLnN0YXRlTm9kZS5jb21wb25lbnREaWRDYXRjaChmLmVycm9yLHtjb21wb25lbnRTdGFjazpmLmNvbXBvbmVudFN0YWNrfSk7XG5icmVhaztjYXNlIDM6bnVsbD09PWJhJiYoYmE9Zi5lcnJvcik7YnJlYWs7ZGVmYXVsdDpEKFwiMTU3XCIpfXZhciBGYT1xLm5leHRFZmZlY3Q7cS5uZXh0RWZmZWN0PW51bGw7cT1GYX19Y2F0Y2goTWMpe2M9ITAsZD1NY31jJiYobnVsbD09PXE/RChcIjE3OFwiKTp2b2lkIDAsayhxLGQpLG51bGwhPT1xJiYocT1xLm5leHRFZmZlY3QpKX1tYT1MYj0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgemUmJnplKGEuc3RhdGVOb2RlKTtmYSYmKGZhLmZvckVhY2goRiksZmE9bnVsbCk7bnVsbCE9PWJhJiYoYT1iYSxiYT1udWxsLHYoYSkpO2I9Yi5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzA9PT1iJiYobmE9UD1udWxsKTtyZXR1cm4gYn1mdW5jdGlvbiBjKGEpe2Zvcig7Oyl7dmFyIGI9b2coYS5hbHRlcm5hdGUsYSxKKSxjPWFbXCJyZXR1cm5cIl0sZD1hLnNpYmxpbmc7dmFyIGU9YTtpZigyMTQ3NDgzNjQ3PT09Snx8MjE0NzQ4MzY0NyE9PWUuZXhwaXJhdGlvblRpbWUpe2lmKDIhPT1lLnRhZyYmMyE9PVxuZS50YWcpdmFyIGY9MDtlbHNlIGY9ZS51cGRhdGVRdWV1ZSxmPW51bGw9PT1mPzA6Zi5leHBpcmF0aW9uVGltZTtmb3IodmFyIGc9ZS5jaGlsZDtudWxsIT09ZzspMCE9PWcuZXhwaXJhdGlvblRpbWUmJigwPT09Znx8Zj5nLmV4cGlyYXRpb25UaW1lKSYmKGY9Zy5leHBpcmF0aW9uVGltZSksZz1nLnNpYmxpbmc7ZS5leHBpcmF0aW9uVGltZT1mfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1jJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKTtpZihudWxsIT09ZClyZXR1cm4gZDtcbmlmKG51bGwhPT1jKWE9YztlbHNle2Euc3RhdGVOb2RlLmlzUmVhZHlGb3JDb21taXQ9ITA7YnJlYWt9fXJldHVybiBudWxsfWZ1bmN0aW9uIGQoYSl7dmFyIGI9dyhhLmFsdGVybmF0ZSxhLEopO251bGw9PT1iJiYoYj1jKGEpKTtlZC5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZShhKXt2YXIgYj1uZyhhLmFsdGVybmF0ZSxhLEopO251bGw9PT1iJiYoYj1jKGEpKTtlZC5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZihhKXtpZihudWxsIT09UCl7aWYoISgwPT09Snx8Sj5hKSlpZihKPD1OYylmb3IoO251bGwhPT1FOylFPWgoRSk/ZShFKTpkKEUpO2Vsc2UgZm9yKDtudWxsIT09RSYmIXAoKTspRT1oKEUpP2UoRSk6ZChFKX1lbHNlIGlmKCEoMD09PUp8fEo+YSkpaWYoSjw9TmMpZm9yKDtudWxsIT09RTspRT1kKEUpO2Vsc2UgZm9yKDtudWxsIT09RSYmIXAoKTspRT1kKEUpfWZ1bmN0aW9uIGcoYSxiKXttYT9EKFwiMjQzXCIpOnZvaWQgMDttYT0hMDthLmlzUmVhZHlGb3JDb21taXQ9XG4hMTtpZihhIT09ZWJ8fGIhPT1KfHxudWxsPT09RSl7Zm9yKDstMTxkZTspY2VbZGVdPW51bGwsZGUtLTtmZT1DO2VlLmN1cnJlbnQ9QztYLmN1cnJlbnQ9ITE7bWcoKTtlYj1hO0o9YjtFPW9lKGViLmN1cnJlbnQsbnVsbCxiKX12YXIgYz0hMSxkPW51bGw7dHJ5e2YoYil9Y2F0Y2goS2Mpe2M9ITAsZD1LY31mb3IoO2M7KXtpZihmYil7YmE9ZDticmVha312YXIgZz1FO2lmKG51bGw9PT1nKWZiPSEwO2Vsc2V7dmFyIGg9ayhnLGQpO251bGw9PT1oP0QoXCIxODNcIik6dm9pZCAwO2lmKCFmYil7dHJ5e2M9aDtkPWI7Zm9yKGg9YztudWxsIT09Zzspe3N3aXRjaChnLnRhZyl7Y2FzZSAyOmplKGcpO2JyZWFrO2Nhc2UgNTpsKGcpO2JyZWFrO2Nhc2UgMzpGZShnKTticmVhaztjYXNlIDQ6RmUoZyl9aWYoZz09PWh8fGcuYWx0ZXJuYXRlPT09aClicmVhaztnPWdbXCJyZXR1cm5cIl19RT1lKGMpO2YoZCl9Y2F0Y2goS2Mpe2M9ITA7ZD1LYztjb250aW51ZX1icmVha319fWI9YmE7ZmI9bWE9ITE7XG5iYT1udWxsO251bGwhPT1iJiZ2KGIpO3JldHVybiBhLmlzUmVhZHlGb3JDb21taXQ/YS5jdXJyZW50LmFsdGVybmF0ZTpudWxsfWZ1bmN0aW9uIGsoYSxiKXt2YXIgYz1lZC5jdXJyZW50PW51bGwsZD0hMSxlPSExLGY9bnVsbDtpZigzPT09YS50YWcpYz1hLHIoYSkmJihmYj0hMCk7ZWxzZSBmb3IodmFyIGc9YVtcInJldHVyblwiXTtudWxsIT09ZyYmbnVsbD09PWM7KXsyPT09Zy50YWc/XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuc3RhdGVOb2RlLmNvbXBvbmVudERpZENhdGNoJiYoZD0hMCxmPWZkKGcpLGM9ZyxlPSEwKTozPT09Zy50YWcmJihjPWcpO2lmKHIoZykpe2lmKExjfHxudWxsIT09ZmEmJihmYS5oYXMoZyl8fG51bGwhPT1nLmFsdGVybmF0ZSYmZmEuaGFzKGcuYWx0ZXJuYXRlKSkpcmV0dXJuIG51bGw7Yz1udWxsO2U9ITF9Zz1nW1wicmV0dXJuXCJdfWlmKG51bGwhPT1jKXtudWxsPT09bmEmJihuYT1uZXcgU2V0KTtuYS5hZGQoYyk7dmFyIGg9XCJcIjtnPWE7ZG97YTpzd2l0Y2goZy50YWcpe2Nhc2UgMDpjYXNlIDE6Y2FzZSAyOmNhc2UgNTp2YXIgaz1cbmcuX2RlYnVnT3duZXIsbD1nLl9kZWJ1Z1NvdXJjZTt2YXIgRmE9ZmQoZyk7dmFyIG49bnVsbDtrJiYobj1mZChrKSk7az1sO0ZhPVwiXFxuICAgIGluIFwiKyhGYXx8XCJVbmtub3duXCIpKyhrP1wiIChhdCBcIitrLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikrXCI6XCIray5saW5lTnVtYmVyK1wiKVwiOm4/XCIgKGNyZWF0ZWQgYnkgXCIrbitcIilcIjpcIlwiKTticmVhayBhO2RlZmF1bHQ6RmE9XCJcIn1oKz1GYTtnPWdbXCJyZXR1cm5cIl19d2hpbGUoZyk7Zz1oO2E9ZmQoYSk7bnVsbD09PVAmJihQPW5ldyBNYXApO2I9e2NvbXBvbmVudE5hbWU6YSxjb21wb25lbnRTdGFjazpnLGVycm9yOmIsZXJyb3JCb3VuZGFyeTpkP2Muc3RhdGVOb2RlOm51bGwsZXJyb3JCb3VuZGFyeUZvdW5kOmQsZXJyb3JCb3VuZGFyeU5hbWU6Zix3aWxsUmV0cnk6ZX07UC5zZXQoYyxiKTt0cnl7Y29uc29sZS5lcnJvcihiLmVycm9yKX1jYXRjaChDZyl7Y29uc29sZS5lcnJvcihDZyl9TGI/KG51bGw9PT1mYSYmKGZhPW5ldyBTZXQpLFxuZmEuYWRkKGMpKTpGKGMpO3JldHVybiBjfW51bGw9PT1iYSYmKGJhPWIpO3JldHVybiBudWxsfWZ1bmN0aW9uIGgoYSl7cmV0dXJuIG51bGwhPT1QJiYoUC5oYXMoYSl8fG51bGwhPT1hLmFsdGVybmF0ZSYmUC5oYXMoYS5hbHRlcm5hdGUpKX1mdW5jdGlvbiByKGEpe3JldHVybiBudWxsIT09bmEmJihuYS5oYXMoYSl8fG51bGwhPT1hLmFsdGVybmF0ZSYmbmEuaGFzKGEuYWx0ZXJuYXRlKSl9ZnVuY3Rpb24gbigpe3JldHVybiAyMCooKChMKCkrMTAwKS8yMHwwKSsxKX1mdW5jdGlvbiB5KGEpe3JldHVybiAwIT09amE/amE6bWE/TGI/MTpKOiFEZ3x8YS5pbnRlcm5hbENvbnRleHRUYWcmMT9uKCk6MX1mdW5jdGlvbiB1KGEsYil7cmV0dXJuIHgoYSxiLCExKX1mdW5jdGlvbiB4KGEsYil7Zm9yKDtudWxsIT09YTspe2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmIpYS5leHBpcmF0aW9uVGltZT1iO251bGwhPT1hLmFsdGVybmF0ZSYmKDA9PT1hLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZXx8XG5hLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT5iKSYmKGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1hW1wicmV0dXJuXCJdKWlmKDM9PT1hLnRhZyl7dmFyIGM9YS5zdGF0ZU5vZGU7IW1hJiZjPT09ZWImJmI8PUomJihFPWViPW51bGwsSj0wKTt2YXIgZD1iO01iPkVnJiZEKFwiMTg1XCIpO2lmKG51bGw9PT1jLm5leHRTY2hlZHVsZWRSb290KWMucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9ZCxudWxsPT09TT8ob2E9TT1jLGMubmV4dFNjaGVkdWxlZFJvb3Q9Yyk6KE09TS5uZXh0U2NoZWR1bGVkUm9vdD1jLE0ubmV4dFNjaGVkdWxlZFJvb3Q9b2EpO2Vsc2V7dmFyIGU9Yy5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZXx8ZDxlKWMucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9ZH1HYXx8KGthP05iJiZ6KGMsMSk6MT09PWQ/SSgxLG51bGwpOmdifHwoZ2I9ITAsSmUoVCkpKX1lbHNlIGJyZWFrO2E9YVtcInJldHVyblwiXX19ZnVuY3Rpb24gRihhKXt4KGEsMSxcbiEwKX1mdW5jdGlvbiBMKCl7cmV0dXJuIE5jPSgoS2UoKS1GZykvMTB8MCkrMn1mdW5jdGlvbiBHKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PU0pZm9yKHZhciBjPU0sZD1vYTtudWxsIT09ZDspe3ZhciBlPWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09TT9EKFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7b2E9TT1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09b2Epb2E9ZT1kLm5leHRTY2hlZHVsZWRSb290LE0ubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09TSl7TT1jO00ubmV4dFNjaGVkdWxlZFJvb3Q9b2E7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtpZigwPT09XG5hfHxlPGEpYT1lLGI9ZDtpZihkPT09TSlicmVhaztjPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1jPXBhO251bGwhPT1jJiZjPT09Yj9NYisrOk1iPTA7cGE9YjtPYj1hfWZ1bmN0aW9uIFQoYSl7SSgwLGEpfWZ1bmN0aW9uIEkoYSxiKXtoYj1iO2ZvcihHKCk7bnVsbCE9PXBhJiYwIT09T2ImJigwPT09YXx8T2I8PWEpJiYhT2M7KXoocGEsT2IpLEcoKTtudWxsIT09aGImJihnYj0hMSk7bnVsbD09PXBhfHxnYnx8KGdiPSEwLEplKFQpKTtoYj1udWxsO09jPSExO01iPTA7aWYoUGIpdGhyb3cgYT1QYyxQYz1udWxsLFBiPSExLGE7fWZ1bmN0aW9uIHooYSxjKXtHYT9EKFwiMjQ1XCIpOnZvaWQgMDtHYT0hMDtpZihjPD1MKCkpe3ZhciBkPWEuZmluaXNoZWRXb3JrO251bGwhPT1kPyhhLmZpbmlzaGVkV29yaz1udWxsLGEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YihkKSk6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1nKGEsYyksbnVsbCE9PWQmJihhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPVxuYihkKSkpfWVsc2UgZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZD8oYS5maW5pc2hlZFdvcms9bnVsbCxhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIoZCkpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9ZyhhLGMpLG51bGwhPT1kJiYocCgpP2EuZmluaXNoZWRXb3JrPWQ6YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iKGQpKSk7R2E9ITF9ZnVuY3Rpb24gcCgpe3JldHVybiBudWxsPT09aGJ8fGhiLnRpbWVSZW1haW5pbmcoKT5HZz8hMTpPYz0hMH1mdW5jdGlvbiB2KGEpe251bGw9PT1wYT9EKFwiMjQ2XCIpOnZvaWQgMDtwYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT0wO1BifHwoUGI9ITAsUGM9YSl9dmFyIHQ9Z2YoYSksS2I9aGYoYSksRmU9dC5wb3BIb3N0Q29udGFpbmVyLGw9dC5wb3BIb3N0Q29udGV4dCxtZz10LnJlc2V0SG9zdENvbnRhaW5lcixHZT1jZihhLHQsS2IsdSx5KSx3PUdlLmJlZ2luV29yayxuZz1HZS5iZWdpbkZhaWxlZFdvcmssb2c9ZGYoYSx0LEtiKS5jb21wbGV0ZVdvcms7XG50PWVmKGEsayk7dmFyIHdnPXQuY29tbWl0UmVzZXRUZXh0Q29udGVudCxIZT10LmNvbW1pdFBsYWNlbWVudCx5Zz10LmNvbW1pdERlbGV0aW9uLEllPXQuY29tbWl0V29yayxBZz10LmNvbW1pdExpZmVDeWNsZXMsQmc9dC5jb21taXRBdHRhY2hSZWYseGc9dC5jb21taXREZXRhY2hSZWYsS2U9YS5ub3csSmU9YS5zY2hlZHVsZURlZmVycmVkQ2FsbGJhY2ssRGc9YS51c2VTeW5jU2NoZWR1bGluZyx2Zz1hLnByZXBhcmVGb3JDb21taXQsemc9YS5yZXNldEFmdGVyQ29tbWl0LEZnPUtlKCksTmM9MixqYT0wLG1hPSExLEU9bnVsbCxlYj1udWxsLEo9MCxxPW51bGwsUD1udWxsLG5hPW51bGwsZmE9bnVsbCxiYT1udWxsLGZiPSExLExiPSExLExjPSExLG9hPW51bGwsTT1udWxsLGdiPSExLEdhPSExLHBhPW51bGwsT2I9MCxPYz0hMSxQYj0hMSxQYz1udWxsLGhiPW51bGwsa2E9ITEsTmI9ITEsRWc9MUUzLE1iPTAsR2c9MTtyZXR1cm57Y29tcHV0ZUFzeW5jRXhwaXJhdGlvbjpuLGNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXI6eSxcbnNjaGVkdWxlV29yazp1LGJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEsYil7dmFyIGM9a2E7a2E9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KGthPWMpfHxHYXx8SSgxLG51bGwpfX0sdW5iYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhKXtpZihrYSYmIU5iKXtOYj0hMDt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e05iPSExfX1yZXR1cm4gYSgpfSxmbHVzaFN5bmM6ZnVuY3Rpb24oYSl7dmFyIGI9a2E7a2E9ITA7dHJ5e2E6e3ZhciBjPWphO2phPTE7dHJ5e3ZhciBkPWEoKTticmVhayBhfWZpbmFsbHl7amE9Y31kPXZvaWQgMH1yZXR1cm4gZH1maW5hbGx5e2thPWIsR2E/RChcIjE4N1wiKTp2b2lkIDAsSSgxLG51bGwpfX0sZGVmZXJyZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe3ZhciBiPWphO2phPW4oKTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e2phPWJ9fX19XG5mdW5jdGlvbiBrZihhKXtmdW5jdGlvbiBiKGEpe2E9a2QoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9dmFyIGM9YS5nZXRQdWJsaWNJbnN0YW5jZTthPWpmKGEpO3ZhciBkPWEuY29tcHV0ZUFzeW5jRXhwaXJhdGlvbixlPWEuY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcixmPWEuc2NoZWR1bGVXb3JrO3JldHVybntjcmVhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgWSgzLG51bGwsMCk7YT17Y3VycmVudDpjLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxyZW1haW5pbmdFeHBpcmF0aW9uVGltZTowLGlzUmVhZHlGb3JDb21taXQ6ITEsZmluaXNoZWRXb3JrOm51bGwsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpiLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3JldHVybiBjLnN0YXRlTm9kZT1hfSx1cGRhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxiLGMscil7dmFyIGc9Yi5jdXJyZW50O2lmKGMpe2M9XG5jLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGg7Yjp7Mj09PWdkKGMpJiYyPT09Yy50YWc/dm9pZCAwOkQoXCIxNzBcIik7Zm9yKGg9YzszIT09aC50YWc7KXtpZihoZShoKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifShoPWhbXCJyZXR1cm5cIl0pP3ZvaWQgMDpEKFwiMTcxXCIpfWg9aC5zdGF0ZU5vZGUuY29udGV4dH1jPWhlKGMpP2xlKGMsaCk6aH1lbHNlIGM9QztudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXI7Yj12b2lkIDA9PT1iP251bGw6YjtyPW51bGwhPWEmJm51bGwhPWEudHlwZSYmbnVsbCE9YS50eXBlLnByb3RvdHlwZSYmITA9PT1hLnR5cGUucHJvdG90eXBlLnVuc3RhYmxlX2lzQXN5bmNSZWFjdENvbXBvbmVudD9kKCk6ZShnKTtEZShnLHtleHBpcmF0aW9uVGltZTpyLHBhcnRpYWxTdGF0ZTp7ZWxlbWVudDphfSxjYWxsYmFjazpiLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxcbm5leHRDYWxsYmFjazpudWxsLG5leHQ6bnVsbH0pO2YoZyxyKX0sYmF0Y2hlZFVwZGF0ZXM6YS5iYXRjaGVkVXBkYXRlcyx1bmJhdGNoZWRVcGRhdGVzOmEudW5iYXRjaGVkVXBkYXRlcyxkZWZlcnJlZFVwZGF0ZXM6YS5kZWZlcnJlZFVwZGF0ZXMsZmx1c2hTeW5jOmEuZmx1c2hTeW5jLGdldFB1YmxpY1Jvb3RJbnN0YW5jZTpmdW5jdGlvbihhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYyhhLmNoaWxkLnN0YXRlTm9kZSk7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fSxmaW5kSG9zdEluc3RhbmNlOmIsZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHM6ZnVuY3Rpb24oYSl7YT1sZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0saW5qZWN0SW50b0RldlRvb2xzOmZ1bmN0aW9uKGEpe3ZhciBjPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIHllKEEoe30sXG5hLHtmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXtyZXR1cm4gYihhKX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGM/YyhhKTpudWxsfX0pKX19fXZhciBsZj1PYmplY3QuZnJlZXplKHtkZWZhdWx0OmtmfSksbWY9bGYmJmtmfHxsZixuZj1tZltcImRlZmF1bHRcIl0/bWZbXCJkZWZhdWx0XCJdOm1mLG9mPVwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cscGY9dm9pZCAwO3BmPW9mP2Z1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfTpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTt2YXIgcWY9dm9pZCAwO1xuaWYobS5jYW5Vc2VET00paWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHJlcXVlc3RJZGxlQ2FsbGJhY2spe3ZhciByZj1udWxsLHNmPSExLHRmPSExLHVmPTAsdmY9MzMsd2Y9MzMseGY7eGY9b2Y/e3RpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdWYtcGVyZm9ybWFuY2Uubm93KCl9fTp7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiB1Zi1EYXRlLm5vdygpfX07dmFyIHlmPVwiX19yZWFjdElkbGVDYWxsYmFjayRcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihhKXthLnNvdXJjZT09PXdpbmRvdyYmYS5kYXRhPT09eWYmJihzZj0hMSxhPXJmLHJmPW51bGwsbnVsbCE9PWEmJmEoeGYpKX0sITEpO3ZhciB6Zj1mdW5jdGlvbihhKXt0Zj0hMTt2YXIgYj1hLXVmK3dmO2I8d2YmJnZmPHdmPyg4PmImJihiPTgpLHdmPWI8dmY/dmY6Yik6dmY9Yjt1Zj1hK3dmO3NmfHwoc2Y9ITAsXG53aW5kb3cucG9zdE1lc3NhZ2UoeWYsXCIqXCIpKX07cWY9ZnVuY3Rpb24oYSl7cmY9YTt0Znx8KHRmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZSh6ZikpO3JldHVybiAwfX1lbHNlIHFmPXJlcXVlc3RJZGxlQ2FsbGJhY2s7ZWxzZSBxZj1mdW5jdGlvbihhKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX19KX0pO3JldHVybiAwfTtcbnZhciBBZj0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sQmY9e30sQ2Y9e307ZnVuY3Rpb24gRGYoYSl7aWYoQ2YuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITA7aWYoQmYuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITE7aWYoQWYudGVzdChhKSlyZXR1cm4gQ2ZbYV09ITA7QmZbYV09ITA7cmV0dXJuITF9XG5mdW5jdGlvbiBFZihhLGIsYyl7dmFyIGQ9dWEoYik7aWYoZCYmdGEoYixjKSl7dmFyIGU9ZC5tdXRhdGlvbk1ldGhvZDtlP2UoYSxjKTpudWxsPT1jfHxkLmhhc0Jvb2xlYW5WYWx1ZSYmIWN8fGQuaGFzTnVtZXJpY1ZhbHVlJiZpc05hTihjKXx8ZC5oYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZSYmMT5jfHxkLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUmJiExPT09Yz9GZihhLGIpOmQubXVzdFVzZVByb3BlcnR5P2FbZC5wcm9wZXJ0eU5hbWVdPWM6KGI9ZC5hdHRyaWJ1dGVOYW1lLChlPWQuYXR0cmlidXRlTmFtZXNwYWNlKT9hLnNldEF0dHJpYnV0ZU5TKGUsYixcIlwiK2MpOmQuaGFzQm9vbGVhblZhbHVlfHxkLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUmJiEwPT09Yz9hLnNldEF0dHJpYnV0ZShiLFwiXCIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSl9ZWxzZSBHZihhLGIsdGEoYixjKT9jOm51bGwpfVxuZnVuY3Rpb24gR2YoYSxiLGMpe0RmKGIpJiYobnVsbD09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpfWZ1bmN0aW9uIEZmKGEsYil7dmFyIGM9dWEoYik7Yz8oYj1jLm11dGF0aW9uTWV0aG9kKT9iKGEsdm9pZCAwKTpjLm11c3RVc2VQcm9wZXJ0eT9hW2MucHJvcGVydHlOYW1lXT1jLmhhc0Jvb2xlYW5WYWx1ZT8hMTpcIlwiOmEucmVtb3ZlQXR0cmlidXRlKGMuYXR0cmlidXRlTmFtZSk6YS5yZW1vdmVBdHRyaWJ1dGUoYil9XG5mdW5jdGlvbiBIZihhLGIpe3ZhciBjPWIudmFsdWUsZD1iLmNoZWNrZWQ7cmV0dXJuIEEoe3R5cGU6dm9pZCAwLHN0ZXA6dm9pZCAwLG1pbjp2b2lkIDAsbWF4OnZvaWQgMH0sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUsY2hlY2tlZDpudWxsIT1kP2Q6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gSWYoYSxiKXt2YXIgYz1iLmRlZmF1bHRWYWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOm51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZCxpbml0aWFsVmFsdWU6bnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19XG5mdW5jdGlvbiBKZihhLGIpe3ZhciBjPWIuY2hlY2tlZDtudWxsIT1jJiZFZihhLFwiY2hlY2tlZFwiLGN8fCExKTtjPWIudmFsdWU7aWYobnVsbCE9YylpZigwPT09YyYmXCJcIj09PWEudmFsdWUpYS52YWx1ZT1cIjBcIjtlbHNlIGlmKFwibnVtYmVyXCI9PT1iLnR5cGUpe2lmKGI9cGFyc2VGbG9hdChhLnZhbHVlKXx8MCxjIT1ifHxjPT1iJiZhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIG51bGw9PWIudmFsdWUmJm51bGwhPWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2IuZGVmYXVsdFZhbHVlKSxudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBLZihhLGIpe3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztjYXNlIFwiY29sb3JcIjpjYXNlIFwiZGF0ZVwiOmNhc2UgXCJkYXRldGltZVwiOmNhc2UgXCJkYXRldGltZS1sb2NhbFwiOmNhc2UgXCJtb250aFwiOmNhc2UgXCJ0aW1lXCI6Y2FzZSBcIndlZWtcIjphLnZhbHVlPVwiXCI7YS52YWx1ZT1hLmRlZmF1bHRWYWx1ZTticmVhaztkZWZhdWx0OmEudmFsdWU9YS52YWx1ZX1iPWEubmFtZTtcIlwiIT09YiYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7XCJcIiE9PWImJihhLm5hbWU9Yil9ZnVuY3Rpb24gTGYoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifVxuZnVuY3Rpb24gTWYoYSxiKXthPUEoe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1MZihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9ZnVuY3Rpb24gTmYoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIE9mKGEsYil7dmFyIGM9Yi52YWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpudWxsIT1jP2M6Yi5kZWZhdWx0VmFsdWUsd2FzTXVsdGlwbGU6ISFiLm11bHRpcGxlfX1mdW5jdGlvbiBQZihhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBRZihhLGIpe3ZhciBjPWIudmFsdWUsZD1jO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz9EKFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6RChcIjkzXCIpLGI9YlswXSksYz1cIlwiK2IpLG51bGw9PWMmJihjPVwiXCIpLGQ9Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6XCJcIitkfX1cbmZ1bmN0aW9uIFJmKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9Yi5kZWZhdWx0VmFsdWUpfWZ1bmN0aW9uIFNmKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBUZj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBVZihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIFZmKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9VZihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBXZj12b2lkIDAsWGY9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09VGYuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7V2Y9V2Z8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7V2YuaW5uZXJIVE1MPVwiXFx4M2NzdmdcXHgzZVwiK2IrXCJcXHgzYy9zdmdcXHgzZVwiO2ZvcihiPVdmLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KSxZZj0vW1wiJyY8Pl0vO1xuZnVuY3Rpb24gWmYoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbm0uY2FuVXNlRE9NJiYoXCJ0ZXh0Q29udGVudFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fHwoWmY9ZnVuY3Rpb24oYSxiKXtpZigzPT09YS5ub2RlVHlwZSlhLm5vZGVWYWx1ZT1iO2Vsc2V7aWYoXCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKWI9XCJcIitiO2Vsc2V7Yj1cIlwiK2I7dmFyIGM9WWYuZXhlYyhiKTtpZihjKXt2YXIgZD1cIlwiLGUsZj0wO2ZvcihlPWMuaW5kZXg7ZTxiLmxlbmd0aDtlKyspe3N3aXRjaChiLmNoYXJDb2RlQXQoZSkpe2Nhc2UgMzQ6Yz1cIlxceDI2cXVvdDtcIjticmVhaztjYXNlIDM4OmM9XCJcXHgyNmFtcDtcIjticmVhaztjYXNlIDM5OmM9XCJcXHgyNiN4Mjc7XCI7YnJlYWs7Y2FzZSA2MDpjPVwiXFx4MjZsdDtcIjticmVhaztjYXNlIDYyOmM9XCJcXHgyNmd0O1wiO2JyZWFrO2RlZmF1bHQ6Y29udGludWV9ZiE9PWUmJihkKz1iLnN1YnN0cmluZyhmLGUpKTtmPWUrMTtkKz1jfWI9ZiE9PWU/ZCtiLnN1YnN0cmluZyhmLGUpOmR9fVhmKGEsYil9fSkpO1xudmFyICRmPVpmLGFnPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LGJnPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhhZykuZm9yRWFjaChmdW5jdGlvbihhKXtiZy5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO2FnW2JdPWFnW2FdfSl9KTtcbmZ1bmN0aW9uIGNnKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fGFnLmhhc093blByb3BlcnR5KGUpJiZhZ1tlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBkZz1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gZWcoYSxiLGMpe2ImJihkZ1thXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0QoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6RChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/RChcIjYyXCIsYygpKTp2b2lkIDApfVxuZnVuY3Rpb24gZmcoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBnZz1UZi5odG1sLGhnPUIudGhhdFJldHVybnMoXCJcIik7XG5mdW5jdGlvbiBpZyhhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1EZChhKTtiPVJhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2MuaGFzT3duUHJvcGVydHkoZSkmJmNbZV18fChcInRvcFdoZWVsXCI9PT1lP3ljKFwid2hlZWxcIik/VShcInRvcFdoZWVsXCIsXCJ3aGVlbFwiLGEpOnljKFwibW91c2V3aGVlbFwiKT9VKFwidG9wV2hlZWxcIixcIm1vdXNld2hlZWxcIixhKTpVKFwidG9wV2hlZWxcIixcIkRPTU1vdXNlU2Nyb2xsXCIsYSk6XCJ0b3BTY3JvbGxcIj09PWU/c2QoXCJ0b3BTY3JvbGxcIixcInNjcm9sbFwiLGEpOlwidG9wRm9jdXNcIj09PWV8fFwidG9wQmx1clwiPT09ZT8oc2QoXCJ0b3BGb2N1c1wiLFwiZm9jdXNcIixhKSxzZChcInRvcEJsdXJcIixcImJsdXJcIixhKSxjLnRvcEJsdXI9ITAsYy50b3BGb2N1cz0hMCk6XCJ0b3BDYW5jZWxcIj09PWU/KHljKFwiY2FuY2VsXCIsITApJiZzZChcInRvcENhbmNlbFwiLFwiY2FuY2VsXCIsYSksYy50b3BDYW5jZWw9XG4hMCk6XCJ0b3BDbG9zZVwiPT09ZT8oeWMoXCJjbG9zZVwiLCEwKSYmc2QoXCJ0b3BDbG9zZVwiLFwiY2xvc2VcIixhKSxjLnRvcENsb3NlPSEwKTp6ZC5oYXNPd25Qcm9wZXJ0eShlKSYmVShlLHpkW2VdLGEpLGNbZV09ITApfX1cbnZhciBqZz17dG9wQWJvcnQ6XCJhYm9ydFwiLHRvcENhblBsYXk6XCJjYW5wbGF5XCIsdG9wQ2FuUGxheVRocm91Z2g6XCJjYW5wbGF5dGhyb3VnaFwiLHRvcER1cmF0aW9uQ2hhbmdlOlwiZHVyYXRpb25jaGFuZ2VcIix0b3BFbXB0aWVkOlwiZW1wdGllZFwiLHRvcEVuY3J5cHRlZDpcImVuY3J5cHRlZFwiLHRvcEVuZGVkOlwiZW5kZWRcIix0b3BFcnJvcjpcImVycm9yXCIsdG9wTG9hZGVkRGF0YTpcImxvYWRlZGRhdGFcIix0b3BMb2FkZWRNZXRhZGF0YTpcImxvYWRlZG1ldGFkYXRhXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsdG9wUGF1c2U6XCJwYXVzZVwiLHRvcFBsYXk6XCJwbGF5XCIsdG9wUGxheWluZzpcInBsYXlpbmdcIix0b3BQcm9ncmVzczpcInByb2dyZXNzXCIsdG9wUmF0ZUNoYW5nZTpcInJhdGVjaGFuZ2VcIix0b3BTZWVrZWQ6XCJzZWVrZWRcIix0b3BTZWVraW5nOlwic2Vla2luZ1wiLHRvcFN0YWxsZWQ6XCJzdGFsbGVkXCIsdG9wU3VzcGVuZDpcInN1c3BlbmRcIix0b3BUaW1lVXBkYXRlOlwidGltZXVwZGF0ZVwiLHRvcFZvbHVtZUNoYW5nZTpcInZvbHVtZWNoYW5nZVwiLFxudG9wV2FpdGluZzpcIndhaXRpbmdcIn07ZnVuY3Rpb24ga2coYSxiLGMsZCl7Yz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtkPT09Z2cmJihkPVVmKGEpKTtkPT09Z2c/XCJzY3JpcHRcIj09PWE/KGE9Yy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiXFx4M2NzY3JpcHRcXHgzZVxceDNjL3NjcmlwdFxceDNlXCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOmE9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzP2MuY3JlYXRlRWxlbWVudChhLHtpczpiLmlzfSk6Yy5jcmVhdGVFbGVtZW50KGEpOmE9Yy5jcmVhdGVFbGVtZW50TlMoZCxhKTtyZXR1cm4gYX1mdW5jdGlvbiBsZyhhLGIpe3JldHVybig5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoYSl9XG5mdW5jdGlvbiBwZyhhLGIsYyxkKXt2YXIgZT1mZyhiLGMpO3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlUoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7dmFyIGY9YzticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZiBpbiBqZylqZy5oYXNPd25Qcm9wZXJ0eShmKSYmVShmLGpnW2ZdLGEpO2Y9YzticmVhaztjYXNlIFwic291cmNlXCI6VShcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6VShcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1UoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6VShcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO1UoXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOlUoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW5wdXRcIjpJZihhLGMpO2Y9SGYoYSxjKTtVKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpO1xuaWcoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPU1mKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOk9mKGEsYyk7Zj1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO1UoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7aWcoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlFmKGEsYyk7Zj1QZihhLGMpO1UoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7aWcoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfWVnKGIsZixoZyk7dmFyIGc9ZixrO2ZvcihrIGluIGcpaWYoZy5oYXNPd25Qcm9wZXJ0eShrKSl7dmFyIGg9Z1trXTtcInN0eWxlXCI9PT1rP2NnKGEsaCxoZyk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09az8oaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1oJiZYZihhLGgpKTpcImNoaWxkcmVuXCI9PT1rP1wic3RyaW5nXCI9PT10eXBlb2YgaD8oXCJ0ZXh0YXJlYVwiIT09Ynx8XCJcIiE9PWgpJiYkZihhLGgpOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmJGYoYSxcblwiXCIraCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWsmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1rJiZcImF1dG9Gb2N1c1wiIT09ayYmKFFhLmhhc093blByb3BlcnR5KGspP251bGwhPWgmJmlnKGQsayk6ZT9HZihhLGssaCk6bnVsbCE9aCYmRWYoYSxrLGgpKX1zd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6QmMoYSk7S2YoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpCYyhhKTtTZihhLGMpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1jLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsYy52YWx1ZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFjLm11bHRpcGxlO2I9Yy52YWx1ZTtudWxsIT1iP05mKGEsISFjLm11bHRpcGxlLGIsITEpOm51bGwhPWMuZGVmYXVsdFZhbHVlJiZOZihhLCEhYy5tdWx0aXBsZSxjLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoYS5vbmNsaWNrPVxuQil9fVxuZnVuY3Rpb24gcWcoYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPUhmKGEsYyk7ZD1IZihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmM9TWYoYSxjKTtkPU1mKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Yz1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9UGYoYSxjKTtkPVBmKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9Qil9ZWcoYixkLGhnKTt2YXIgZyxrO2E9bnVsbDtmb3IoZyBpbiBjKWlmKCFkLmhhc093blByb3BlcnR5KGcpJiZjLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1jW2ddKWlmKFwic3R5bGVcIj09PWcpZm9yKGsgaW4gYj1jW2ddLGIpYi5oYXNPd25Qcm9wZXJ0eShrKSYmKGF8fChhPXt9KSxhW2tdPVxuXCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWcmJlwiY2hpbGRyZW5cIiE9PWcmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1nJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZyYmXCJhdXRvRm9jdXNcIiE9PWcmJihRYS5oYXNPd25Qcm9wZXJ0eShnKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2goZyxudWxsKSk7Zm9yKGcgaW4gZCl7dmFyIGg9ZFtnXTtiPW51bGwhPWM/Y1tnXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShnKSYmaCE9PWImJihudWxsIT1ofHxudWxsIT1iKSlpZihcInN0eWxlXCI9PT1nKWlmKGIpe2ZvcihrIGluIGIpIWIuaGFzT3duUHJvcGVydHkoayl8fGgmJmguaGFzT3duUHJvcGVydHkoayl8fChhfHwoYT17fSksYVtrXT1cIlwiKTtmb3IoayBpbiBoKWguaGFzT3duUHJvcGVydHkoaykmJmJba10hPT1oW2tdJiYoYXx8KGE9e30pLGFba109aFtrXSl9ZWxzZSBhfHwoZnx8KGY9W10pLGYucHVzaChnLGEpKSxhPWg7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PVxuZz8oaD1oP2guX19odG1sOnZvaWQgMCxiPWI/Yi5fX2h0bWw6dm9pZCAwLG51bGwhPWgmJmIhPT1oJiYoZj1mfHxbXSkucHVzaChnLFwiXCIraCkpOlwiY2hpbGRyZW5cIj09PWc/Yj09PWh8fFwic3RyaW5nXCIhPT10eXBlb2YgaCYmXCJudW1iZXJcIiE9PXR5cGVvZiBofHwoZj1mfHxbXSkucHVzaChnLFwiXCIraCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWcmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1nJiYoUWEuaGFzT3duUHJvcGVydHkoZyk/KG51bGwhPWgmJmlnKGUsZyksZnx8Yj09PWh8fChmPVtdKSk6KGY9Znx8W10pLnB1c2goZyxoKSl9YSYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGEpO3JldHVybiBmfVxuZnVuY3Rpb24gcmcoYSxiLGMsZCxlKXtmZyhjLGQpO2Q9ZmcoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBnPWJbZl0saz1iW2YrMV07XCJzdHlsZVwiPT09Zz9jZyhhLGssaGcpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/WGYoYSxrKTpcImNoaWxkcmVuXCI9PT1nPyRmKGEsayk6ZD9udWxsIT1rP0dmKGEsZyxrKTphLnJlbW92ZUF0dHJpYnV0ZShnKTpudWxsIT1rP0VmKGEsZyxrKTpGZihhLGcpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpKZihhLGUpO0NjKGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlJmKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU9dm9pZCAwLGI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/TmYoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPVxuZS5kZWZhdWx0VmFsdWU/TmYoYSwhIWUubXVsdGlwbGUsZS5kZWZhdWx0VmFsdWUsITApOk5mKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1cbmZ1bmN0aW9uIHNnKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6VShcInRvcExvYWRcIixcImxvYWRcIixhKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IodmFyIGYgaW4gamcpamcuaGFzT3duUHJvcGVydHkoZikmJlUoZixqZ1tmXSxhKTticmVhaztjYXNlIFwic291cmNlXCI6VShcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpVKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7VShcInRvcExvYWRcIixcImxvYWRcIixhKTticmVhaztjYXNlIFwiZm9ybVwiOlUoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtVKFwidG9wU3VibWl0XCIsXCJzdWJtaXRcIixhKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOlUoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOklmKGEsYyk7VShcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTtpZyhlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOk9mKGEsYyk7XG5VKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpO2lnKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpRZihhLGMpLFUoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSksaWcoZSxcIm9uQ2hhbmdlXCIpfWVnKGIsYyxoZyk7ZD1udWxsO2Zvcih2YXIgZyBpbiBjKWMuaGFzT3duUHJvcGVydHkoZykmJihmPWNbZ10sXCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGY/YS50ZXh0Q29udGVudCE9PWYmJihkPVtcImNoaWxkcmVuXCIsZl0pOlwibnVtYmVyXCI9PT10eXBlb2YgZiYmYS50ZXh0Q29udGVudCE9PVwiXCIrZiYmKGQ9W1wiY2hpbGRyZW5cIixcIlwiK2ZdKTpRYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9ZiYmaWcoZSxnKSk7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkJjKGEpO0tmKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6QmMoYSk7U2YoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGMub25DbGljayYmXG4oYS5vbmNsaWNrPUIpfXJldHVybiBkfWZ1bmN0aW9uIHRnKGEsYil7cmV0dXJuIGEubm9kZVZhbHVlIT09Yn1cbnZhciB1Zz1PYmplY3QuZnJlZXplKHtjcmVhdGVFbGVtZW50OmtnLGNyZWF0ZVRleHROb2RlOmxnLHNldEluaXRpYWxQcm9wZXJ0aWVzOnBnLGRpZmZQcm9wZXJ0aWVzOnFnLHVwZGF0ZVByb3BlcnRpZXM6cmcsZGlmZkh5ZHJhdGVkUHJvcGVydGllczpzZyxkaWZmSHlkcmF0ZWRUZXh0OnRnLHdhcm5Gb3JVbm1hdGNoZWRUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dDpmdW5jdGlvbigpe30scmVzdG9yZUNvbnRyb2xsZWRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkpmKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1cbmMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWVcXHgzZFwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZVxceDNkXCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9c2IoZCk7ZT92b2lkIDA6RChcIjkwXCIpO0pmKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpSZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmTmYoYSwhIWMubXVsdGlwbGUsYiwhMSl9fX0pO25jLmluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQodWcpO3ZhciBIZz1udWxsLElnPW51bGw7ZnVuY3Rpb24gSmcoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gS2coYSl7YT1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsO3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlfHwhYS5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSl9XG52YXIgWj1uZih7Z2V0Um9vdEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZVR5cGU7c3dpdGNoKGIpe2Nhc2UgOTpjYXNlIDExOmE9KGE9YS5kb2N1bWVudEVsZW1lbnQpP2EubmFtZXNwYWNlVVJJOlZmKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpiPTg9PT1iP2EucGFyZW50Tm9kZTphLGE9Yi5uYW1lc3BhY2VVUkl8fG51bGwsYj1iLnRhZ05hbWUsYT1WZihhLGIpfXJldHVybiBhfSxnZXRDaGlsZEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFZmKGEsYil9LGdldFB1YmxpY0luc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBhfSxwcmVwYXJlRm9yQ29tbWl0OmZ1bmN0aW9uKCl7SGc9cGQ7dmFyIGE9ZGEoKTtpZihHZChhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYj17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7dmFyIGM9d2luZG93LmdldFNlbGVjdGlvbiYmd2luZG93LmdldFNlbGVjdGlvbigpO1xuaWYoYyYmMCE9PWMucmFuZ2VDb3VudCl7Yj1jLmFuY2hvck5vZGU7dmFyIGQ9Yy5hbmNob3JPZmZzZXQsZT1jLmZvY3VzTm9kZTtjPWMuZm9jdXNPZmZzZXQ7dHJ5e2Iubm9kZVR5cGUsZS5ub2RlVHlwZX1jYXRjaCh4KXtiPW51bGw7YnJlYWsgYX12YXIgZj0wLGc9LTEsaz0tMSxoPTAscj0wLG49YSx5PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdTs7KXtuIT09Ynx8MCE9PWQmJjMhPT1uLm5vZGVUeXBlfHwoZz1mK2QpO24hPT1lfHwwIT09YyYmMyE9PW4ubm9kZVR5cGV8fChrPWYrYyk7Mz09PW4ubm9kZVR5cGUmJihmKz1uLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odT1uLmZpcnN0Q2hpbGQpKWJyZWFrO3k9bjtuPXV9Zm9yKDs7KXtpZihuPT09YSlicmVhayBiO3k9PT1iJiYrK2g9PT1kJiYoZz1mKTt5PT09ZSYmKytyPT09YyYmKGs9Zik7aWYobnVsbCE9PSh1PW4ubmV4dFNpYmxpbmcpKWJyZWFrO249eTt5PW4ucGFyZW50Tm9kZX1uPXV9Yj0tMT09PWd8fC0xPT09az9udWxsOlxue3N0YXJ0OmcsZW5kOmt9fWVsc2UgYj1udWxsfWI9Ynx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYj1udWxsO0lnPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmJ9O3FkKCExKX0scmVzZXRBZnRlckNvbW1pdDpmdW5jdGlvbigpe3ZhciBhPUlnLGI9ZGEoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZoYShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKEdkKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYod2luZG93LmdldFNlbGVjdGlvbil7Yj13aW5kb3cuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Y1tFYigpXS5sZW5ndGg7YT1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/YTpNYXRoLm1pbihkLmVuZCxlKTshYi5leHRlbmQmJmE+XG5kJiYoZT1kLGQ9YSxhPWUpO2U9RmQoYyxhKTt2YXIgZj1GZChjLGQpO2lmKGUmJmYmJigxIT09Yi5yYW5nZUNvdW50fHxiLmFuY2hvck5vZGUhPT1lLm5vZGV8fGIuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGIuZm9jdXNOb2RlIT09Zi5ub2RlfHxiLmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpKXt2YXIgZz1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO2cuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KTtiLnJlbW92ZUFsbFJhbmdlcygpO2E+ZD8oYi5hZGRSYW5nZShnKSxiLmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKTooZy5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSxiLmFkZFJhbmdlKGcpKX19Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7aWEoYyk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9XG5hLnRvcH1JZz1udWxsO3FkKEhnKTtIZz1udWxsfSxjcmVhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUpe2E9a2coYSxiLGMsZCk7YVtPXT1lO2FbcGJdPWI7cmV0dXJuIGF9LGFwcGVuZEluaXRpYWxDaGlsZDpmdW5jdGlvbihhLGIpe2EuYXBwZW5kQ2hpbGQoYil9LGZpbmFsaXplSW5pdGlhbENoaWxkcmVuOmZ1bmN0aW9uKGEsYixjLGQpe3BnKGEsYixjLGQpO2E6e3N3aXRjaChiKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmE9ISFjLmF1dG9Gb2N1czticmVhayBhfWE9ITF9cmV0dXJuIGF9LHByZXBhcmVVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gcWcoYSxiLGMsZCxlKX0sc2hvdWxkU2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PVxudHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcInN0cmluZ1wiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfSxzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlOmZ1bmN0aW9uKGEsYil7cmV0dXJuISFiLmhpZGRlbn0sY3JlYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQpe2E9bGcoYSxiKTthW09dPWQ7cmV0dXJuIGF9LG5vdzpwZixtdXRhdGlvbjp7Y29tbWl0TW91bnQ6ZnVuY3Rpb24oYSl7YS5mb2N1cygpfSxjb21taXRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXthW3BiXT1lO3JnKGEsYixjLGQsZSl9LHJlc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSl7YS50ZXh0Q29udGVudD1cIlwifSxjb21taXRUZXh0VXBkYXRlOmZ1bmN0aW9uKGEsYixjKXthLm5vZGVWYWx1ZT1jfSxhcHBlbmRDaGlsZDpmdW5jdGlvbihhLGIpe2EuYXBwZW5kQ2hpbGQoYil9LGFwcGVuZENoaWxkVG9Db250YWluZXI6ZnVuY3Rpb24oYSxcbmIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixhKTphLmFwcGVuZENoaWxkKGIpfSxpbnNlcnRCZWZvcmU6ZnVuY3Rpb24oYSxiLGMpe2EuaW5zZXJ0QmVmb3JlKGIsYyl9LGluc2VydEluQ29udGFpbmVyQmVmb3JlOmZ1bmN0aW9uKGEsYixjKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYyk6YS5pbnNlcnRCZWZvcmUoYixjKX0scmVtb3ZlQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLnJlbW92ZUNoaWxkKGIpfSxyZW1vdmVDaGlsZEZyb21Db250YWluZXI6ZnVuY3Rpb24oYSxiKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik6YS5yZW1vdmVDaGlsZChiKX19LGh5ZHJhdGlvbjp7Y2FuSHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIDEhPT1hLm5vZGVUeXBlfHxiLnRvTG93ZXJDYXNlKCkhPT1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDphfSxjYW5IeWRyYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsXG5iKXtyZXR1cm5cIlwiPT09Ynx8MyE9PWEubm9kZVR5cGU/bnVsbDphfSxnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmc6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX0sZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQ6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxoeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2FbT109ZjthW3BiXT1jO3JldHVybiBzZyhhLGIsYyxlLGQpfSxoeWRyYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXthW09dPWM7cmV0dXJuIHRnKGEsYil9LGRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LFxuZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RIeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVySW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZTpmdW5jdGlvbigpe319LHNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjazpxZix1c2VTeW5jU2NoZWR1bGluZzohMH0pO3JjPVouYmF0Y2hlZFVwZGF0ZXM7XG5mdW5jdGlvbiBMZyhhLGIsYyxkLGUpe0pnKGMpP3ZvaWQgMDpEKFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKVoudXBkYXRlQ29udGFpbmVyKGIsZixhLGUpO2Vsc2V7ZD1kfHxLZyhjKTtpZighZClmb3IoZj12b2lkIDA7Zj1jLmxhc3RDaGlsZDspYy5yZW1vdmVDaGlsZChmKTt2YXIgZz1aLmNyZWF0ZUNvbnRhaW5lcihjLGQpO2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWc7Wi51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7Wi51cGRhdGVDb250YWluZXIoYixnLGEsZSl9KX1yZXR1cm4gWi5nZXRQdWJsaWNSb290SW5zdGFuY2UoZil9ZnVuY3Rpb24gTWcoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtKZyhiKT92b2lkIDA6RChcIjIwMFwiKTtyZXR1cm4gUGUoYSxiLG51bGwsYyl9XG5mdW5jdGlvbiBOZyhhLGIpe3RoaXMuX3JlYWN0Um9vdENvbnRhaW5lcj1aLmNyZWF0ZUNvbnRhaW5lcihhLGIpfU5nLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXtaLnVwZGF0ZUNvbnRhaW5lcihhLHRoaXMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsLGIpfTtOZy5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXtaLnVwZGF0ZUNvbnRhaW5lcihudWxsLHRoaXMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsLGEpfTtcbnZhciBPZz17Y3JlYXRlUG9ydGFsOk1nLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKGIpcmV0dXJuIFouZmluZEhvc3RJbnN0YW5jZShiKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/RChcIjE4OFwiKTpEKFwiMjEzXCIsT2JqZWN0LmtleXMoYSkpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gTGcobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIExnKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/RChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gTGcoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7SmcoYSk/dm9pZCAwOlxuRChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFoudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe0xnKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOk1nLHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOnRjLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpaLmRlZmVycmVkVXBkYXRlcyxmbHVzaFN5bmM6Wi5mbHVzaFN5bmMsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50UGx1Z2luSHViOm5iLEV2ZW50UGx1Z2luUmVnaXN0cnk6VWEsRXZlbnRQcm9wYWdhdG9yczpDYixSZWFjdENvbnRyb2xsZWRDb21wb25lbnQ6cWMsUmVhY3RET01Db21wb25lbnRUcmVlOnRiLFJlYWN0RE9NRXZlbnRMaXN0ZW5lcjp0ZH19O1xuWi5pbmplY3RJbnRvRGV2VG9vbHMoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnFiLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMS4xXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIFBnPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6T2d9KSxRZz1QZyYmT2d8fFBnO21vZHVsZS5leHBvcnRzPVFnW1wiZGVmYXVsdFwiXT9RZ1tcImRlZmF1bHRcIl06UWc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9lbXB0eUZ1bmN0aW9uJyk7XG5cbi8qKlxuICogVXBzdHJlYW0gdmVyc2lvbiBvZiBldmVudCBsaXN0ZW5lci4gRG9lcyBub3QgdGFrZSBpbnRvIGFjY291bnQgc3BlY2lmaWNcbiAqIG5hdHVyZSBvZiBwbGF0Zm9ybS5cbiAqL1xudmFyIEV2ZW50TGlzdGVuZXIgPSB7XG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGJ1YmJsZSBwaGFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEV2ZW50IHR5cGUsIGUuZy4gJ2NsaWNrJyBvciAnbW91c2VvdmVyJy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG4gICAqL1xuICBsaXN0ZW46IGZ1bmN0aW9uIGxpc3Rlbih0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHRhcmdldC5hdHRhY2hFdmVudCkge1xuICAgICAgdGFyZ2V0LmF0dGFjaEV2ZW50KCdvbicgKyBldmVudFR5cGUsIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgIHRhcmdldC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgY2FwdHVyZTogZnVuY3Rpb24gY2FwdHVyZSh0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0F0dGVtcHRlZCB0byBsaXN0ZW4gdG8gZXZlbnRzIGR1cmluZyB0aGUgY2FwdHVyZSBwaGFzZSBvbiBhICcgKyAnYnJvd3NlciB0aGF0IGRvZXMgbm90IHN1cHBvcnQgdGhlIGNhcHR1cmUgcGhhc2UuIFlvdXIgYXBwbGljYXRpb24gJyArICd3aWxsIG5vdCByZWNlaXZlIHNvbWUgZXZlbnRzLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBlbXB0eUZ1bmN0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICByZWdpc3RlckRlZmF1bHQ6IGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdCgpIHt9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50TGlzdGVuZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvRXZlbnRMaXN0ZW5lci5qc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy90eXBlb2YtdW5kZWZpbmVkICovXG5cbi8qKlxuICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcbiAqIG5vdCBzYWZlIHRvIGNhbGwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpZiB0aGVyZSBpcyBub3RoaW5nIGZvY3VzZWQuXG4gKlxuICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IG9yIGRvY3VtZW50IGJvZHkgaXMgbm90XG4gKiB5ZXQgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0gez9ET01Eb2N1bWVudH0gZG9jIERlZmF1bHRzIHRvIGN1cnJlbnQgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIC8qP0RPTUVsZW1lbnQqL3tcbiAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudC5qc1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gU2FtZVZhbHVlIGFsZ29yaXRobVxuICBpZiAoeCA9PT0geSkge1xuICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG4gICAgLy8gQWRkZWQgdGhlIG5vbnplcm8geSBjaGVjayB0byBtYWtlIEZsb3cgaGFwcHksIGJ1dCBpdCBpcyByZWR1bmRhbnRcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBlcXVhbGl0eSBieSBpdGVyYXRpbmcgdGhyb3VnaCBrZXlzIG9uIGFuIG9iamVjdCBhbmQgcmV0dXJuaW5nIGZhbHNlXG4gKiB3aGVuIGFueSBrZXkgaGFzIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmljdGx5IGVxdWFsIGJldHdlZW4gdGhlIGFyZ3VtZW50cy5cbiAqIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSB2YWx1ZXMgb2YgYWxsIGtleXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuICovXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gIH0gZWxzZSBpZiAoJ2NvbnRhaW5zJyBpbiBvdXRlck5vZGUpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jb250YWluc05vZGUuanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vaXNOb2RlJyk7XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gdGV4dCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0Tm9kZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc1RleHROb2RlLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICB2YXIgZG9jID0gb2JqZWN0ID8gb2JqZWN0Lm93bmVyRG9jdW1lbnQgfHwgb2JqZWN0IDogZG9jdW1lbnQ7XG4gIHZhciBkZWZhdWx0VmlldyA9IGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG4gIHJldHVybiAhIShvYmplY3QgJiYgKHR5cGVvZiBkZWZhdWx0Vmlldy5Ob2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgZGVmYXVsdFZpZXcuTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOb2RlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qc1xuLy8gbW9kdWxlIGlkID0gMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlIGlucHV0L3RleHRhcmVhIHRvIGZvY3VzXG4gKi9cblxuZnVuY3Rpb24gZm9jdXNOb2RlKG5vZGUpIHtcbiAgLy8gSUU4IGNhbiB0aHJvdyBcIkNhbid0IG1vdmUgZm9jdXMgdG8gdGhlIGNvbnRyb2wgYmVjYXVzZSBpdCBpcyBpbnZpc2libGUsXG4gIC8vIG5vdCBlbmFibGVkLCBvciBvZiBhIHR5cGUgdGhhdCBkb2VzIG5vdCBhY2NlcHQgdGhlIGZvY3VzLlwiIGZvciBhbGwga2luZHMgb2ZcbiAgLy8gcmVhc29ucyB0aGF0IGFyZSB0b28gZXhwZW5zaXZlIGFuZCBmcmFnaWxlIHRvIHRlc3QuXG4gIHRyeSB7XG4gICAgbm9kZS5mb2N1cygpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvY3VzTm9kZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9mb2N1c05vZGUuanNcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLy8gQGZsb3dcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSdcbmltcG9ydCBTbGlkZSBmcm9tICcuL3NsaWRlJ1xuaW1wb3J0IHtcbiAgYW5pbWF0ZSxcbiAgaGFzT25nb2luZ0ludGVyYWN0aW9uLFxuICBpbmNsdWRlcyxcbiAgaXNXaG9sbHlJblZpZXcsXG4gIG5vb3AsXG4gIG5vcm1hbGl6ZUluZGV4LFxuICBvbixcbiAgb25TY3JvbGxFbmQsXG4gIG9uU2Nyb2xsU3RhcnQsXG4gIG9uU3dpcGUsXG4gIHZhbHVlc1xufSBmcm9tICcuL3V0aWxzJ1xuXG5leHBvcnQgdHlwZSBXaGlybGlnaWdQcm9wcyA9IHt8XG4gIGFmdGVyU2xpZGU6IChudW1iZXIpID0+IHZvaWQsXG4gIGFuaW1hdGlvbkR1cmF0aW9uOiBudW1iZXIsXG4gIGJlZm9yZVNsaWRlOiAobnVtYmVyKSA9PiB2b2lkLFxuICBjaGlsZHJlbjogUmVhY3QuQ2hpbGRyZW5BcnJheTwqPixcbiAgY2xhc3NOYW1lOiBzdHJpbmcsXG4gIGVhc2luZzogKG51bWJlcikgPT4gbnVtYmVyLFxuICBndXR0ZXI6IHN0cmluZyxcbiAgaW5maW5pdGU6IGJvb2wsXG4gIG5leHRLZXlzOiBzdHJpbmdbXSxcbiAgb25TbGlkZUNsaWNrOiAoU3ludGhldGljTW91c2VFdmVudDwqPikgPT4gdm9pZCxcbiAgcHJldktleXM6IHN0cmluZ1tdLFxuICBwcmV2ZW50QXV0b0NvcnJlY3Q6IGJvb2wsXG4gIHByZXZlbnRTY3JvbGw6IGJvb2wsXG4gIHByZXZlbnRTd2lwZTogYm9vbCxcbiAgc2xpZGVCeTogbnVtYmVyLFxuICBzbGlkZUNsYXNzOiBzdHJpbmcsXG4gIHNsaWRlVG86IG51bWJlcixcbiAgc25hcFRvU2xpZGU6IGJvb2wsXG4gIHN0YXJ0QXQ6IG51bWJlcixcbiAgc3R5bGU6IE9iamVjdCxcbiAgdmlzaWJsZVNsaWRlczogbnVtYmVyXG58fVxuXG5leHBvcnQgdHlwZSBXaGlybGlnaWdTdGF0ZSA9IHtcbiAgYWN0aXZlSW5kZXg6IG51bWJlcixcbiAgaXNBbmltYXRpbmc6IGJvb2wsXG4gIHNsaWRlQnk6IG51bWJlcixcbiAgdmlzaWJsZVNsaWRlczogbnVtYmVyXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdoaXJsaWdpZyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxXaGlybGlnaWdQcm9wcywgV2hpcmxpZ2lnU3RhdGU+IHtcbiAgRE9NTm9kZTogRWxlbWVudFxuICBjYW5TZWxmQ29ycmVjdDogYm9vbFxuICBjaGlsZENvdW50OiBudW1iZXJcbiAgZXZlbnRMaXN0ZW5lcnM6IEV2ZW50TGlzdGVuZXJbXVxuICBpc0ludGVyYWN0aW5nOiAoKSA9PiBib29sXG4gIGlzU2Nyb2xsaW5nOiBib29sXG4gIHdoaXJsaWdpZzogYW55XG4gIG5leHQ6IChhbnkpID0+IFByb21pc2U8Kj5cbiAgcHJldjogKGFueSkgPT4gUHJvbWlzZTwqPlxuICBzbGlkZVRvOiAobnVtYmVyLCA/eyBpbW1lZGlhdGU6IGJvb2wgfSkgPT4gUHJvbWlzZTwqPlxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgYWZ0ZXJTbGlkZTogbm9vcCxcbiAgICBhbmltYXRpb25EdXJhdGlvbjogNTAwLFxuICAgIGJlZm9yZVNsaWRlOiBub29wLFxuICAgIGd1dHRlcjogJzFlbScsXG4gICAgbmV4dEtleXM6IFsgJ0Fycm93UmlnaHQnIF0sXG4gICAgb25TbGlkZUNsaWNrOiBub29wLFxuICAgIHByZXZLZXlzOiBbICdBcnJvd0xlZnQnIF0sXG4gICAgcHJldmVudEF1dG9Db3JyZWN0OiBmYWxzZSxcbiAgICBwcmV2ZW50U2Nyb2xsOiBmYWxzZSxcbiAgICBwcmV2ZW50U3dpcGU6IGZhbHNlLFxuICAgIHNuYXBUb1NsaWRlOiBmYWxzZSxcbiAgICBzdGFydEF0OiAwLFxuICAgIHN0eWxlOiB7fVxuICB9XG5cbiAgY29uc3RydWN0b3IgKHByb3BzOiBXaGlybGlnaWdQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGFjdGl2ZUluZGV4OiBwcm9wcy5zdGFydEF0LFxuICAgICAgaXNBbmltYXRpbmc6IGZhbHNlLFxuICAgICAgdmlzaWJsZVNsaWRlczogdGhpcy5wcm9wcy52aXNpYmxlU2xpZGVzIHx8IDAsXG4gICAgICBzbGlkZUJ5OiB0aGlzLnByb3BzLnNsaWRlQnkgfHwgdGhpcy5wcm9wcy52aXNpYmxlU2xpZGVzIHx8IDBcbiAgICB9XG5cbiAgICAvLyBXZSBjYW4ndCBkbyBhcnJvdyBmdW5jdGlvbiBwcm9wZXJ0aWVzIGZvciB0aGVzZSBzaW5jZVxuICAgIC8vIHdlIGFyZSBwYXNzaW5nIHRoZW0gdG8gdGhlIGNvbnN1bWluZyBjb21wb25lbnQgYW5kIHdlXG4gICAgLy8gcmVxdWlyZSB0aGUgcHJvcGVyIGNvbnRleHRcbiAgICB0aGlzLm5leHQgPSB0aGlzLm5leHQuYmluZCh0aGlzKVxuICAgIHRoaXMucHJldiA9IHRoaXMucHJldi5iaW5kKHRoaXMpXG4gICAgdGhpcy5zbGlkZVRvID0gdGhpcy5zbGlkZVRvLmJpbmQodGhpcylcbiAgfVxuXG4gIGV2ZW50TGlzdGVuZXJzID0gW11cbiAgaXNTY3JvbGxpbmcgPSBmYWxzZVxuICBjYW5TZWxmQ29ycmVjdCA9ICgpID0+XG4gICAgIXRoaXMucHJvcHMucHJldmVudEF1dG9Db3JyZWN0ICYmXG4gICAgIXRoaXMuc3RhdGUuaXNBbmltYXRpbmcgJiZcbiAgICAhdGhpcy5pc1Njcm9sbGluZyAmJlxuICAgICF0aGlzLmlzSW50ZXJhY3RpbmcoKVxuXG4gIHNob3VsZFNlbGZDb3JyZWN0ID0gKCkgPT4gdGhpcy5wcm9wcy5zbmFwVG9TbGlkZSAmJiB0aGlzLmNhblNlbGZDb3JyZWN0KClcblxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHRoaXMuRE9NTm9kZSA9IGZpbmRET01Ob2RlKHRoaXMud2hpcmxpZ2lnKVxuICAgIC8vICRGbG93Rml4TWVcbiAgICB0aGlzLmlzSW50ZXJhY3RpbmcgPSBoYXNPbmdvaW5nSW50ZXJhY3Rpb24odGhpcy5ET01Ob2RlKVxuXG4gICAgLy8gVGhlc2UgYXJlIG5vdCBhIHBhcnQgb2YgY29tcG9uZW50IHN0YXRlIHNpbmNlIHdlIGRvbid0IHdhbnRcbiAgICAvLyBpbmN1cmUgdGhlIG92ZXJoZWFkIG9mIGNhbGxpbmcgc2V0U3RhdGUuIFRoZXkgYXJlIGVpdGhlciBjYWNoZWRcbiAgICAvLyB2YWx1ZXMgb3Igc3RhdGUgb25seSB0aGUgb25TY3JvbGxFbmQgY2FsbGJhY2sgY2FyZXMgYWJvdXQgYW5kXG4gICAgLy8gYXJlIG5vdCBpbXBvcnRhbnQgdG8gdGhlIHJlbmRlcmluZyBvZiB0aGUgY29tcG9uZW50LlxuICAgIHRoaXMuY2hpbGRDb3VudCA9ICh0aGlzLndoaXJsaWdpZyAmJiB0aGlzLndoaXJsaWdpZy5jaGlsZHJlbikgPyB0aGlzLndoaXJsaWdpZy5jaGlsZHJlbi5sZW5ndGggOiAwXG5cbiAgICBjb25zdCBzbGlkZUJ5ID0ge1xuICAgICAgbGVmdDogKCkgPT4gLXRoaXMuc3RhdGUuc2xpZGVCeSxcbiAgICAgIHJpZ2h0OiAoKSA9PiB0aGlzLnN0YXRlLnNsaWRlQnksXG4gICAgICB1cDogKCkgPT4gMCxcbiAgICAgIGRvd246ICgpID0+IDBcbiAgICB9XG5cbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzID0gW1xuICAgICAgLi4udGhpcy5ldmVudExpc3RlbmVycyxcblxuICAgICAgb25TY3JvbGxTdGFydCgoKSA9PiB7IHRoaXMuaXNTY3JvbGxpbmcgPSB0cnVlIH0pLFxuXG4gICAgICBvbigndG91Y2hzdGFydCcpKCgpID0+IHsgdGhpcy5pc1Njcm9sbGluZyA9IHRydWUgfSkodGhpcy53aGlybGlnaWcpLFxuXG4gICAgICBvblNjcm9sbEVuZCgoKSA9PiB7XG4gICAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSBmYWxzZVxuICAgICAgICBpZiAodGhpcy5jYW5TZWxmQ29ycmVjdCgpKSB7XG4gICAgICAgICAgaWYgKHRoaXMucHJvcHMuc25hcFRvU2xpZGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2xpZGVUbyh0aGlzLmdldE5lYXJlc3RTbGlkZUluZGV4KCkpLmNhdGNoKG5vb3ApXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuYWZ0ZXJTbGlkZSh0aGlzLmdldE5lYXJlc3RTbGlkZUluZGV4KCkpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7IHRhcmdldDogdGhpcy5ET01Ob2RlIH0pLFxuXG4gICAgICBvbigndG91Y2hlbmQnKSgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmNhblNlbGZDb3JyZWN0KCkpIHtcbiAgICAgICAgICB0aGlzLnByb3BzLnNuYXBUb1NsaWRlXG4gICAgICAgICAgICA/IHRoaXMuc2xpZGVUbyh0aGlzLmdldE5lYXJlc3RTbGlkZUluZGV4KCkpLmNhdGNoKG5vb3ApXG4gICAgICAgICAgICA6IHRoaXMucHJvcHMuYWZ0ZXJTbGlkZSh0aGlzLmdldE5lYXJlc3RTbGlkZUluZGV4KCkpXG4gICAgICAgIH1cbiAgICAgIH0pKHRoaXMud2hpcmxpZ2lnKSxcblxuICAgICAgb25Td2lwZSgoZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5wcm9wcy5wcmV2ZW50U3dpcGUgJiYgdGhpcy5wcm9wcy5zbmFwVG9TbGlkZSkge1xuICAgICAgICAgIHRoaXMuc2xpZGVUbyh0aGlzLnN0YXRlLmFjdGl2ZUluZGV4ICsgKHNsaWRlQnlbZGlyZWN0aW9uXSgpKSkuY2F0Y2gobm9vcClcbiAgICAgICAgfVxuICAgICAgfSkodGhpcy53aGlybGlnaWcpXG5cbiAgICBdXG5cbiAgICB0aGlzLnNsaWRlVG8odGhpcy5wcm9wcy5zdGFydEF0LCB7IGltbWVkaWF0ZTogdHJ1ZSB9KS5jYXRjaChub29wKVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMuZm9yRWFjaCgoZm4pID0+IHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiBmbigpKVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAoeyBzbGlkZUJ5LCB2aXNpYmxlU2xpZGVzIH06IFdoaXJsaWdpZ1Byb3BzKSB7XG4gICAgaWYgKHNsaWRlQnkgIT09IHRoaXMucHJvcHMuc2xpZGVCeSB8fCB2aXNpYmxlU2xpZGVzICE9PSB0aGlzLnByb3BzLnZpc2libGVTbGlkZXMpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBzbGlkZUJ5OiBzbGlkZUJ5IHx8IHZpc2libGVTbGlkZXMgfHwgMSB9KVxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZSAocHJldlByb3BzOiBXaGlybGlnaWdQcm9wcykge1xuICAgIHRoaXMuY2hpbGRDb3VudCA9ICh0aGlzLndoaXJsaWdpZyAmJiB0aGlzLndoaXJsaWdpZy5jaGlsZHJlbikgPyB0aGlzLndoaXJsaWdpZy5jaGlsZHJlbi5sZW5ndGggOiAwXG5cbiAgICBpZiAodGhpcy5zaG91bGRTZWxmQ29ycmVjdCgpKSB7XG4gICAgICBjb25zdCBuZWFyZXN0U2xpZGVJbmRleCA9IHRoaXMuZ2V0TmVhcmVzdFNsaWRlSW5kZXgoKVxuICAgICAgbmVhcmVzdFNsaWRlSW5kZXggIT09IHRoaXMuc3RhdGUuYWN0aXZlSW5kZXggJiYgdGhpcy5zbGlkZVRvKHRoaXMuZ2V0TmVhcmVzdFNsaWRlSW5kZXgoKSkuY2F0Y2gobm9vcClcbiAgICB9XG5cbiAgICBpZiAocHJldlByb3BzLnNsaWRlVG8gIT09IHRoaXMucHJvcHMuc2xpZGVUbykge1xuICAgICAgdGhpcy5zbGlkZVRvKHRoaXMucHJvcHMuc2xpZGVUbykuY2F0Y2gobm9vcClcbiAgICB9XG4gIH1cblxuICBoYW5kbGVLZXlVcCA9ICgobmV4dEtleXMsIHByZXZLZXlzKSA9PiAoeyBrZXkgfTogU3ludGhldGljS2V5Ym9hcmRFdmVudDwqPik6IGJvb2wgPT4ge1xuICAgIGNvbnN0IGlzTmV4dCA9IGluY2x1ZGVzKGtleSwgbmV4dEtleXMpXG4gICAgY29uc3QgaXNQcmV2ID0gaW5jbHVkZXMoa2V5LCBwcmV2S2V5cylcbiAgICB0aGlzLnNldFN0YXRlKHsgaXNBbmltYXRpbmc6IHRydWUgfSlcbiAgICBpZiAoaXNOZXh0KSB0aGlzLm5leHQoKS5jYXRjaChub29wKVxuICAgIGlmIChpc1ByZXYpIHRoaXMucHJldigpLmNhdGNoKG5vb3ApXG4gICAgcmV0dXJuIGZhbHNlXG4gIH0pKHRoaXMucHJvcHMubmV4dEtleXMsIHRoaXMucHJvcHMucHJldktleXMpXG5cbiAgLy8gaXNBbmltYXRpbmcgc3RhdGUgaXMgdGhlIG9ubHkgaW1wb3J0YW50IHN0YXRlIHZhbHVlIHRvIHRoZSByZW5kZXJpbmcgb2YgdGhpcyBjb21wb25lbnRcbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlIChuZXh0UHJvcHM6IFdoaXJsaWdpZ1Byb3BzLCB7IGlzQW5pbWF0aW5nIH06IFdoaXJsaWdpZ1N0YXRlKTogYm9vbCB7XG4gICAgY29uc3QgcHJvcFZhbHVlcyA9IFsuLi52YWx1ZXModGhpcy5wcm9wcyksIHRoaXMuc3RhdGUuaXNBbmltYXRpbmddXG4gICAgY29uc3QgbmV4dFByb3BWYWx1ZXMgPSBbLi4udmFsdWVzKG5leHRQcm9wcyksIGlzQW5pbWF0aW5nXVxuICAgIHJldHVybiAhbmV4dFByb3BWYWx1ZXMuZXZlcnkoKHZhbCwgaSkgPT4gdmFsID09PSBwcm9wVmFsdWVzW2ldKVxuICB9XG5cbiAgZ2V0UGFydGlhbGx5T2JzY3VyZWRTbGlkZXMgPSAoKTogWyBudW1iZXIsIG51bWJlciBdID0+IHtcbiAgICBjb25zdCB7IHdoaXJsaWdpZyB9ID0gdGhpc1xuICAgIGNvbnN0IGZpbmRGaXJzdE9ic2N1cmVkQ2hpbGRJbmRleCA9IFsgLi4ud2hpcmxpZ2lnLmNoaWxkcmVuIF1cbiAgICAgIC5maW5kSW5kZXgoKGNoaWxkLCBpLCBjaGlsZHJlbikgPT5cbiAgICAgICAgIWlzV2hvbGx5SW5WaWV3KHdoaXJsaWdpZykoY2hpbGQpICYmIGlzV2hvbGx5SW5WaWV3KHdoaXJsaWdpZykoY2hpbGRyZW5baSArIDFdKSlcblxuICAgIGNvbnN0IGZpcnN0T2JzY3VyZWRDaGlsZEluZGV4ID0gTWF0aC5tYXgoZmluZEZpcnN0T2JzY3VyZWRDaGlsZEluZGV4LCAwKVxuXG4gICAgY29uc3QgZmluZExhc3RPYnNjdXJlZENoaWxkSW5kZXggPSBbIC4uLndoaXJsaWdpZy5jaGlsZHJlbiBdXG4gICAgICAuZmluZEluZGV4KChjaGlsZCwgaSwgY2hpbGRyZW4pID0+XG4gICAgICAgICFpc1dob2xseUluVmlldyh3aGlybGlnaWcpKGNoaWxkKSAmJiBpc1dob2xseUluVmlldyh3aGlybGlnaWcpKGNoaWxkcmVuW2kgLSAxXSkpXG5cbiAgICBjb25zdCBsYXN0T2JzY3VyZWRDaGlsZEluZGV4ID0gTWF0aC5tYXgoZmluZExhc3RPYnNjdXJlZENoaWxkSW5kZXgsIDApIHx8IHdoaXJsaWdpZy5jaGlsZHJlbi5sZW5ndGggLSAxXG5cbiAgICByZXR1cm4gWyBmaXJzdE9ic2N1cmVkQ2hpbGRJbmRleCwgbGFzdE9ic2N1cmVkQ2hpbGRJbmRleCBdXG4gIH1cblxuICBuZXh0ICgpOiBQcm9taXNlPCo+IHtcbiAgICBjb25zdCB7IGNoaWxkQ291bnQsIHByb3BzLCBzdGF0ZSB9ID0gdGhpc1xuICAgIGNvbnN0IHsgYWN0aXZlSW5kZXgsIHNsaWRlQnkgfSA9IHN0YXRlXG4gICAgY29uc3QgeyBpbmZpbml0ZSB9ID0gcHJvcHNcbiAgICBjb25zdCBmaXJzdEluZGV4ID0gMFxuICAgIGNvbnN0IGxhc3RJbmRleCA9IGNoaWxkQ291bnQgLSBzbGlkZUJ5XG5cbiAgICBpZiAoIXNsaWRlQnkpIHtcbiAgICAgIGNvbnN0IFtfLCBuZXh0U2xpZGVdID0gdGhpcy5nZXRQYXJ0aWFsbHlPYnNjdXJlZFNsaWRlcygpXG4gICAgICBjb25zdCBuZXh0SW5maW50ZVNsaWRlID0gKG5leHRTbGlkZSA9PT0gY2hpbGRDb3VudCAtIDEpID8gMCA6IG5leHRTbGlkZVxuICAgICAgcmV0dXJuIHRoaXMuc2xpZGVUbyhpbmZpbml0ZSA/IG5leHRJbmZpbnRlU2xpZGUgOiBuZXh0U2xpZGUpXG4gICAgfVxuXG4gICAgY29uc3QgbmV4dEFjdGl2ZUNhbmRpZGF0ZSA9IGFjdGl2ZUluZGV4ICsgc2xpZGVCeVxuICAgIGNvbnN0IG5leHRBY3RpdmUgPSBNYXRoLm1pbihuZXh0QWN0aXZlQ2FuZGlkYXRlLCBsYXN0SW5kZXgpXG4gICAgY29uc3QgbmV4dEFjdGl2ZUluZmluaXRlID0gKGFjdGl2ZUluZGV4ID09PSBsYXN0SW5kZXgpID8gZmlyc3RJbmRleCA6IG5leHRBY3RpdmVcbiAgICByZXR1cm4gdGhpcy5zbGlkZVRvKGluZmluaXRlID8gbmV4dEFjdGl2ZUluZmluaXRlIDogbmV4dEFjdGl2ZSlcbiAgfVxuXG4gIHByZXYgKCk6IFByb21pc2U8Kj4ge1xuICAgIGNvbnN0IHsgY2hpbGRDb3VudCwgc3RhdGUsIHByb3BzIH0gPSB0aGlzXG4gICAgY29uc3QgeyBhY3RpdmVJbmRleCwgc2xpZGVCeSB9ID0gc3RhdGVcbiAgICBjb25zdCB7IGluZmluaXRlIH0gPSBwcm9wc1xuICAgIGNvbnN0IGZpcnN0SW5kZXggPSAwXG4gICAgY29uc3QgbGFzdEluZGV4ID0gY2hpbGRDb3VudCAtIHNsaWRlQnlcblxuICAgIGlmICghc2xpZGVCeSkge1xuICAgICAgY29uc3QgcHJldlNsaWRlID0gTWF0aC5tYXgoYWN0aXZlSW5kZXggLSAxLCBmaXJzdEluZGV4KVxuICAgICAgY29uc3QgcHJldkluZmludGVTbGlkZSA9IChwcmV2U2xpZGUgPT09IGFjdGl2ZUluZGV4KSA/IGNoaWxkQ291bnQgLSAxIDogcHJldlNsaWRlXG4gICAgICByZXR1cm4gdGhpcy5zbGlkZVRvKGluZmluaXRlID8gcHJldkluZmludGVTbGlkZSA6IHByZXZTbGlkZSlcbiAgICB9XG5cbiAgICBjb25zdCBuZXh0QWN0aXZlID0gTWF0aC5tYXgoYWN0aXZlSW5kZXggLSBzbGlkZUJ5LCBmaXJzdEluZGV4KVxuICAgIGNvbnN0IG5leHRBY3RpdmVJbmZpbml0ZSA9IChhY3RpdmVJbmRleCA9PT0gZmlyc3RJbmRleCkgPyBsYXN0SW5kZXggOiBuZXh0QWN0aXZlXG4gICAgcmV0dXJuIHRoaXMuc2xpZGVUbyhpbmZpbml0ZSA/IG5leHRBY3RpdmVJbmZpbml0ZSA6IG5leHRBY3RpdmUpXG4gIH1cblxuICBzbGlkZVRvIChpbmRleDogbnVtYmVyLCB7IGltbWVkaWF0ZSA9IGZhbHNlIH06IHsgaW1tZWRpYXRlOiBib29sIH0gPSB7fSk6IFByb21pc2U8Kj4ge1xuICAgIGlmICh0aGlzLmNoaWxkQ291bnQgPT09IDApIHJldHVybiBQcm9taXNlLnJlamVjdCgnTm8gY2hpbGRyZW4gdG8gc2xpZGUgdG8nKVxuICAgIGlmICghdGhpcy53aGlybGlnaWcpIHJldHVybiBQcm9taXNlLnJlamVjdCgnVGhlIFdoaXJsaWdpZyBpcyBub3QgbW91bnRlZCcpXG4gICAgY29uc3QgeyBhZnRlclNsaWRlLCBiZWZvcmVTbGlkZSwgZWFzaW5nLCBhbmltYXRpb25EdXJhdGlvbjogZHVyYXRpb24sIGluZmluaXRlLCBwcmV2ZW50U2Nyb2xsIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyBjaGlsZHJlbiwgc2Nyb2xsTGVmdCB9ID0gdGhpcy53aGlybGlnaWdcbiAgICBjb25zdCBzbGlkZUluZGV4ID0gbm9ybWFsaXplSW5kZXgoaW5kZXgsIHRoaXMuY2hpbGRDb3VudCwgaW5maW5pdGUpXG4gICAgY29uc3Qgc3RhcnRpbmdJbmRleCA9IHRoaXMuc3RhdGUuYWN0aXZlSW5kZXhcbiAgICBjb25zdCBkZWx0YSA9IGNoaWxkcmVuW3NsaWRlSW5kZXhdLm9mZnNldExlZnQgLSBzY3JvbGxMZWZ0XG4gICAgaWYgKHN0YXJ0aW5nSW5kZXggIT09IHNsaWRlSW5kZXgpIHtcbiAgICAgIGJlZm9yZVNsaWRlKGluZGV4KVxuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHsgaXNBbmltYXRpbmc6IHRydWUsIGFjdGl2ZUluZGV4OiBzbGlkZUluZGV4IH0pXG4gICAgcmV0dXJuIChuZXcgUHJvbWlzZSgocmVzLCBfKTogdm9pZCA9PiB7XG4gICAgICBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICAgIHRoaXMud2hpcmxpZ2lnLnNjcm9sbExlZnQgPSBjaGlsZHJlbltzbGlkZUluZGV4XS5vZmZzZXRMZWZ0XG4gICAgICAgIHJldHVybiByZXMoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxPdmVyZmxvd1ggPSBwcmV2ZW50U2Nyb2xsID8gJ2hpZGRlbicgOiAnYXV0bydcbiAgICAgICAgY29uc3QgcHJvcCA9ICdzY3JvbGxMZWZ0J1xuICAgICAgICByZXR1cm4gcmVzKGFuaW1hdGUodGhpcy53aGlybGlnaWcsIHsgcHJvcCwgZGVsdGEsIGVhc2luZywgZHVyYXRpb24sIG9yaWdpbmFsT3ZlcmZsb3dYIH0pKSAvLyAuY2F0Y2gobm9vcClcbiAgICAgIH1cbiAgICB9KSlcbiAgICAgIC50aGVuKCgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzQW5pbWF0aW5nOiBmYWxzZSB9KVxuICAgICAgICBpZiAoc3RhcnRpbmdJbmRleCAhPT0gc2xpZGVJbmRleCkge1xuICAgICAgICAgIHJldHVybiBhZnRlclNsaWRlKHNsaWRlSW5kZXgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKF8pID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzQW5pbWF0aW5nOiBmYWxzZSB9KVxuICAgICAgfSlcbiAgfVxuXG4gIGdldE5lYXJlc3RTbGlkZUluZGV4ID0gKCk6IG51bWJlciA9PiB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgc2Nyb2xsTGVmdCB9ID0gdGhpcy53aGlybGlnaWdcbiAgICBjb25zdCBvZmZzZXRzID0gW10uc2xpY2UuY2FsbChjaGlsZHJlbikubWFwKCh7IG9mZnNldExlZnQgfSkgPT4gTWF0aC5hYnMob2Zmc2V0TGVmdCAtIHNjcm9sbExlZnQpKVxuICAgIHJldHVybiBvZmZzZXRzLmluZGV4T2YoTWF0aC5taW4oLi4ub2Zmc2V0cykpXG4gIH1cblxuICBzZXRXaGlybGlnaWdSZWYgPSAocjogUmVhY3QkRWxlbWVudFJlZjwqPikgPT4ge1xuICAgIHRoaXMud2hpcmxpZ2lnID0gclxuICB9XG5cbiAgcmVuZGVyICgpOiBSZWFjdC5Ob2RlIHtcbiAgICBjb25zdCB7XG4gICAgICBhZnRlclNsaWRlLFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICBiZWZvcmVTbGlkZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZWFzaW5nLFxuICAgICAgaW5maW5pdGUsXG4gICAgICBndXR0ZXIsXG4gICAgICBuZXh0S2V5cyxcbiAgICAgIHByZXZLZXlzLFxuICAgICAgcHJldmVudFNjcm9sbCxcbiAgICAgIHByZXZlbnRBdXRvQ29ycmVjdCxcbiAgICAgIHByZXZlbnRTd2lwZSxcbiAgICAgIHNuYXBUb1NsaWRlLFxuICAgICAgb25TbGlkZUNsaWNrLFxuICAgICAgc2xpZGVDbGFzcyxcbiAgICAgIHNsaWRlVG8sXG4gICAgICBzbGlkZUJ5LFxuICAgICAgc3RhcnRBdCxcbiAgICAgIHN0eWxlLFxuICAgICAgdmlzaWJsZVNsaWRlcyxcbiAgICAgIC4uLnByb3BzXG4gICAgfSA9IHRoaXMucHJvcHNcblxuICAgIGNvbnN0IHByZXZlbnRTY3JvbGxpbmcgPSBwcmV2ZW50U2Nyb2xsID8gJ2hpZGRlbicgOiAnYXV0bydcbiAgICBjb25zdCBzdHlsZXMgPSB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4RmxvdzogJ3JvdyBub3dyYXAnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgIG92ZXJmbG93WDogcHJldmVudFNjcm9sbGluZyxcbiAgICAgIG1zT3ZlcmZsb3dTdHlsZTogJy1tcy1hdXRvaGlkaW5nLXNjcm9sbGJhcicsIC8vIGNocm9tZSBsaWtlIHNjcm9sbGJhciBleHBlcmllbmNlIGZvciBJRS9FZGdlXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJywgLy8gbWFrZXMgLndoaXJsaWdpZyBhbiBvZmZzZXQgcGFyZW50XG4gICAgICB0cmFuc2l0aW9uOiAnYWxsIC4yNXMgZWFzZS1pbi1xdWludCcsXG4gICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJ1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICBzdHlsZT17eyAuLi5zdHlsZSwgLi4uc3R5bGVzIH19XG4gICAgICAgIHJlZj17dGhpcy5zZXRXaGlybGlnaWdSZWZ9XG4gICAgICAgIHRhYkluZGV4PVwiMFwiXG4gICAgICAgIG9uS2V5VXA9e3RoaXMuaGFuZGxlS2V5VXB9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgID5cbiAgICAgICAge1xuICAgICAgICAgIC8vIFdlIGZpcnN0IHBhc3MgdGhlIHNsaWRlIGNvbnRyb2wgZnVuY3Rpb25zIHRvIHRoZSBmdW5jdGlvbiBjaGlsZC5cbiAgICAgICAgICAvLyBUaGlzIHdpbGwgcmV0dXJuIHRoZSBgY2hpbGRyZW5gIHRoYXQgd2lsbCBiZSB0aGUgY29udGVudCBvZiB0aGUgaW5kaXZpZHVhbCBzbGlkZXMuXG4gICAgICAgICAgLy8gVGhlbiB3ZSB3cmFwIHRoZSBzbGlkZSBjb250ZW50IGluIGEgc2xpZGUgY29tcG9uZW50IHRvIGFkZCB0aGUgZnVuY3Rpb25hbGl0eSB3ZSBuZWVkLlxuICAgICAgICB9XG4gICAgICAgIHtSZWFjdC5DaGlsZHJlbi5tYXAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4odGhpcy5uZXh0LCB0aGlzLnByZXYpIDogY2hpbGRyZW4sIChjaGlsZCwgaSkgPT4gKFxuICAgICAgICAgIDxTbGlkZVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtzbGlkZUNsYXNzfVxuICAgICAgICAgICAga2V5PXtgc2xpZGUtJHtpfWB9XG4gICAgICAgICAgICBiYXNpcz17dmlzaWJsZVNsaWRlcyA/IGBjYWxjKCgxMDAlIC0gKCR7Z3V0dGVyfSAqICR7dmlzaWJsZVNsaWRlcyAtIDF9KSkgLyAke3Zpc2libGVTbGlkZXN9KWAgOiAnYXV0byd9XG4gICAgICAgICAgICBndXR0ZXI9e2kgPiAwID8gZ3V0dGVyIDogJyd9XG4gICAgICAgICAgICBvbkNsaWNrPXtvblNsaWRlQ2xpY2t9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2NoaWxkfVxuICAgICAgICAgIDwvU2xpZGU+XG4gICAgICAgICkpfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvd2hpcmxpZ2lnLmpzIiwiLy8gQGZsb3dcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmV4cG9ydCB0eXBlIFNsaWRlUHJvcHMgPSB7XG4gIGJhc2lzOiBzdHJpbmcsXG4gIGNoaWxkcmVuOiBSZWFjdC5Ob2RlLFxuICBjbGFzc05hbWU6IHN0cmluZyxcbiAgZ3V0dGVyOiBzdHJpbmdcbn1cblxuY29uc3QgU2xpZGUgPSAoe1xuICBiYXNpcyA9ICcxMDAlJyxcbiAgZ3V0dGVyID0gJzFlbScsXG4gIGNsYXNzTmFtZSA9ICcnLFxuICBjaGlsZHJlbixcbiAgLi4ucHJvcHNcbn06IFNsaWRlUHJvcHMpID0+IChcbiAgPGRpdlxuICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgIHN0eWxlPXt7XG4gICAgICBmbGV4OiAnMCAwIGF1dG8nLFxuICAgICAgd2lkdGg6IGJhc2lzLFxuICAgICAgbWFyZ2luTGVmdDogZ3V0dGVyXG4gICAgfX1cbiAgICB7Li4ucHJvcHN9XG4gID5cbiAgICB7Y2hpbGRyZW59XG4gIDwvZGl2PlxuKVxuXG5leHBvcnQgZGVmYXVsdCBTbGlkZVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NsaWRlLmpzIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJ1xuaW1wb3J0IHsgaW5jbHVkZXMsIG5vb3AgfSBmcm9tICcuL3NyYy91dGlscydcbmltcG9ydCBXIGZyb20gJy4vc3JjL3doaXJsaWdpZydcbmltcG9ydCB7IGFycmF5LCBib29sLCBudW1iZXIsIHN0cmluZywgZnVuYyB9IGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgbWFya2VkIGZyb20gJ21hcmtlZCdcblxuY29uc3QgaXNDaGVja2FibGUgPSAodHlwZSkgPT4gaW5jbHVkZXModHlwZSwgWydjaGVja2JveCcsICdyYWRpbyddKVxuY29uc3QgY29lcmNlVGFibGUgPSB7XG4gIG51bWJlcjogTnVtYmVyLFxuICBmdW5jOiAoZm4pID0+IEZ1bmN0aW9uKGZuKSgpLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGNoZWNrYm94OiBCb29sZWFuLFxuICByYWRpbzogQm9vbGVhblxufVxuY29uc3QgY29lcmNlVmFsdWVUb1R5cGUgPSAoeyB0eXBlLCB2YWx1ZSB9KSA9PiB7XG4gIGNvbnN0IGNvZXJjZXIgPSB0eXBlIGluIGNvZXJjZVRhYmxlID8gY29lcmNlVGFibGVbdHlwZV0gOiAoaWRlbnQpID0+IGlkZW50XG4gIHJldHVybiBjb2VyY2VyKHZhbHVlKVxufVxuXG5jbGFzcyBTbGlkZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGFmdGVyU2xpZGU6IGZ1bmMsXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IG51bWJlcixcbiAgICBiZWZvcmVTbGlkZTogZnVuYyxcbiAgICBjaGlsZHJlbjogYXJyYXksXG4gICAgY2xhc3NOYW1lOiBzdHJpbmcsXG4gICAgZWFzaW5nOiBmdW5jLFxuICAgIGd1dHRlcjogc3RyaW5nLFxuICAgIGluZmluaXRlOiBib29sLFxuICAgIG9uU2xpZGVDbGljazogZnVuYyxcbiAgICBwcmV2ZW50U2Nyb2xsOiBib29sLFxuICAgIHNsaWRlQnk6IG51bWJlcixcbiAgICBzbGlkZUNsYXNzOiBzdHJpbmcsXG4gICAgc2xpZGVUbzogbnVtYmVyLFxuICAgIHNuYXBUb1NsaWRlOiBib29sLFxuICAgIHN0YXJ0QXQ6IG51bWJlcixcbiAgICB2aXNpYmxlU2xpZGVzOiBudW1iZXJcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgYWZ0ZXJTbGlkZTogKG5ld0luZGV4KSA9PiBjb25zb2xlLmxvZyhgc2xpZCB0byBpbmRleCAke25ld0luZGV4fWApLFxuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAzMDAsXG4gICAgYmVmb3JlU2xpZGU6IChuZXdJbmRleCkgPT4gY29uc29sZS5sb2coYGFib3V0IHRvIHNsaWRlIHRvIGluZGV4ICR7bmV3SW5kZXh9YCksXG4gICAgY2xhc3NOYW1lOiAnd2hpcmxpZ2lnJyxcbiAgICBndXR0ZXI6ICcxZW0nLFxuICAgIG9uU2xpZGVDbGljazogKCkgPT4geyBjb25zb2xlLmxvZygnWW91IGNsaWNrZWQgb24gYSBzbGlkZSEnKSB9LFxuICAgIGVhc2luZzogKHQpID0+IHQsXG4gICAgaW5maW5pdGU6IGZhbHNlLFxuICAgIHByZXZlbnRTY3JvbGw6IGZhbHNlLFxuICAgIHNsaWRlQ2xhc3M6ICdzbGlkZUNsYXNzTmFtZScsXG4gICAgc2xpZGVCeTogMCxcbiAgICBzbGlkZVRvOiAwLFxuICAgIHNuYXBUb1NsaWRlOiBmYWxzZSxcbiAgICBzdGFydEF0OiAwLFxuICAgIHZpc2libGVTbGlkZXM6IDBcbiAgfVxuXG4gIHN0YXRlID0ge1xuICAgIGFmdGVyU2xpZGU6IHRoaXMucHJvcHMuYWZ0ZXJTbGlkZSxcbiAgICBhbmltYXRpb25EdXJhdGlvbjogdGhpcy5wcm9wcy5hbmltYXRpb25EdXJhdGlvbixcbiAgICBiZWZvcmVTbGlkZTogdGhpcy5wcm9wcy5iZWZvcmVTbGlkZSxcbiAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLFxuICAgIGVhc2luZzogdGhpcy5wcm9wcy5lYXNpbmcsXG4gICAgaW5maW5pdGU6IHRoaXMucHJvcHMuaW5maW5pdGUsXG4gICAgZ3V0dGVyOiB0aGlzLnByb3BzLmd1dHRlcixcbiAgICBvblNsaWRlQ2xpY2s6IHRoaXMucHJvcHMub25TbGlkZUNsaWNrLFxuICAgIHByZXZlbnRTY3JvbGw6IHRoaXMucHJvcHMucHJldmVudFNjcm9sbCxcbiAgICBzbmFwVG9TbGlkZTogdGhpcy5wcm9wcy5zbmFwVG9TbGlkZSxcbiAgICBzbGlkZUJ5OiB0aGlzLnByb3BzLnNsaWRlQnksXG4gICAgc2xpZGVDbGFzczogdGhpcy5wcm9wcy5zbGlkZUNsYXNzLFxuICAgIHNsaWRlVG86IHRoaXMucHJvcHMuc2xpZGVUbyxcbiAgICBzdGFydEF0OiB0aGlzLnByb3BzLnN0YXJ0QXQsXG4gICAgdmlzaWJsZVNsaWRlczogdGhpcy5wcm9wcy52aXNpYmxlU2xpZGVzXG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHMpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGFmdGVyU2xpZGU6IG5leHRQcm9wcy5hZnRlclNsaWRlLFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IG5leHRQcm9wcy5hbmltYXRpb25EdXJhdGlvbixcbiAgICAgIGJlZm9yZVNsaWRlOiBuZXh0UHJvcHMuYmVmb3JlU2xpZGUsXG4gICAgICBjbGFzc05hbWU6IG5leHRQcm9wcy5jbGFzc05hbWUsXG4gICAgICBlYXNpbmc6IG5leHRQcm9wcy5lYXNpbmcsXG4gICAgICBpbmZpbml0ZTogbmV4dFByb3BzLmluZmluaXRlLFxuICAgICAgZ3V0dGVyOiBuZXh0UHJvcHMuZ3V0dGVyLFxuICAgICAgb25TbGlkZUNsaWNrOiBuZXh0UHJvcHMub25TbGlkZUNsaWNrLFxuICAgICAgcHJldmVudFNjcm9sbDogbmV4dFByb3BzLnByZXZlbnRTY3JvbGwsXG4gICAgICBzbmFwVG9TbGlkZTogbmV4dFByb3BzLnNuYXBUb1NsaWRlLFxuICAgICAgc2xpZGVCeTogbmV4dFByb3BzLnNsaWRlQnksXG4gICAgICBzbGlkZUNsYXNzOiBuZXh0UHJvcHMuc2xpZGVDbGFzcyxcbiAgICAgIHNsaWRlVG86IG5leHRQcm9wcy5zbGlkZVRvLFxuICAgICAgc3RhcnRBdDogbmV4dFByb3BzLnN0YXJ0QXQsXG4gICAgICB2aXNpYmxlU2xpZGVzOiBuZXh0UHJvcHMudmlzaWJsZVNsaWRlc1xuICAgIH0pXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBlcnNpc3RlZFN0YXRlID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdyZWFjdC13aGlybGlnaWcnKVxuICAgICAgaWYgKHBlcnNpc3RlZFN0YXRlKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gSlNPTi5wYXJzZShwZXJzaXN0ZWRTdGF0ZSlcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSlcbiAgICAgIH1cbiAgICB9IGNhdGNoIChfKSB7IH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZSAoKSB7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdyZWFjdC13aGlybGlnaWcnLCBKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlKSlcbiAgfVxuXG4gIGhhbmRsZUFmdGVyU2xpZGUgPSAoY3VycmVudFNsaWRlKSA9PiB7IHRoaXMuc2V0U3RhdGUoeyBjdXJyZW50U2xpZGUgfSkgfVxuXG4gIHNldFJlZiA9IChuYW1lKSA9PiAocmVmKSA9PiB7IHRoaXNbbmFtZV0gPSByZWYgfVxuXG4gIHNldFN0YXRlRnJvbUlucHV0ID0gKHByb3BOYW1lKSA9PiAoeyB0YXJnZXQgfSkgPT4ge1xuICAgIGNvbnN0IHsgY2hlY2tlZCwgdHlwZSB9ID0gdGFyZ2V0XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBbcHJvcE5hbWVdOiBpc0NoZWNrYWJsZSh0eXBlKSA/IGNoZWNrZWQgOiBjb2VyY2VWYWx1ZVRvVHlwZSh0YXJnZXQpXG4gICAgfSlcbiAgfVxuXG4gIENvbnRyb2wgPSAoeyBsYWJlbCwgdHlwZSwgbmFtZSB9KSA9PiAoXG4gICAgPGxhYmVsIGh0bWxGb3I9e25hbWV9IGNsYXNzTmFtZT1cIm9wdGlvblwiPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibGFiZWxcIj57bGFiZWx9PC9zcGFuPlxuICAgICAgPGlucHV0XG4gICAgICAgIHR5cGU9e3R5cGV9XG4gICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgIGlkPXtuYW1lfVxuICAgICAgICBjaGVja2VkPXtpc0NoZWNrYWJsZSh0eXBlKSAmJiB0aGlzLnN0YXRlW25hbWVdfVxuICAgICAgICB2YWx1ZT17aXNDaGVja2FibGUodHlwZSkgPyBuYW1lIDogdGhpcy5zdGF0ZVtuYW1lXX1cbiAgICAgICAgb25DaGFuZ2U9e3RoaXMuc2V0U3RhdGVGcm9tSW5wdXQobmFtZSl9XG4gICAgICAvPlxuICAgIDwvbGFiZWw+XG4gIClcblxuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB7XG4gICAgICBhbmltYXRpb25EdXJhdGlvbixcbiAgICAgIGJlZm9yZVNsaWRlLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZWFzaW5nLFxuICAgICAgaW5maW5pdGUsXG4gICAgICBndXR0ZXIsXG4gICAgICBvblNsaWRlQ2xpY2ssXG4gICAgICBwcmV2ZW50U2Nyb2xsLFxuICAgICAgc25hcFRvU2xpZGUsXG4gICAgICBzbGlkZUJ5LFxuICAgICAgc2xpZGVDbGFzcyxcbiAgICAgIHNsaWRlVG8sXG4gICAgICBzdGFydEF0LFxuICAgICAgdmlzaWJsZVNsaWRlc1xuICAgIH0gPSB0aGlzLnN0YXRlXG4gICAgY29uc3QgbmV4dCA9ICgpID0+IHRoaXMud2hpcmxpZ2lnLm5leHQoKS5jYXRjaChub29wKVxuICAgIGNvbnN0IHByZXYgPSAoKSA9PiB0aGlzLndoaXJsaWdpZy5wcmV2KCkuY2F0Y2gobm9vcClcbiAgICBjb25zdCBhZnRlciA9IChpZHgpID0+IHRoaXMuaGFuZGxlQWZ0ZXJTbGlkZShpZHgpXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2xpZGVyXCI+XG4gICAgICAgICAgPFdcbiAgICAgICAgICAgIGFmdGVyU2xpZGU9e2FmdGVyfVxuICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb249e2FuaW1hdGlvbkR1cmF0aW9ufVxuICAgICAgICAgICAgYmVmb3JlU2xpZGU9e2JlZm9yZVNsaWRlfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICAgICAgICBlYXNpbmc9e2Vhc2luZ31cbiAgICAgICAgICAgIGluZmluaXRlPXtpbmZpbml0ZX1cbiAgICAgICAgICAgIGd1dHRlcj17Z3V0dGVyfVxuICAgICAgICAgICAgb25TbGlkZUNsaWNrPXtvblNsaWRlQ2xpY2t9XG4gICAgICAgICAgICBwcmV2ZW50U2Nyb2xsPXtwcmV2ZW50U2Nyb2xsfVxuICAgICAgICAgICAgc25hcFRvU2xpZGU9e3NuYXBUb1NsaWRlfVxuICAgICAgICAgICAgcmVmPXt0aGlzLnNldFJlZignd2hpcmxpZ2lnJyl9XG4gICAgICAgICAgICBzbGlkZUJ5PXtzbGlkZUJ5fVxuICAgICAgICAgICAgc2xpZGVDbGFzcz17c2xpZGVDbGFzc31cbiAgICAgICAgICAgIHNsaWRlVG89e3NsaWRlVG99XG4gICAgICAgICAgICBzdGFydEF0PXtzdGFydEF0fVxuICAgICAgICAgICAgdmlzaWJsZVNsaWRlcz17dmlzaWJsZVNsaWRlc31cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAgPC9XPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbHNcIj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwicHJldkJ1dHRvblwiIG9uQ2xpY2s9e3ByZXZ9IC8+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cIm5leHRCdXR0b25cIiBvbkNsaWNrPXtuZXh0fSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcHRpb25zXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwib3B0aW9uIGN1cnJlbnRTbGlkZVwiPkN1cnJlbnQgc2xpZGUgaXMge3RoaXMuc3RhdGUuY3VycmVudFNsaWRlfTwvc3Bhbj5cbiAgICAgICAgICA8dGhpcy5Db250cm9sIGxhYmVsPVwiYWZ0ZXJTbGlkZVwiIHR5cGU9XCJmdW5jXCIgbmFtZT1cImFmdGVyU2xpZGVcIiAvPlxuICAgICAgICAgIDx0aGlzLkNvbnRyb2wgbGFiZWw9XCJhbmltYXRpb25EdXJhdGlvblwiIHR5cGU9XCJudW1iZXJcIiBuYW1lPVwiYW5pbWF0aW9uRHVyYXRpb25cIiAvPlxuICAgICAgICAgIDx0aGlzLkNvbnRyb2wgbGFiZWw9XCJiZWZvcmVTbGlkZVwiIHR5cGU9XCJmdW5jXCIgbmFtZT1cImJlZm9yZVNsaWRlXCIgLz5cbiAgICAgICAgICA8dGhpcy5Db250cm9sIGxhYmVsPVwiY2xhc3NOYW1lXCIgdHlwZT1cInRleHRcIiBuYW1lPVwiY2xhc3NOYW1lXCIgLz5cbiAgICAgICAgICA8dGhpcy5Db250cm9sIGxhYmVsPVwiZWFzaW5nXCIgdHlwZT1cImZ1bmNcIiBuYW1lPVwiZWFzaW5nXCIgLz5cbiAgICAgICAgICA8dGhpcy5Db250cm9sIGxhYmVsPVwiaW5maW5pdGVcIiB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiaW5maW5pdGVcIiAvPlxuICAgICAgICAgIDx0aGlzLkNvbnRyb2wgbGFiZWw9XCJndXR0ZXJcIiB0eXBlPVwidGV4dFwiIG5hbWU9XCJndXR0ZXJcIiAvPlxuICAgICAgICAgIDx0aGlzLkNvbnRyb2wgbGFiZWw9XCJvblNsaWRlQ2xpY2tcIiB0eXBlPVwiZnVuY1wiIG5hbWU9XCJvblNsaWRlQ2xpY2tcIiAvPlxuICAgICAgICAgIDx0aGlzLkNvbnRyb2wgbGFiZWw9XCJwcmV2ZW50U2Nyb2xsXCIgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cInByZXZlbnRTY3JvbGxcIiAvPlxuICAgICAgICAgIDx0aGlzLkNvbnRyb2wgbGFiZWw9XCJzbmFwVG9TbGlkZVwiIHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJzbmFwVG9TbGlkZVwiIC8+XG4gICAgICAgICAgPHRoaXMuQ29udHJvbCBsYWJlbD1cInNsaWRlQnlcIiB0eXBlPVwibnVtYmVyXCIgbmFtZT1cInNsaWRlQnlcIiAvPlxuICAgICAgICAgIDx0aGlzLkNvbnRyb2wgbGFiZWw9XCJzbGlkZUNsYXNzXCIgdHlwZT1cInRleHRcIiBuYW1lPVwic2xpZGVDbGFzc1wiIC8+XG4gICAgICAgICAgPHRoaXMuQ29udHJvbCBsYWJlbD1cInNsaWRlVG9cIiB0eXBlPVwibnVtYmVyXCIgbmFtZT1cInNsaWRlVG9cIiAvPlxuICAgICAgICAgIDx0aGlzLkNvbnRyb2wgbGFiZWw9XCJzdGFydEF0XCIgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJzdGFydEF0XCIgLz5cbiAgICAgICAgICA8dGhpcy5Db250cm9sIGxhYmVsPVwidmlzaWJsZVNsaWRlc1wiIHR5cGU9XCJudW1iZXJcIiBuYW1lPVwidmlzaWJsZVNsaWRlc1wiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbmNvbnN0IHNsaWRlcyA9IFtcbiAgLi4uQXJyYXkoNykuZmlsbCgpLm1hcCgoKSA9PiAoe1xuICAgIHNyYzogJ2h0dHBzOi8vcGxhY2ViZWFyZC5pdCcsXG4gICAgaGVpZ2h0OiAzMDAsXG4gICAgd2lkdGg6IDMwMCxcbiAgICBqb2luZXI6ICd4J1xuICB9KSksXG4gIHtcbiAgICB0ZXh0OiA8aDM+XG4gICAgICB7WyAnaXQnLCAnbmVlZCcsICdub3QnLCAnb25seScsICdiZScsICdiZWFyZHMhJyBdLm1hcCgodCkgPT5cbiAgICAgICAgPHNwYW4ga2V5PXt0fSBjbGFzc05hbWU9XCJsaW5lIGFsaWduLXJpZ2h0XCI+e3R9PC9zcGFuPlxuICAgICAgKX1cbiAgICA8L2gzPlxuICB9LCB7XG4gICAgc3JjOiAnaHR0cHM6Ly9maWxsbXVycmF5LmNvbScsXG4gICAgaGVpZ2h0OiAzMDAsXG4gICAgd2lkdGg6IDMwMCxcbiAgICBqb2luZXI6ICcvJ1xuICB9LCB7XG4gICAgdGV4dDogPGgzPlxuICAgICAge1sgJ2l0JywgJ2NhbicsICdiZScsICdhbnl0aGluZycsICd5b3UnLCAnd2FudCEnIF0ubWFwKCh0KSA9PlxuICAgICAgICA8c3BhbiBrZXk9e3R9IGNsYXNzTmFtZT1cImxpbmUgYWxpZ24tbGVmdFwiPnt0fTwvc3Bhbj5cbiAgICAgICl9XG4gICAgPC9oMz5cbiAgfSxcbiAgeyB0ZXh0OiA8aDM+RmVhdHVyaW5nOjwvaDM+IH0sXG4gIHsgdGV4dDogPHA+QSBuYXRpdmUgc2Nyb2xsaW5nIFwid2hpcmxpZ2lnXCI8L3A+IH0sXG4gIHsgdGV4dDogPHA+c25hcC10by1zbGlkZSBvcHRpb248L3A+IH0sXG4gIHsgdGV4dDogPHA+c2V0IHRoZSBudW1iZXIgb2Ygc2xpZGUgdmlzaWJsZSBhdCBhIHRpbWU8L3A+IH0sXG4gIHsgdGV4dDogPHA+c3RhcnQgYXQgYW55IHNsaWRlIHlvdSB3YW50PC9wPiB9LFxuICB7IHRleHQ6IDxwPnNsaWRlIGluZGVjaWVzIGFyZSBub3JtYWxpemVkIHRvIHN0YXkgd2l0aGluIHRoZSBzbGlkZSBjb3VudCByYW5nZTwvcD4gfVxuXVxuXG5jbGFzcyBEZW1vIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGUgPSB7IGRvY3M6ICcnIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQgKCkge1xuICAgIHdpbmRvdy5mZXRjaCgnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2phbmUvcmVhY3Qtd2hpcmxpZ2lnL21hc3Rlci9SRUFETUUubWQnKVxuICAgICAgLnRoZW4oKGEpID0+IGEudGV4dCgpKVxuICAgICAgLnRoZW4oKHQpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRvY3M6IG1hcmtlZCh0KSB9KVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChjb25zb2xlLmVycm9yKVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3cmFwcGVyXCI+XG4gICAgICAgIDxkaXYgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiB0aGlzLnN0YXRlLmRvY3MgfX0gY2xhc3NOYW1lPVwibWRcIiAvPlxuICAgICAgICA8U2xpZGVyPlxuICAgICAgICAgIHtzbGlkZXMubWFwKCh7IHNyYywgaGVpZ2h0LCB3aWR0aCwgam9pbmVyLCB0ZXh0IH0sIGkpID0+IChcbiAgICAgICAgICAgIDxmaWd1cmUgY2xhc3NOYW1lPVwibXlTbGlkZVwiIGtleT17YCR7c3JjfS0ke2l9YH0+XG4gICAgICAgICAgICAgIDxmaWdjYXB0aW9uIGNsYXNzTmFtZT1cImNhcHRpb25cIj5TbGlkZSBpbmRleCB7aX08L2ZpZ2NhcHRpb24+XG4gICAgICAgICAgICAgIHtzcmMgJiYgPGltZyBhbHQ9XCJQbGFjZSBab21iaWVcIiBzcmM9e2Ake3NyY30vJHt3aWR0aH0ke2pvaW5lcn0ke2hlaWdodH0/JHtpfWB9IC8+fVxuICAgICAgICAgICAgICB7dGV4dCAmJiA8ZGl2IGNsYXNzTmFtZT1cInRleHRcIj57dGV4dH08L2Rpdj59XG4gICAgICAgICAgICA8L2ZpZ3VyZT5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9TbGlkZXI+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxucmVuZGVyKDxEZW1vIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZGV2LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGludmFyaWFudChcbiAgICAgIGZhbHNlLFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qc1xuLy8gbW9kdWxlIGlkID0gMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qc1xuLy8gbW9kdWxlIGlkID0gMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qc1xuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBtYXJrZWQgLSBhIG1hcmtkb3duIHBhcnNlclxuICogQ29weXJpZ2h0IChjKSAyMDExLTIwMTQsIENocmlzdG9waGVyIEplZmZyZXkuIChNSVQgTGljZW5zZWQpXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2hqai9tYXJrZWRcbiAqL1xuXG47KGZ1bmN0aW9uKCkge1xuXG4vKipcbiAqIEJsb2NrLUxldmVsIEdyYW1tYXJcbiAqL1xuXG52YXIgYmxvY2sgPSB7XG4gIG5ld2xpbmU6IC9eXFxuKy8sXG4gIGNvZGU6IC9eKCB7NH1bXlxcbl0rXFxuKikrLyxcbiAgZmVuY2VzOiBub29wLFxuICBocjogL14oICpbLSpfXSl7Myx9ICooPzpcXG4rfCQpLyxcbiAgaGVhZGluZzogL14gKigjezEsNn0pICooW15cXG5dKz8pICojKiAqKD86XFxuK3wkKS8sXG4gIG5wdGFibGU6IG5vb3AsXG4gIGxoZWFkaW5nOiAvXihbXlxcbl0rKVxcbiAqKD18LSl7Mix9ICooPzpcXG4rfCQpLyxcbiAgYmxvY2txdW90ZTogL14oICo+W15cXG5dKyhcXG4oPyFkZWYpW15cXG5dKykqXFxuKikrLyxcbiAgbGlzdDogL14oICopKGJ1bGwpIFtcXHNcXFNdKz8oPzpocnxkZWZ8XFxuezIsfSg/ISApKD8hXFwxYnVsbCApXFxuKnxcXHMqJCkvLFxuICBodG1sOiAvXiAqKD86Y29tbWVudCAqKD86XFxufFxccyokKXxjbG9zZWQgKig/OlxcbnsyLH18XFxzKiQpfGNsb3NpbmcgKig/OlxcbnsyLH18XFxzKiQpKS8sXG4gIGRlZjogL14gKlxcWyhbXlxcXV0rKVxcXTogKjw/KFteXFxzPl0rKT4/KD86ICtbXCIoXShbXlxcbl0rKVtcIildKT8gKig/Olxcbit8JCkvLFxuICB0YWJsZTogbm9vcCxcbiAgcGFyYWdyYXBoOiAvXigoPzpbXlxcbl0rXFxuPyg/IWhyfGhlYWRpbmd8bGhlYWRpbmd8YmxvY2txdW90ZXx0YWd8ZGVmKSkrKVxcbiovLFxuICB0ZXh0OiAvXlteXFxuXSsvXG59O1xuXG5ibG9jay5idWxsZXQgPSAvKD86WyorLV18XFxkK1xcLikvO1xuYmxvY2suaXRlbSA9IC9eKCAqKShidWxsKSBbXlxcbl0qKD86XFxuKD8hXFwxYnVsbCApW15cXG5dKikqLztcbmJsb2NrLml0ZW0gPSByZXBsYWNlKGJsb2NrLml0ZW0sICdnbScpXG4gICgvYnVsbC9nLCBibG9jay5idWxsZXQpXG4gICgpO1xuXG5ibG9jay5saXN0ID0gcmVwbGFjZShibG9jay5saXN0KVxuICAoL2J1bGwvZywgYmxvY2suYnVsbGV0KVxuICAoJ2hyJywgJ1xcXFxuKyg/PVxcXFwxPyg/OlstKl9dICopezMsfSg/OlxcXFxuK3wkKSknKVxuICAoJ2RlZicsICdcXFxcbisoPz0nICsgYmxvY2suZGVmLnNvdXJjZSArICcpJylcbiAgKCk7XG5cbmJsb2NrLmJsb2NrcXVvdGUgPSByZXBsYWNlKGJsb2NrLmJsb2NrcXVvdGUpXG4gICgnZGVmJywgYmxvY2suZGVmKVxuICAoKTtcblxuYmxvY2suX3RhZyA9ICcoPyEoPzonXG4gICsgJ2F8ZW18c3Ryb25nfHNtYWxsfHN8Y2l0ZXxxfGRmbnxhYmJyfGRhdGF8dGltZXxjb2RlJ1xuICArICd8dmFyfHNhbXB8a2JkfHN1YnxzdXB8aXxifHV8bWFya3xydWJ5fHJ0fHJwfGJkaXxiZG8nXG4gICsgJ3xzcGFufGJyfHdicnxpbnN8ZGVsfGltZylcXFxcYilcXFxcdysoPyE6L3xbXlxcXFx3XFxcXHNAXSpAKVxcXFxiJztcblxuYmxvY2suaHRtbCA9IHJlcGxhY2UoYmxvY2suaHRtbClcbiAgKCdjb21tZW50JywgLzwhLS1bXFxzXFxTXSo/LS0+LylcbiAgKCdjbG9zZWQnLCAvPCh0YWcpW1xcc1xcU10rPzxcXC9cXDE+LylcbiAgKCdjbG9zaW5nJywgLzx0YWcoPzpcIlteXCJdKlwifCdbXiddKid8W14nXCI+XSkqPz4vKVxuICAoL3RhZy9nLCBibG9jay5fdGFnKVxuICAoKTtcblxuYmxvY2sucGFyYWdyYXBoID0gcmVwbGFjZShibG9jay5wYXJhZ3JhcGgpXG4gICgnaHInLCBibG9jay5ocilcbiAgKCdoZWFkaW5nJywgYmxvY2suaGVhZGluZylcbiAgKCdsaGVhZGluZycsIGJsb2NrLmxoZWFkaW5nKVxuICAoJ2Jsb2NrcXVvdGUnLCBibG9jay5ibG9ja3F1b3RlKVxuICAoJ3RhZycsICc8JyArIGJsb2NrLl90YWcpXG4gICgnZGVmJywgYmxvY2suZGVmKVxuICAoKTtcblxuLyoqXG4gKiBOb3JtYWwgQmxvY2sgR3JhbW1hclxuICovXG5cbmJsb2NrLm5vcm1hbCA9IG1lcmdlKHt9LCBibG9jayk7XG5cbi8qKlxuICogR0ZNIEJsb2NrIEdyYW1tYXJcbiAqL1xuXG5ibG9jay5nZm0gPSBtZXJnZSh7fSwgYmxvY2subm9ybWFsLCB7XG4gIGZlbmNlczogL14gKihgezMsfXx+ezMsfSlbIFxcLl0qKFxcUyspPyAqXFxuKFtcXHNcXFNdKj8pXFxzKlxcMSAqKD86XFxuK3wkKS8sXG4gIHBhcmFncmFwaDogL14vLFxuICBoZWFkaW5nOiAvXiAqKCN7MSw2fSkgKyhbXlxcbl0rPykgKiMqICooPzpcXG4rfCQpL1xufSk7XG5cbmJsb2NrLmdmbS5wYXJhZ3JhcGggPSByZXBsYWNlKGJsb2NrLnBhcmFncmFwaClcbiAgKCcoPyEnLCAnKD8hJ1xuICAgICsgYmxvY2suZ2ZtLmZlbmNlcy5zb3VyY2UucmVwbGFjZSgnXFxcXDEnLCAnXFxcXDInKSArICd8J1xuICAgICsgYmxvY2subGlzdC5zb3VyY2UucmVwbGFjZSgnXFxcXDEnLCAnXFxcXDMnKSArICd8JylcbiAgKCk7XG5cbi8qKlxuICogR0ZNICsgVGFibGVzIEJsb2NrIEdyYW1tYXJcbiAqL1xuXG5ibG9jay50YWJsZXMgPSBtZXJnZSh7fSwgYmxvY2suZ2ZtLCB7XG4gIG5wdGFibGU6IC9eICooXFxTLipcXHwuKilcXG4gKihbLTpdKyAqXFx8Wy18IDpdKilcXG4oKD86LipcXHwuKig/OlxcbnwkKSkqKVxcbiovLFxuICB0YWJsZTogL14gKlxcfCguKylcXG4gKlxcfCggKlstOl0rWy18IDpdKilcXG4oKD86ICpcXHwuKig/OlxcbnwkKSkqKVxcbiovXG59KTtcblxuLyoqXG4gKiBCbG9jayBMZXhlclxuICovXG5cbmZ1bmN0aW9uIExleGVyKG9wdGlvbnMpIHtcbiAgdGhpcy50b2tlbnMgPSBbXTtcbiAgdGhpcy50b2tlbnMubGlua3MgPSB7fTtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBtYXJrZWQuZGVmYXVsdHM7XG4gIHRoaXMucnVsZXMgPSBibG9jay5ub3JtYWw7XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5nZm0pIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRhYmxlcykge1xuICAgICAgdGhpcy5ydWxlcyA9IGJsb2NrLnRhYmxlcztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ydWxlcyA9IGJsb2NrLmdmbTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBFeHBvc2UgQmxvY2sgUnVsZXNcbiAqL1xuXG5MZXhlci5ydWxlcyA9IGJsb2NrO1xuXG4vKipcbiAqIFN0YXRpYyBMZXggTWV0aG9kXG4gKi9cblxuTGV4ZXIubGV4ID0gZnVuY3Rpb24oc3JjLCBvcHRpb25zKSB7XG4gIHZhciBsZXhlciA9IG5ldyBMZXhlcihvcHRpb25zKTtcbiAgcmV0dXJuIGxleGVyLmxleChzcmMpO1xufTtcblxuLyoqXG4gKiBQcmVwcm9jZXNzaW5nXG4gKi9cblxuTGV4ZXIucHJvdG90eXBlLmxleCA9IGZ1bmN0aW9uKHNyYykge1xuICBzcmMgPSBzcmNcbiAgICAucmVwbGFjZSgvXFxyXFxufFxcci9nLCAnXFxuJylcbiAgICAucmVwbGFjZSgvXFx0L2csICcgICAgJylcbiAgICAucmVwbGFjZSgvXFx1MDBhMC9nLCAnICcpXG4gICAgLnJlcGxhY2UoL1xcdTI0MjQvZywgJ1xcbicpO1xuXG4gIHJldHVybiB0aGlzLnRva2VuKHNyYywgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIExleGluZ1xuICovXG5cbkxleGVyLnByb3RvdHlwZS50b2tlbiA9IGZ1bmN0aW9uKHNyYywgdG9wLCBicSkge1xuICB2YXIgc3JjID0gc3JjLnJlcGxhY2UoL14gKyQvZ20sICcnKVxuICAgICwgbmV4dFxuICAgICwgbG9vc2VcbiAgICAsIGNhcFxuICAgICwgYnVsbFxuICAgICwgYlxuICAgICwgaXRlbVxuICAgICwgc3BhY2VcbiAgICAsIGlcbiAgICAsIGw7XG5cbiAgd2hpbGUgKHNyYykge1xuICAgIC8vIG5ld2xpbmVcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5uZXdsaW5lLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGlmIChjYXBbMF0ubGVuZ3RoID4gMSkge1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnc3BhY2UnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvZGVcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5jb2RlLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGNhcCA9IGNhcFswXS5yZXBsYWNlKC9eIHs0fS9nbSwgJycpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdjb2RlJyxcbiAgICAgICAgdGV4dDogIXRoaXMub3B0aW9ucy5wZWRhbnRpY1xuICAgICAgICAgID8gY2FwLnJlcGxhY2UoL1xcbiskLywgJycpXG4gICAgICAgICAgOiBjYXBcbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gZmVuY2VzIChnZm0pXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuZmVuY2VzLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnY29kZScsXG4gICAgICAgIGxhbmc6IGNhcFsyXSxcbiAgICAgICAgdGV4dDogY2FwWzNdIHx8ICcnXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGhlYWRpbmdcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5oZWFkaW5nLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgICAgIGRlcHRoOiBjYXBbMV0ubGVuZ3RoLFxuICAgICAgICB0ZXh0OiBjYXBbMl1cbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdGFibGUgbm8gbGVhZGluZyBwaXBlIChnZm0pXG4gICAgaWYgKHRvcCAmJiAoY2FwID0gdGhpcy5ydWxlcy5ucHRhYmxlLmV4ZWMoc3JjKSkpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG5cbiAgICAgIGl0ZW0gPSB7XG4gICAgICAgIHR5cGU6ICd0YWJsZScsXG4gICAgICAgIGhlYWRlcjogY2FwWzFdLnJlcGxhY2UoL14gKnwgKlxcfCAqJC9nLCAnJykuc3BsaXQoLyAqXFx8ICovKSxcbiAgICAgICAgYWxpZ246IGNhcFsyXS5yZXBsYWNlKC9eICp8XFx8ICokL2csICcnKS5zcGxpdCgvICpcXHwgKi8pLFxuICAgICAgICBjZWxsczogY2FwWzNdLnJlcGxhY2UoL1xcbiQvLCAnJykuc3BsaXQoJ1xcbicpXG4gICAgICB9O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgaXRlbS5hbGlnbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoL14gKi0rOiAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAncmlnaHQnO1xuICAgICAgICB9IGVsc2UgaWYgKC9eICo6LSs6ICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdjZW50ZXInO1xuICAgICAgICB9IGVsc2UgaWYgKC9eICo6LSsgKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ2xlZnQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtLmNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGl0ZW0uY2VsbHNbaV0gPSBpdGVtLmNlbGxzW2ldLnNwbGl0KC8gKlxcfCAqLyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2goaXRlbSk7XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGxoZWFkaW5nXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMubGhlYWRpbmcuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICAgICAgZGVwdGg6IGNhcFsyXSA9PT0gJz0nID8gMSA6IDIsXG4gICAgICAgIHRleHQ6IGNhcFsxXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBoclxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmhyLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnaHInXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGJsb2NrcXVvdGVcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5ibG9ja3F1b3RlLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcblxuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdibG9ja3F1b3RlX3N0YXJ0J1xuICAgICAgfSk7XG5cbiAgICAgIGNhcCA9IGNhcFswXS5yZXBsYWNlKC9eICo+ID8vZ20sICcnKTtcblxuICAgICAgLy8gUGFzcyBgdG9wYCB0byBrZWVwIHRoZSBjdXJyZW50XG4gICAgICAvLyBcInRvcGxldmVsXCIgc3RhdGUuIFRoaXMgaXMgZXhhY3RseVxuICAgICAgLy8gaG93IG1hcmtkb3duLnBsIHdvcmtzLlxuICAgICAgdGhpcy50b2tlbihjYXAsIHRvcCwgdHJ1ZSk7XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnYmxvY2txdW90ZV9lbmQnXG4gICAgICB9KTtcblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gbGlzdFxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmxpc3QuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgYnVsbCA9IGNhcFsyXTtcblxuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdsaXN0X3N0YXJ0JyxcbiAgICAgICAgb3JkZXJlZDogYnVsbC5sZW5ndGggPiAxXG4gICAgICB9KTtcblxuICAgICAgLy8gR2V0IGVhY2ggdG9wLWxldmVsIGl0ZW0uXG4gICAgICBjYXAgPSBjYXBbMF0ubWF0Y2godGhpcy5ydWxlcy5pdGVtKTtcblxuICAgICAgbmV4dCA9IGZhbHNlO1xuICAgICAgbCA9IGNhcC5sZW5ndGg7XG4gICAgICBpID0gMDtcblxuICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaXRlbSA9IGNhcFtpXTtcblxuICAgICAgICAvLyBSZW1vdmUgdGhlIGxpc3QgaXRlbSdzIGJ1bGxldFxuICAgICAgICAvLyBzbyBpdCBpcyBzZWVuIGFzIHRoZSBuZXh0IHRva2VuLlxuICAgICAgICBzcGFjZSA9IGl0ZW0ubGVuZ3RoO1xuICAgICAgICBpdGVtID0gaXRlbS5yZXBsYWNlKC9eICooWyorLV18XFxkK1xcLikgKy8sICcnKTtcblxuICAgICAgICAvLyBPdXRkZW50IHdoYXRldmVyIHRoZVxuICAgICAgICAvLyBsaXN0IGl0ZW0gY29udGFpbnMuIEhhY2t5LlxuICAgICAgICBpZiAofml0ZW0uaW5kZXhPZignXFxuICcpKSB7XG4gICAgICAgICAgc3BhY2UgLT0gaXRlbS5sZW5ndGg7XG4gICAgICAgICAgaXRlbSA9ICF0aGlzLm9wdGlvbnMucGVkYW50aWNcbiAgICAgICAgICAgID8gaXRlbS5yZXBsYWNlKG5ldyBSZWdFeHAoJ14gezEsJyArIHNwYWNlICsgJ30nLCAnZ20nKSwgJycpXG4gICAgICAgICAgICA6IGl0ZW0ucmVwbGFjZSgvXiB7MSw0fS9nbSwgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIG5leHQgbGlzdCBpdGVtIGJlbG9uZ3MgaGVyZS5cbiAgICAgICAgLy8gQmFja3BlZGFsIGlmIGl0IGRvZXMgbm90IGJlbG9uZyBpbiB0aGlzIGxpc3QuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc21hcnRMaXN0cyAmJiBpICE9PSBsIC0gMSkge1xuICAgICAgICAgIGIgPSBibG9jay5idWxsZXQuZXhlYyhjYXBbaSArIDFdKVswXTtcbiAgICAgICAgICBpZiAoYnVsbCAhPT0gYiAmJiAhKGJ1bGwubGVuZ3RoID4gMSAmJiBiLmxlbmd0aCA+IDEpKSB7XG4gICAgICAgICAgICBzcmMgPSBjYXAuc2xpY2UoaSArIDEpLmpvaW4oJ1xcbicpICsgc3JjO1xuICAgICAgICAgICAgaSA9IGwgLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERldGVybWluZSB3aGV0aGVyIGl0ZW0gaXMgbG9vc2Ugb3Igbm90LlxuICAgICAgICAvLyBVc2U6IC8oXnxcXG4pKD8hIClbXlxcbl0rXFxuXFxuKD8hXFxzKiQpL1xuICAgICAgICAvLyBmb3IgZGlzY291bnQgYmVoYXZpb3IuXG4gICAgICAgIGxvb3NlID0gbmV4dCB8fCAvXFxuXFxuKD8hXFxzKiQpLy50ZXN0KGl0ZW0pO1xuICAgICAgICBpZiAoaSAhPT0gbCAtIDEpIHtcbiAgICAgICAgICBuZXh0ID0gaXRlbS5jaGFyQXQoaXRlbS5sZW5ndGggLSAxKSA9PT0gJ1xcbic7XG4gICAgICAgICAgaWYgKCFsb29zZSkgbG9vc2UgPSBuZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgICAgdHlwZTogbG9vc2VcbiAgICAgICAgICAgID8gJ2xvb3NlX2l0ZW1fc3RhcnQnXG4gICAgICAgICAgICA6ICdsaXN0X2l0ZW1fc3RhcnQnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFJlY3Vyc2UuXG4gICAgICAgIHRoaXMudG9rZW4oaXRlbSwgZmFsc2UsIGJxKTtcblxuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnbGlzdF9pdGVtX2VuZCdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnbGlzdF9lbmQnXG4gICAgICB9KTtcblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gaHRtbFxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmh0bWwuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6IHRoaXMub3B0aW9ucy5zYW5pdGl6ZVxuICAgICAgICAgID8gJ3BhcmFncmFwaCdcbiAgICAgICAgICA6ICdodG1sJyxcbiAgICAgICAgcHJlOiAhdGhpcy5vcHRpb25zLnNhbml0aXplclxuICAgICAgICAgICYmIChjYXBbMV0gPT09ICdwcmUnIHx8IGNhcFsxXSA9PT0gJ3NjcmlwdCcgfHwgY2FwWzFdID09PSAnc3R5bGUnKSxcbiAgICAgICAgdGV4dDogY2FwWzBdXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGRlZlxuICAgIGlmICgoIWJxICYmIHRvcCkgJiYgKGNhcCA9IHRoaXMucnVsZXMuZGVmLmV4ZWMoc3JjKSkpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5saW5rc1tjYXBbMV0udG9Mb3dlckNhc2UoKV0gPSB7XG4gICAgICAgIGhyZWY6IGNhcFsyXSxcbiAgICAgICAgdGl0bGU6IGNhcFszXVxuICAgICAgfTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRhYmxlIChnZm0pXG4gICAgaWYgKHRvcCAmJiAoY2FwID0gdGhpcy5ydWxlcy50YWJsZS5leGVjKHNyYykpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuXG4gICAgICBpdGVtID0ge1xuICAgICAgICB0eXBlOiAndGFibGUnLFxuICAgICAgICBoZWFkZXI6IGNhcFsxXS5yZXBsYWNlKC9eICp8ICpcXHwgKiQvZywgJycpLnNwbGl0KC8gKlxcfCAqLyksXG4gICAgICAgIGFsaWduOiBjYXBbMl0ucmVwbGFjZSgvXiAqfFxcfCAqJC9nLCAnJykuc3BsaXQoLyAqXFx8ICovKSxcbiAgICAgICAgY2VsbHM6IGNhcFszXS5yZXBsYWNlKC8oPzogKlxcfCAqKT9cXG4kLywgJycpLnNwbGl0KCdcXG4nKVxuICAgICAgfTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW0uYWxpZ24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKC9eICotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ3JpZ2h0JztcbiAgICAgICAgfSBlbHNlIGlmICgvXiAqOi0rOiAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnY2VudGVyJztcbiAgICAgICAgfSBlbHNlIGlmICgvXiAqOi0rICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdsZWZ0JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtLmFsaWduW2ldID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgaXRlbS5jZWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVtLmNlbGxzW2ldID0gaXRlbS5jZWxsc1tpXVxuICAgICAgICAgIC5yZXBsYWNlKC9eICpcXHwgKnwgKlxcfCAqJC9nLCAnJylcbiAgICAgICAgICAuc3BsaXQoLyAqXFx8ICovKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy50b2tlbnMucHVzaChpdGVtKTtcblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdG9wLWxldmVsIHBhcmFncmFwaFxuICAgIGlmICh0b3AgJiYgKGNhcCA9IHRoaXMucnVsZXMucGFyYWdyYXBoLmV4ZWMoc3JjKSkpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgICAgIHRleHQ6IGNhcFsxXS5jaGFyQXQoY2FwWzFdLmxlbmd0aCAtIDEpID09PSAnXFxuJ1xuICAgICAgICAgID8gY2FwWzFdLnNsaWNlKDAsIC0xKVxuICAgICAgICAgIDogY2FwWzFdXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRleHRcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy50ZXh0LmV4ZWMoc3JjKSkge1xuICAgICAgLy8gVG9wLWxldmVsIHNob3VsZCBuZXZlciByZWFjaCBoZXJlLlxuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIHRleHQ6IGNhcFswXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc3JjKSB7XG4gICAgICB0aHJvdyBuZXdcbiAgICAgICAgRXJyb3IoJ0luZmluaXRlIGxvb3Agb24gYnl0ZTogJyArIHNyYy5jaGFyQ29kZUF0KDApKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcy50b2tlbnM7XG59O1xuXG4vKipcbiAqIElubGluZS1MZXZlbCBHcmFtbWFyXG4gKi9cblxudmFyIGlubGluZSA9IHtcbiAgZXNjYXBlOiAvXlxcXFwoW1xcXFxgKnt9XFxbXFxdKCkjK1xcLS4hXz5dKS8sXG4gIGF1dG9saW5rOiAvXjwoW14gPl0rKEB8OlxcLylbXiA+XSspPi8sXG4gIHVybDogbm9vcCxcbiAgdGFnOiAvXjwhLS1bXFxzXFxTXSo/LS0+fF48XFwvP1xcdysoPzpcIlteXCJdKlwifCdbXiddKid8W14nXCI+XSkqPz4vLFxuICBsaW5rOiAvXiE/XFxbKGluc2lkZSlcXF1cXChocmVmXFwpLyxcbiAgcmVmbGluazogL14hP1xcWyhpbnNpZGUpXFxdXFxzKlxcWyhbXlxcXV0qKVxcXS8sXG4gIG5vbGluazogL14hP1xcWygoPzpcXFtbXlxcXV0qXFxdfFteXFxbXFxdXSkqKVxcXS8sXG4gIHN0cm9uZzogL15fXyhbXFxzXFxTXSs/KV9fKD8hXyl8XlxcKlxcKihbXFxzXFxTXSs/KVxcKlxcKig/IVxcKikvLFxuICBlbTogL15cXGJfKCg/OlteX118X18pKz8pX1xcYnxeXFwqKCg/OlxcKlxcKnxbXFxzXFxTXSkrPylcXCooPyFcXCopLyxcbiAgY29kZTogL14oYCspXFxzKihbXFxzXFxTXSo/W15gXSlcXHMqXFwxKD8hYCkvLFxuICBicjogL14gezIsfVxcbig/IVxccyokKS8sXG4gIGRlbDogbm9vcCxcbiAgdGV4dDogL15bXFxzXFxTXSs/KD89W1xcXFw8IVxcW18qYF18IHsyLH1cXG58JCkvXG59O1xuXG5pbmxpbmUuX2luc2lkZSA9IC8oPzpcXFtbXlxcXV0qXFxdfFteXFxbXFxdXXxcXF0oPz1bXlxcW10qXFxdKSkqLztcbmlubGluZS5faHJlZiA9IC9cXHMqPD8oW1xcc1xcU10qPyk+Pyg/OlxccytbJ1wiXShbXFxzXFxTXSo/KVsnXCJdKT9cXHMqLztcblxuaW5saW5lLmxpbmsgPSByZXBsYWNlKGlubGluZS5saW5rKVxuICAoJ2luc2lkZScsIGlubGluZS5faW5zaWRlKVxuICAoJ2hyZWYnLCBpbmxpbmUuX2hyZWYpXG4gICgpO1xuXG5pbmxpbmUucmVmbGluayA9IHJlcGxhY2UoaW5saW5lLnJlZmxpbmspXG4gICgnaW5zaWRlJywgaW5saW5lLl9pbnNpZGUpXG4gICgpO1xuXG4vKipcbiAqIE5vcm1hbCBJbmxpbmUgR3JhbW1hclxuICovXG5cbmlubGluZS5ub3JtYWwgPSBtZXJnZSh7fSwgaW5saW5lKTtcblxuLyoqXG4gKiBQZWRhbnRpYyBJbmxpbmUgR3JhbW1hclxuICovXG5cbmlubGluZS5wZWRhbnRpYyA9IG1lcmdlKHt9LCBpbmxpbmUubm9ybWFsLCB7XG4gIHN0cm9uZzogL15fXyg/PVxcUykoW1xcc1xcU10qP1xcUylfXyg/IV8pfF5cXCpcXCooPz1cXFMpKFtcXHNcXFNdKj9cXFMpXFwqXFwqKD8hXFwqKS8sXG4gIGVtOiAvXl8oPz1cXFMpKFtcXHNcXFNdKj9cXFMpXyg/IV8pfF5cXCooPz1cXFMpKFtcXHNcXFNdKj9cXFMpXFwqKD8hXFwqKS9cbn0pO1xuXG4vKipcbiAqIEdGTSBJbmxpbmUgR3JhbW1hclxuICovXG5cbmlubGluZS5nZm0gPSBtZXJnZSh7fSwgaW5saW5lLm5vcm1hbCwge1xuICBlc2NhcGU6IHJlcGxhY2UoaW5saW5lLmVzY2FwZSkoJ10pJywgJ358XSknKSgpLFxuICB1cmw6IC9eKGh0dHBzPzpcXC9cXC9bXlxcczxdK1tePC4sOjtcIicpXFxdXFxzXSkvLFxuICBkZWw6IC9efn4oPz1cXFMpKFtcXHNcXFNdKj9cXFMpfn4vLFxuICB0ZXh0OiByZXBsYWNlKGlubGluZS50ZXh0KVxuICAgICgnXXwnLCAnfl18JylcbiAgICAoJ3wnLCAnfGh0dHBzPzovL3wnKVxuICAgICgpXG59KTtcblxuLyoqXG4gKiBHRk0gKyBMaW5lIEJyZWFrcyBJbmxpbmUgR3JhbW1hclxuICovXG5cbmlubGluZS5icmVha3MgPSBtZXJnZSh7fSwgaW5saW5lLmdmbSwge1xuICBicjogcmVwbGFjZShpbmxpbmUuYnIpKCd7Mix9JywgJyonKSgpLFxuICB0ZXh0OiByZXBsYWNlKGlubGluZS5nZm0udGV4dCkoJ3syLH0nLCAnKicpKClcbn0pO1xuXG4vKipcbiAqIElubGluZSBMZXhlciAmIENvbXBpbGVyXG4gKi9cblxuZnVuY3Rpb24gSW5saW5lTGV4ZXIobGlua3MsIG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBtYXJrZWQuZGVmYXVsdHM7XG4gIHRoaXMubGlua3MgPSBsaW5rcztcbiAgdGhpcy5ydWxlcyA9IGlubGluZS5ub3JtYWw7XG4gIHRoaXMucmVuZGVyZXIgPSB0aGlzLm9wdGlvbnMucmVuZGVyZXIgfHwgbmV3IFJlbmRlcmVyO1xuICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgaWYgKCF0aGlzLmxpbmtzKSB7XG4gICAgdGhyb3cgbmV3XG4gICAgICBFcnJvcignVG9rZW5zIGFycmF5IHJlcXVpcmVzIGEgYGxpbmtzYCBwcm9wZXJ0eS4nKTtcbiAgfVxuXG4gIGlmICh0aGlzLm9wdGlvbnMuZ2ZtKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5icmVha3MpIHtcbiAgICAgIHRoaXMucnVsZXMgPSBpbmxpbmUuYnJlYWtzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJ1bGVzID0gaW5saW5lLmdmbTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgdGhpcy5ydWxlcyA9IGlubGluZS5wZWRhbnRpYztcbiAgfVxufVxuXG4vKipcbiAqIEV4cG9zZSBJbmxpbmUgUnVsZXNcbiAqL1xuXG5JbmxpbmVMZXhlci5ydWxlcyA9IGlubGluZTtcblxuLyoqXG4gKiBTdGF0aWMgTGV4aW5nL0NvbXBpbGluZyBNZXRob2RcbiAqL1xuXG5JbmxpbmVMZXhlci5vdXRwdXQgPSBmdW5jdGlvbihzcmMsIGxpbmtzLCBvcHRpb25zKSB7XG4gIHZhciBpbmxpbmUgPSBuZXcgSW5saW5lTGV4ZXIobGlua3MsIG9wdGlvbnMpO1xuICByZXR1cm4gaW5saW5lLm91dHB1dChzcmMpO1xufTtcblxuLyoqXG4gKiBMZXhpbmcvQ29tcGlsaW5nXG4gKi9cblxuSW5saW5lTGV4ZXIucHJvdG90eXBlLm91dHB1dCA9IGZ1bmN0aW9uKHNyYykge1xuICB2YXIgb3V0ID0gJydcbiAgICAsIGxpbmtcbiAgICAsIHRleHRcbiAgICAsIGhyZWZcbiAgICAsIGNhcDtcblxuICB3aGlsZSAoc3JjKSB7XG4gICAgLy8gZXNjYXBlXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuZXNjYXBlLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSBjYXBbMV07XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBhdXRvbGlua1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmF1dG9saW5rLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGlmIChjYXBbMl0gPT09ICdAJykge1xuICAgICAgICB0ZXh0ID0gY2FwWzFdLmNoYXJBdCg2KSA9PT0gJzonXG4gICAgICAgICAgPyB0aGlzLm1hbmdsZShjYXBbMV0uc3Vic3RyaW5nKDcpKVxuICAgICAgICAgIDogdGhpcy5tYW5nbGUoY2FwWzFdKTtcbiAgICAgICAgaHJlZiA9IHRoaXMubWFuZ2xlKCdtYWlsdG86JykgKyB0ZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCA9IGVzY2FwZShjYXBbMV0pO1xuICAgICAgICBocmVmID0gdGV4dDtcbiAgICAgIH1cbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmxpbmsoaHJlZiwgbnVsbCwgdGV4dCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB1cmwgKGdmbSlcbiAgICBpZiAoIXRoaXMuaW5MaW5rICYmIChjYXAgPSB0aGlzLnJ1bGVzLnVybC5leGVjKHNyYykpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGV4dCA9IGVzY2FwZShjYXBbMV0pO1xuICAgICAgaHJlZiA9IHRleHQ7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5saW5rKGhyZWYsIG51bGwsIHRleHQpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdGFnXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMudGFnLmV4ZWMoc3JjKSkge1xuICAgICAgaWYgKCF0aGlzLmluTGluayAmJiAvXjxhIC9pLnRlc3QoY2FwWzBdKSkge1xuICAgICAgICB0aGlzLmluTGluayA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaW5MaW5rICYmIC9ePFxcL2E+L2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgIHRoaXMuaW5MaW5rID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMub3B0aW9ucy5zYW5pdGl6ZVxuICAgICAgICA/IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXJcbiAgICAgICAgICA/IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIoY2FwWzBdKVxuICAgICAgICAgIDogZXNjYXBlKGNhcFswXSlcbiAgICAgICAgOiBjYXBbMF1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGxpbmtcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5saW5rLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMuaW5MaW5rID0gdHJ1ZTtcbiAgICAgIG91dCArPSB0aGlzLm91dHB1dExpbmsoY2FwLCB7XG4gICAgICAgIGhyZWY6IGNhcFsyXSxcbiAgICAgICAgdGl0bGU6IGNhcFszXVxuICAgICAgfSk7XG4gICAgICB0aGlzLmluTGluayA9IGZhbHNlO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gcmVmbGluaywgbm9saW5rXG4gICAgaWYgKChjYXAgPSB0aGlzLnJ1bGVzLnJlZmxpbmsuZXhlYyhzcmMpKVxuICAgICAgICB8fCAoY2FwID0gdGhpcy5ydWxlcy5ub2xpbmsuZXhlYyhzcmMpKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGxpbmsgPSAoY2FwWzJdIHx8IGNhcFsxXSkucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuICAgICAgbGluayA9IHRoaXMubGlua3NbbGluay50b0xvd2VyQ2FzZSgpXTtcbiAgICAgIGlmICghbGluayB8fCAhbGluay5ocmVmKSB7XG4gICAgICAgIG91dCArPSBjYXBbMF0uY2hhckF0KDApO1xuICAgICAgICBzcmMgPSBjYXBbMF0uc3Vic3RyaW5nKDEpICsgc3JjO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5MaW5rID0gdHJ1ZTtcbiAgICAgIG91dCArPSB0aGlzLm91dHB1dExpbmsoY2FwLCBsaW5rKTtcbiAgICAgIHRoaXMuaW5MaW5rID0gZmFsc2U7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBzdHJvbmdcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5zdHJvbmcuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuc3Ryb25nKHRoaXMub3V0cHV0KGNhcFsyXSB8fCBjYXBbMV0pKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGVtXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuZW0uZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuZW0odGhpcy5vdXRwdXQoY2FwWzJdIHx8IGNhcFsxXSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gY29kZVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmNvZGUuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuY29kZXNwYW4oZXNjYXBlKGNhcFsyXSwgdHJ1ZSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gYnJcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5ici5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5icigpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gZGVsIChnZm0pXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuZGVsLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmRlbCh0aGlzLm91dHB1dChjYXBbMV0pKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRleHRcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy50ZXh0LmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLnRleHQoZXNjYXBlKHRoaXMuc21hcnR5cGFudHMoY2FwWzBdKSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHNyYykge1xuICAgICAgdGhyb3cgbmV3XG4gICAgICAgIEVycm9yKCdJbmZpbml0ZSBsb29wIG9uIGJ5dGU6ICcgKyBzcmMuY2hhckNvZGVBdCgwKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ29tcGlsZSBMaW5rXG4gKi9cblxuSW5saW5lTGV4ZXIucHJvdG90eXBlLm91dHB1dExpbmsgPSBmdW5jdGlvbihjYXAsIGxpbmspIHtcbiAgdmFyIGhyZWYgPSBlc2NhcGUobGluay5ocmVmKVxuICAgICwgdGl0bGUgPSBsaW5rLnRpdGxlID8gZXNjYXBlKGxpbmsudGl0bGUpIDogbnVsbDtcblxuICByZXR1cm4gY2FwWzBdLmNoYXJBdCgwKSAhPT0gJyEnXG4gICAgPyB0aGlzLnJlbmRlcmVyLmxpbmsoaHJlZiwgdGl0bGUsIHRoaXMub3V0cHV0KGNhcFsxXSkpXG4gICAgOiB0aGlzLnJlbmRlcmVyLmltYWdlKGhyZWYsIHRpdGxlLCBlc2NhcGUoY2FwWzFdKSk7XG59O1xuXG4vKipcbiAqIFNtYXJ0eXBhbnRzIFRyYW5zZm9ybWF0aW9uc1xuICovXG5cbklubGluZUxleGVyLnByb3RvdHlwZS5zbWFydHlwYW50cyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgaWYgKCF0aGlzLm9wdGlvbnMuc21hcnR5cGFudHMpIHJldHVybiB0ZXh0O1xuICByZXR1cm4gdGV4dFxuICAgIC8vIGVtLWRhc2hlc1xuICAgIC5yZXBsYWNlKC8tLS0vZywgJ1xcdTIwMTQnKVxuICAgIC8vIGVuLWRhc2hlc1xuICAgIC5yZXBsYWNlKC8tLS9nLCAnXFx1MjAxMycpXG4gICAgLy8gb3BlbmluZyBzaW5nbGVzXG4gICAgLnJlcGxhY2UoLyhefFstXFx1MjAxNC8oXFxbe1wiXFxzXSknL2csICckMVxcdTIwMTgnKVxuICAgIC8vIGNsb3Npbmcgc2luZ2xlcyAmIGFwb3N0cm9waGVzXG4gICAgLnJlcGxhY2UoLycvZywgJ1xcdTIwMTknKVxuICAgIC8vIG9wZW5pbmcgZG91Ymxlc1xuICAgIC5yZXBsYWNlKC8oXnxbLVxcdTIwMTQvKFxcW3tcXHUyMDE4XFxzXSlcIi9nLCAnJDFcXHUyMDFjJylcbiAgICAvLyBjbG9zaW5nIGRvdWJsZXNcbiAgICAucmVwbGFjZSgvXCIvZywgJ1xcdTIwMWQnKVxuICAgIC8vIGVsbGlwc2VzXG4gICAgLnJlcGxhY2UoL1xcLnszfS9nLCAnXFx1MjAyNicpO1xufTtcblxuLyoqXG4gKiBNYW5nbGUgTGlua3NcbiAqL1xuXG5JbmxpbmVMZXhlci5wcm90b3R5cGUubWFuZ2xlID0gZnVuY3Rpb24odGV4dCkge1xuICBpZiAoIXRoaXMub3B0aW9ucy5tYW5nbGUpIHJldHVybiB0ZXh0O1xuICB2YXIgb3V0ID0gJydcbiAgICAsIGwgPSB0ZXh0Lmxlbmd0aFxuICAgICwgaSA9IDBcbiAgICAsIGNoO1xuXG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgY2ggPSB0ZXh0LmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKE1hdGgucmFuZG9tKCkgPiAwLjUpIHtcbiAgICAgIGNoID0gJ3gnICsgY2gudG9TdHJpbmcoMTYpO1xuICAgIH1cbiAgICBvdXQgKz0gJyYjJyArIGNoICsgJzsnO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUmVuZGVyZXJcbiAqL1xuXG5mdW5jdGlvbiBSZW5kZXJlcihvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG59XG5cblJlbmRlcmVyLnByb3RvdHlwZS5jb2RlID0gZnVuY3Rpb24oY29kZSwgbGFuZywgZXNjYXBlZCkge1xuICBpZiAodGhpcy5vcHRpb25zLmhpZ2hsaWdodCkge1xuICAgIHZhciBvdXQgPSB0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0KGNvZGUsIGxhbmcpO1xuICAgIGlmIChvdXQgIT0gbnVsbCAmJiBvdXQgIT09IGNvZGUpIHtcbiAgICAgIGVzY2FwZWQgPSB0cnVlO1xuICAgICAgY29kZSA9IG91dDtcbiAgICB9XG4gIH1cblxuICBpZiAoIWxhbmcpIHtcbiAgICByZXR1cm4gJzxwcmU+PGNvZGU+J1xuICAgICAgKyAoZXNjYXBlZCA/IGNvZGUgOiBlc2NhcGUoY29kZSwgdHJ1ZSkpXG4gICAgICArICdcXG48L2NvZGU+PC9wcmU+JztcbiAgfVxuXG4gIHJldHVybiAnPHByZT48Y29kZSBjbGFzcz1cIidcbiAgICArIHRoaXMub3B0aW9ucy5sYW5nUHJlZml4XG4gICAgKyBlc2NhcGUobGFuZywgdHJ1ZSlcbiAgICArICdcIj4nXG4gICAgKyAoZXNjYXBlZCA/IGNvZGUgOiBlc2NhcGUoY29kZSwgdHJ1ZSkpXG4gICAgKyAnXFxuPC9jb2RlPjwvcHJlPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuYmxvY2txdW90ZSA9IGZ1bmN0aW9uKHF1b3RlKSB7XG4gIHJldHVybiAnPGJsb2NrcXVvdGU+XFxuJyArIHF1b3RlICsgJzwvYmxvY2txdW90ZT5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmh0bWwgPSBmdW5jdGlvbihodG1sKSB7XG4gIHJldHVybiBodG1sO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmhlYWRpbmcgPSBmdW5jdGlvbih0ZXh0LCBsZXZlbCwgcmF3KSB7XG4gIHJldHVybiAnPGgnXG4gICAgKyBsZXZlbFxuICAgICsgJyBpZD1cIidcbiAgICArIHRoaXMub3B0aW9ucy5oZWFkZXJQcmVmaXhcbiAgICArIHJhdy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teXFx3XSsvZywgJy0nKVxuICAgICsgJ1wiPidcbiAgICArIHRleHRcbiAgICArICc8L2gnXG4gICAgKyBsZXZlbFxuICAgICsgJz5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmhyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9wdGlvbnMueGh0bWwgPyAnPGhyLz5cXG4nIDogJzxocj5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmxpc3QgPSBmdW5jdGlvbihib2R5LCBvcmRlcmVkKSB7XG4gIHZhciB0eXBlID0gb3JkZXJlZCA/ICdvbCcgOiAndWwnO1xuICByZXR1cm4gJzwnICsgdHlwZSArICc+XFxuJyArIGJvZHkgKyAnPC8nICsgdHlwZSArICc+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5saXN0aXRlbSA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8bGk+JyArIHRleHQgKyAnPC9saT5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLnBhcmFncmFwaCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8cD4nICsgdGV4dCArICc8L3A+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS50YWJsZSA9IGZ1bmN0aW9uKGhlYWRlciwgYm9keSkge1xuICByZXR1cm4gJzx0YWJsZT5cXG4nXG4gICAgKyAnPHRoZWFkPlxcbidcbiAgICArIGhlYWRlclxuICAgICsgJzwvdGhlYWQ+XFxuJ1xuICAgICsgJzx0Ym9keT5cXG4nXG4gICAgKyBib2R5XG4gICAgKyAnPC90Ym9keT5cXG4nXG4gICAgKyAnPC90YWJsZT5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLnRhYmxlcm93ID0gZnVuY3Rpb24oY29udGVudCkge1xuICByZXR1cm4gJzx0cj5cXG4nICsgY29udGVudCArICc8L3RyPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUudGFibGVjZWxsID0gZnVuY3Rpb24oY29udGVudCwgZmxhZ3MpIHtcbiAgdmFyIHR5cGUgPSBmbGFncy5oZWFkZXIgPyAndGgnIDogJ3RkJztcbiAgdmFyIHRhZyA9IGZsYWdzLmFsaWduXG4gICAgPyAnPCcgKyB0eXBlICsgJyBzdHlsZT1cInRleHQtYWxpZ246JyArIGZsYWdzLmFsaWduICsgJ1wiPidcbiAgICA6ICc8JyArIHR5cGUgKyAnPic7XG4gIHJldHVybiB0YWcgKyBjb250ZW50ICsgJzwvJyArIHR5cGUgKyAnPlxcbic7XG59O1xuXG4vLyBzcGFuIGxldmVsIHJlbmRlcmVyXG5SZW5kZXJlci5wcm90b3R5cGUuc3Ryb25nID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gJzxzdHJvbmc+JyArIHRleHQgKyAnPC9zdHJvbmc+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5lbSA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8ZW0+JyArIHRleHQgKyAnPC9lbT4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmNvZGVzcGFuID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gJzxjb2RlPicgKyB0ZXh0ICsgJzwvY29kZT4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmJyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9wdGlvbnMueGh0bWwgPyAnPGJyLz4nIDogJzxicj4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmRlbCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8ZGVsPicgKyB0ZXh0ICsgJzwvZGVsPic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUubGluayA9IGZ1bmN0aW9uKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gIGlmICh0aGlzLm9wdGlvbnMuc2FuaXRpemUpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIHByb3QgPSBkZWNvZGVVUklDb21wb25lbnQodW5lc2NhcGUoaHJlZikpXG4gICAgICAgIC5yZXBsYWNlKC9bXlxcdzpdL2csICcnKVxuICAgICAgICAudG9Mb3dlckNhc2UoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGlmIChwcm90LmluZGV4T2YoJ2phdmFzY3JpcHQ6JykgPT09IDAgfHwgcHJvdC5pbmRleE9mKCd2YnNjcmlwdDonKSA9PT0gMCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuICB2YXIgb3V0ID0gJzxhIGhyZWY9XCInICsgaHJlZiArICdcIic7XG4gIGlmICh0aXRsZSkge1xuICAgIG91dCArPSAnIHRpdGxlPVwiJyArIHRpdGxlICsgJ1wiJztcbiAgfVxuICBvdXQgKz0gJz4nICsgdGV4dCArICc8L2E+JztcbiAgcmV0dXJuIG91dDtcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5pbWFnZSA9IGZ1bmN0aW9uKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gIHZhciBvdXQgPSAnPGltZyBzcmM9XCInICsgaHJlZiArICdcIiBhbHQ9XCInICsgdGV4dCArICdcIic7XG4gIGlmICh0aXRsZSkge1xuICAgIG91dCArPSAnIHRpdGxlPVwiJyArIHRpdGxlICsgJ1wiJztcbiAgfVxuICBvdXQgKz0gdGhpcy5vcHRpb25zLnhodG1sID8gJy8+JyA6ICc+JztcbiAgcmV0dXJuIG91dDtcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gdGV4dDtcbn07XG5cbi8qKlxuICogUGFyc2luZyAmIENvbXBpbGluZ1xuICovXG5cbmZ1bmN0aW9uIFBhcnNlcihvcHRpb25zKSB7XG4gIHRoaXMudG9rZW5zID0gW107XG4gIHRoaXMudG9rZW4gPSBudWxsO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IG1hcmtlZC5kZWZhdWx0cztcbiAgdGhpcy5vcHRpb25zLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyIHx8IG5ldyBSZW5kZXJlcjtcbiAgdGhpcy5yZW5kZXJlciA9IHRoaXMub3B0aW9ucy5yZW5kZXJlcjtcbiAgdGhpcy5yZW5kZXJlci5vcHRpb25zID0gdGhpcy5vcHRpb25zO1xufVxuXG4vKipcbiAqIFN0YXRpYyBQYXJzZSBNZXRob2RcbiAqL1xuXG5QYXJzZXIucGFyc2UgPSBmdW5jdGlvbihzcmMsIG9wdGlvbnMsIHJlbmRlcmVyKSB7XG4gIHZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKG9wdGlvbnMsIHJlbmRlcmVyKTtcbiAgcmV0dXJuIHBhcnNlci5wYXJzZShzcmMpO1xufTtcblxuLyoqXG4gKiBQYXJzZSBMb29wXG4gKi9cblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHNyYykge1xuICB0aGlzLmlubGluZSA9IG5ldyBJbmxpbmVMZXhlcihzcmMubGlua3MsIHRoaXMub3B0aW9ucywgdGhpcy5yZW5kZXJlcik7XG4gIHRoaXMudG9rZW5zID0gc3JjLnJldmVyc2UoKTtcblxuICB2YXIgb3V0ID0gJyc7XG4gIHdoaWxlICh0aGlzLm5leHQoKSkge1xuICAgIG91dCArPSB0aGlzLnRvaygpO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogTmV4dCBUb2tlblxuICovXG5cblBhcnNlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50b2tlbiA9IHRoaXMudG9rZW5zLnBvcCgpO1xufTtcblxuLyoqXG4gKiBQcmV2aWV3IE5leHQgVG9rZW5cbiAqL1xuXG5QYXJzZXIucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudG9rZW5zW3RoaXMudG9rZW5zLmxlbmd0aCAtIDFdIHx8IDA7XG59O1xuXG4vKipcbiAqIFBhcnNlIFRleHQgVG9rZW5zXG4gKi9cblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVRleHQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGJvZHkgPSB0aGlzLnRva2VuLnRleHQ7XG5cbiAgd2hpbGUgKHRoaXMucGVlaygpLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgIGJvZHkgKz0gJ1xcbicgKyB0aGlzLm5leHQoKS50ZXh0O1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuaW5saW5lLm91dHB1dChib2R5KTtcbn07XG5cbi8qKlxuICogUGFyc2UgQ3VycmVudCBUb2tlblxuICovXG5cblBhcnNlci5wcm90b3R5cGUudG9rID0gZnVuY3Rpb24oKSB7XG4gIHN3aXRjaCAodGhpcy50b2tlbi50eXBlKSB7XG4gICAgY2FzZSAnc3BhY2UnOiB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNhc2UgJ2hyJzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuaHIoKTtcbiAgICB9XG4gICAgY2FzZSAnaGVhZGluZyc6IHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmhlYWRpbmcoXG4gICAgICAgIHRoaXMuaW5saW5lLm91dHB1dCh0aGlzLnRva2VuLnRleHQpLFxuICAgICAgICB0aGlzLnRva2VuLmRlcHRoLFxuICAgICAgICB0aGlzLnRva2VuLnRleHQpO1xuICAgIH1cbiAgICBjYXNlICdjb2RlJzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuY29kZSh0aGlzLnRva2VuLnRleHQsXG4gICAgICAgIHRoaXMudG9rZW4ubGFuZyxcbiAgICAgICAgdGhpcy50b2tlbi5lc2NhcGVkKTtcbiAgICB9XG4gICAgY2FzZSAndGFibGUnOiB7XG4gICAgICB2YXIgaGVhZGVyID0gJydcbiAgICAgICAgLCBib2R5ID0gJydcbiAgICAgICAgLCBpXG4gICAgICAgICwgcm93XG4gICAgICAgICwgY2VsbFxuICAgICAgICAsIGZsYWdzXG4gICAgICAgICwgajtcblxuICAgICAgLy8gaGVhZGVyXG4gICAgICBjZWxsID0gJyc7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy50b2tlbi5oZWFkZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZmxhZ3MgPSB7IGhlYWRlcjogdHJ1ZSwgYWxpZ246IHRoaXMudG9rZW4uYWxpZ25baV0gfTtcbiAgICAgICAgY2VsbCArPSB0aGlzLnJlbmRlcmVyLnRhYmxlY2VsbChcbiAgICAgICAgICB0aGlzLmlubGluZS5vdXRwdXQodGhpcy50b2tlbi5oZWFkZXJbaV0pLFxuICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBhbGlnbjogdGhpcy50b2tlbi5hbGlnbltpXSB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBoZWFkZXIgKz0gdGhpcy5yZW5kZXJlci50YWJsZXJvdyhjZWxsKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMudG9rZW4uY2VsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcm93ID0gdGhpcy50b2tlbi5jZWxsc1tpXTtcblxuICAgICAgICBjZWxsID0gJyc7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBjZWxsICs9IHRoaXMucmVuZGVyZXIudGFibGVjZWxsKFxuICAgICAgICAgICAgdGhpcy5pbmxpbmUub3V0cHV0KHJvd1tqXSksXG4gICAgICAgICAgICB7IGhlYWRlcjogZmFsc2UsIGFsaWduOiB0aGlzLnRva2VuLmFsaWduW2pdIH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgYm9keSArPSB0aGlzLnJlbmRlcmVyLnRhYmxlcm93KGNlbGwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIudGFibGUoaGVhZGVyLCBib2R5KTtcbiAgICB9XG4gICAgY2FzZSAnYmxvY2txdW90ZV9zdGFydCc6IHtcbiAgICAgIHZhciBib2R5ID0gJyc7XG5cbiAgICAgIHdoaWxlICh0aGlzLm5leHQoKS50eXBlICE9PSAnYmxvY2txdW90ZV9lbmQnKSB7XG4gICAgICAgIGJvZHkgKz0gdGhpcy50b2soKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuYmxvY2txdW90ZShib2R5KTtcbiAgICB9XG4gICAgY2FzZSAnbGlzdF9zdGFydCc6IHtcbiAgICAgIHZhciBib2R5ID0gJydcbiAgICAgICAgLCBvcmRlcmVkID0gdGhpcy50b2tlbi5vcmRlcmVkO1xuXG4gICAgICB3aGlsZSAodGhpcy5uZXh0KCkudHlwZSAhPT0gJ2xpc3RfZW5kJykge1xuICAgICAgICBib2R5ICs9IHRoaXMudG9rKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmxpc3QoYm9keSwgb3JkZXJlZCk7XG4gICAgfVxuICAgIGNhc2UgJ2xpc3RfaXRlbV9zdGFydCc6IHtcbiAgICAgIHZhciBib2R5ID0gJyc7XG5cbiAgICAgIHdoaWxlICh0aGlzLm5leHQoKS50eXBlICE9PSAnbGlzdF9pdGVtX2VuZCcpIHtcbiAgICAgICAgYm9keSArPSB0aGlzLnRva2VuLnR5cGUgPT09ICd0ZXh0J1xuICAgICAgICAgID8gdGhpcy5wYXJzZVRleHQoKVxuICAgICAgICAgIDogdGhpcy50b2soKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIubGlzdGl0ZW0oYm9keSk7XG4gICAgfVxuICAgIGNhc2UgJ2xvb3NlX2l0ZW1fc3RhcnQnOiB7XG4gICAgICB2YXIgYm9keSA9ICcnO1xuXG4gICAgICB3aGlsZSAodGhpcy5uZXh0KCkudHlwZSAhPT0gJ2xpc3RfaXRlbV9lbmQnKSB7XG4gICAgICAgIGJvZHkgKz0gdGhpcy50b2soKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIubGlzdGl0ZW0oYm9keSk7XG4gICAgfVxuICAgIGNhc2UgJ2h0bWwnOiB7XG4gICAgICB2YXIgaHRtbCA9ICF0aGlzLnRva2VuLnByZSAmJiAhdGhpcy5vcHRpb25zLnBlZGFudGljXG4gICAgICAgID8gdGhpcy5pbmxpbmUub3V0cHV0KHRoaXMudG9rZW4udGV4dClcbiAgICAgICAgOiB0aGlzLnRva2VuLnRleHQ7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5odG1sKGh0bWwpO1xuICAgIH1cbiAgICBjYXNlICdwYXJhZ3JhcGgnOiB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5wYXJhZ3JhcGgodGhpcy5pbmxpbmUub3V0cHV0KHRoaXMudG9rZW4udGV4dCkpO1xuICAgIH1cbiAgICBjYXNlICd0ZXh0Jzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIucGFyYWdyYXBoKHRoaXMucGFyc2VUZXh0KCkpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBIZWxwZXJzXG4gKi9cblxuZnVuY3Rpb24gZXNjYXBlKGh0bWwsIGVuY29kZSkge1xuICByZXR1cm4gaHRtbFxuICAgIC5yZXBsYWNlKCFlbmNvZGUgPyAvJig/ISM/XFx3KzspL2cgOiAvJi9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKVxuICAgIC5yZXBsYWNlKC8nL2csICcmIzM5OycpO1xufVxuXG5mdW5jdGlvbiB1bmVzY2FwZShodG1sKSB7XG5cdC8vIGV4cGxpY2l0bHkgbWF0Y2ggZGVjaW1hbCwgaGV4LCBhbmQgbmFtZWQgSFRNTCBlbnRpdGllcyBcbiAgcmV0dXJuIGh0bWwucmVwbGFjZSgvJigjKD86XFxkKyl8KD86I3hbMC05QS1GYS1mXSspfCg/OlxcdyspKTs/L2csIGZ1bmN0aW9uKF8sIG4pIHtcbiAgICBuID0gbi50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChuID09PSAnY29sb24nKSByZXR1cm4gJzonO1xuICAgIGlmIChuLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICByZXR1cm4gbi5jaGFyQXQoMSkgPT09ICd4J1xuICAgICAgICA/IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobi5zdWJzdHJpbmcoMiksIDE2KSlcbiAgICAgICAgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKCtuLnN1YnN0cmluZygxKSk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2UocmVnZXgsIG9wdCkge1xuICByZWdleCA9IHJlZ2V4LnNvdXJjZTtcbiAgb3B0ID0gb3B0IHx8ICcnO1xuICByZXR1cm4gZnVuY3Rpb24gc2VsZihuYW1lLCB2YWwpIHtcbiAgICBpZiAoIW5hbWUpIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4LCBvcHQpO1xuICAgIHZhbCA9IHZhbC5zb3VyY2UgfHwgdmFsO1xuICAgIHZhbCA9IHZhbC5yZXBsYWNlKC8oXnxbXlxcW10pXFxeL2csICckMScpO1xuICAgIHJlZ2V4ID0gcmVnZXgucmVwbGFjZShuYW1lLCB2YWwpO1xuICAgIHJldHVybiBzZWxmO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbm5vb3AuZXhlYyA9IG5vb3A7XG5cbmZ1bmN0aW9uIG1lcmdlKG9iaikge1xuICB2YXIgaSA9IDFcbiAgICAsIHRhcmdldFxuICAgICwga2V5O1xuXG4gIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdGFyZ2V0ID0gYXJndW1lbnRzW2ldO1xuICAgIGZvciAoa2V5IGluIHRhcmdldCkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSB0YXJnZXRba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5cbi8qKlxuICogTWFya2VkXG4gKi9cblxuZnVuY3Rpb24gbWFya2VkKHNyYywgb3B0LCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgfHwgdHlwZW9mIG9wdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrID0gb3B0O1xuICAgICAgb3B0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBvcHQgPSBtZXJnZSh7fSwgbWFya2VkLmRlZmF1bHRzLCBvcHQgfHwge30pO1xuXG4gICAgdmFyIGhpZ2hsaWdodCA9IG9wdC5oaWdobGlnaHRcbiAgICAgICwgdG9rZW5zXG4gICAgICAsIHBlbmRpbmdcbiAgICAgICwgaSA9IDA7XG5cbiAgICB0cnkge1xuICAgICAgdG9rZW5zID0gTGV4ZXIubGV4KHNyYywgb3B0KVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlKTtcbiAgICB9XG5cbiAgICBwZW5kaW5nID0gdG9rZW5zLmxlbmd0aDtcblxuICAgIHZhciBkb25lID0gZnVuY3Rpb24oZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIG9wdC5oaWdobGlnaHQgPSBoaWdobGlnaHQ7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3V0O1xuXG4gICAgICB0cnkge1xuICAgICAgICBvdXQgPSBQYXJzZXIucGFyc2UodG9rZW5zLCBvcHQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBlcnIgPSBlO1xuICAgICAgfVxuXG4gICAgICBvcHQuaGlnaGxpZ2h0ID0gaGlnaGxpZ2h0O1xuXG4gICAgICByZXR1cm4gZXJyXG4gICAgICAgID8gY2FsbGJhY2soZXJyKVxuICAgICAgICA6IGNhbGxiYWNrKG51bGwsIG91dCk7XG4gICAgfTtcblxuICAgIGlmICghaGlnaGxpZ2h0IHx8IGhpZ2hsaWdodC5sZW5ndGggPCAzKSB7XG4gICAgICByZXR1cm4gZG9uZSgpO1xuICAgIH1cblxuICAgIGRlbGV0ZSBvcHQuaGlnaGxpZ2h0O1xuXG4gICAgaWYgKCFwZW5kaW5nKSByZXR1cm4gZG9uZSgpO1xuXG4gICAgZm9yICg7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIChmdW5jdGlvbih0b2tlbikge1xuICAgICAgICBpZiAodG9rZW4udHlwZSAhPT0gJ2NvZGUnKSB7XG4gICAgICAgICAgcmV0dXJuIC0tcGVuZGluZyB8fCBkb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2hsaWdodCh0b2tlbi50ZXh0LCB0b2tlbi5sYW5nLCBmdW5jdGlvbihlcnIsIGNvZGUpIHtcbiAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgIGlmIChjb2RlID09IG51bGwgfHwgY29kZSA9PT0gdG9rZW4udGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIC0tcGVuZGluZyB8fCBkb25lKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRva2VuLnRleHQgPSBjb2RlO1xuICAgICAgICAgIHRva2VuLmVzY2FwZWQgPSB0cnVlO1xuICAgICAgICAgIC0tcGVuZGluZyB8fCBkb25lKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSkodG9rZW5zW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cbiAgdHJ5IHtcbiAgICBpZiAob3B0KSBvcHQgPSBtZXJnZSh7fSwgbWFya2VkLmRlZmF1bHRzLCBvcHQpO1xuICAgIHJldHVybiBQYXJzZXIucGFyc2UoTGV4ZXIubGV4KHNyYywgb3B0KSwgb3B0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGUubWVzc2FnZSArPSAnXFxuUGxlYXNlIHJlcG9ydCB0aGlzIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGpqL21hcmtlZC4nO1xuICAgIGlmICgob3B0IHx8IG1hcmtlZC5kZWZhdWx0cykuc2lsZW50KSB7XG4gICAgICByZXR1cm4gJzxwPkFuIGVycm9yIG9jY3VyZWQ6PC9wPjxwcmU+J1xuICAgICAgICArIGVzY2FwZShlLm1lc3NhZ2UgKyAnJywgdHJ1ZSlcbiAgICAgICAgKyAnPC9wcmU+JztcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxufVxuXG4vKipcbiAqIE9wdGlvbnNcbiAqL1xuXG5tYXJrZWQub3B0aW9ucyA9XG5tYXJrZWQuc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKG9wdCkge1xuICBtZXJnZShtYXJrZWQuZGVmYXVsdHMsIG9wdCk7XG4gIHJldHVybiBtYXJrZWQ7XG59O1xuXG5tYXJrZWQuZGVmYXVsdHMgPSB7XG4gIGdmbTogdHJ1ZSxcbiAgdGFibGVzOiB0cnVlLFxuICBicmVha3M6IGZhbHNlLFxuICBwZWRhbnRpYzogZmFsc2UsXG4gIHNhbml0aXplOiBmYWxzZSxcbiAgc2FuaXRpemVyOiBudWxsLFxuICBtYW5nbGU6IHRydWUsXG4gIHNtYXJ0TGlzdHM6IGZhbHNlLFxuICBzaWxlbnQ6IGZhbHNlLFxuICBoaWdobGlnaHQ6IG51bGwsXG4gIGxhbmdQcmVmaXg6ICdsYW5nLScsXG4gIHNtYXJ0eXBhbnRzOiBmYWxzZSxcbiAgaGVhZGVyUHJlZml4OiAnJyxcbiAgcmVuZGVyZXI6IG5ldyBSZW5kZXJlcixcbiAgeGh0bWw6IGZhbHNlXG59O1xuXG4vKipcbiAqIEV4cG9zZVxuICovXG5cbm1hcmtlZC5QYXJzZXIgPSBQYXJzZXI7XG5tYXJrZWQucGFyc2VyID0gUGFyc2VyLnBhcnNlO1xuXG5tYXJrZWQuUmVuZGVyZXIgPSBSZW5kZXJlcjtcblxubWFya2VkLkxleGVyID0gTGV4ZXI7XG5tYXJrZWQubGV4ZXIgPSBMZXhlci5sZXg7XG5cbm1hcmtlZC5JbmxpbmVMZXhlciA9IElubGluZUxleGVyO1xubWFya2VkLmlubGluZUxleGVyID0gSW5saW5lTGV4ZXIub3V0cHV0O1xuXG5tYXJrZWQucGFyc2UgPSBtYXJrZWQ7XG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBtYXJrZWQ7XG59IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBtYXJrZWQ7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy5tYXJrZWQgPSBtYXJrZWQ7XG59XG5cbn0pLmNhbGwoZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzIHx8ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCk7XG59KCkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbWFya2VkL2xpYi9tYXJrZWQuanNcbi8vIG1vZHVsZSBpZCA9IDI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2goZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxuXHRcdGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==